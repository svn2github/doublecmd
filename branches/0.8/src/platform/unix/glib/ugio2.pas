{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit uGio2;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

interface
uses
  CTypes, uGObject2, uGLib2;

const
  DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME = 'gio-desktop-app-info-lookup';
  FILE_ATTRIBUTE_ACCESS_CAN_DELETE = 'access::can-delete';
  FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = 'access::can-execute';
  FILE_ATTRIBUTE_ACCESS_CAN_READ = 'access::can-read';
  FILE_ATTRIBUTE_ACCESS_CAN_RENAME = 'access::can-rename';
  FILE_ATTRIBUTE_ACCESS_CAN_TRASH = 'access::can-trash';
  FILE_ATTRIBUTE_ACCESS_CAN_WRITE = 'access::can-write';
  FILE_ATTRIBUTE_DOS_IS_ARCHIVE = 'dos::is-archive';
  FILE_ATTRIBUTE_DOS_IS_SYSTEM = 'dos::is-system';
  FILE_ATTRIBUTE_ETAG_VALUE = 'etag::value';
  FILE_ATTRIBUTE_FILESYSTEM_FREE = 'filesystem::free';
  FILE_ATTRIBUTE_FILESYSTEM_READONLY = 'filesystem::readonly';
  FILE_ATTRIBUTE_FILESYSTEM_SIZE = 'filesystem::size';
  FILE_ATTRIBUTE_FILESYSTEM_TYPE = 'filesystem::type';
  FILE_ATTRIBUTE_FILESYSTEM_USED = 'filesystem::used';
  FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = 'filesystem::use-preview';
  FILE_ATTRIBUTE_GVFS_BACKEND = 'gvfs::backend';
  FILE_ATTRIBUTE_ID_FILE = 'id::file';
  FILE_ATTRIBUTE_ID_FILESYSTEM = 'id::filesystem';
  FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = 'mountable::can-eject';
  FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = 'mountable::can-mount';
  FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = 'mountable::can-poll';
  FILE_ATTRIBUTE_MOUNTABLE_CAN_START = 'mountable::can-start';
  FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = 'mountable::can-start-degraded';
  FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = 'mountable::can-stop';
  FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = 'mountable::can-unmount';
  FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = 'mountable::hal-udi';
  FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = 'mountable::is-media-check-automatic';
  FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = 'mountable::start-stop-type';
  FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = 'mountable::unix-device';
  FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = 'mountable::unix-device-file';
  FILE_ATTRIBUTE_OWNER_GROUP = 'owner::group';
  FILE_ATTRIBUTE_OWNER_USER = 'owner::user';
  FILE_ATTRIBUTE_OWNER_USER_REAL = 'owner::user-real';
  FILE_ATTRIBUTE_PREVIEW_ICON = 'preview::icon';
  FILE_ATTRIBUTE_SELINUX_CONTEXT = 'selinux::context';
  FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = 'standard::allocated-size';
  FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = 'standard::content-type';
  FILE_ATTRIBUTE_STANDARD_COPY_NAME = 'standard::copy-name';
  FILE_ATTRIBUTE_STANDARD_DESCRIPTION = 'standard::description';
  FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = 'standard::display-name';
  FILE_ATTRIBUTE_STANDARD_EDIT_NAME = 'standard::edit-name';
  FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = 'standard::fast-content-type';
  FILE_ATTRIBUTE_STANDARD_ICON = 'standard::icon';
  FILE_ATTRIBUTE_STANDARD_IS_BACKUP = 'standard::is-backup';
  FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = 'standard::is-hidden';
  FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = 'standard::is-symlink';
  FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = 'standard::is-virtual';
  FILE_ATTRIBUTE_STANDARD_NAME = 'standard::name';
  FILE_ATTRIBUTE_STANDARD_SIZE = 'standard::size';
  FILE_ATTRIBUTE_STANDARD_SORT_ORDER = 'standard::sort-order';
  FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = 'standard::symbolic-icon';
  FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = 'standard::symlink-target';
  FILE_ATTRIBUTE_STANDARD_TARGET_URI = 'standard::target-uri';
  FILE_ATTRIBUTE_STANDARD_TYPE = 'standard::type';
  FILE_ATTRIBUTE_THUMBNAILING_FAILED = 'thumbnail::failed';
  FILE_ATTRIBUTE_THUMBNAIL_PATH = 'thumbnail::path';
  FILE_ATTRIBUTE_TIME_ACCESS = 'time::access';
  FILE_ATTRIBUTE_TIME_ACCESS_USEC = 'time::access-usec';
  FILE_ATTRIBUTE_TIME_CHANGED = 'time::changed';
  FILE_ATTRIBUTE_TIME_CHANGED_USEC = 'time::changed-usec';
  FILE_ATTRIBUTE_TIME_CREATED = 'time::created';
  FILE_ATTRIBUTE_TIME_CREATED_USEC = 'time::created-usec';
  FILE_ATTRIBUTE_TIME_MODIFIED = 'time::modified';
  FILE_ATTRIBUTE_TIME_MODIFIED_USEC = 'time::modified-usec';
  FILE_ATTRIBUTE_TRASH_DELETION_DATE = 'trash::deletion-date';
  FILE_ATTRIBUTE_TRASH_ITEM_COUNT = 'trash::item-count';
  FILE_ATTRIBUTE_TRASH_ORIG_PATH = 'trash::orig-path';
  FILE_ATTRIBUTE_UNIX_BLOCKS = 'unix::blocks';
  FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = 'unix::block-size';
  FILE_ATTRIBUTE_UNIX_DEVICE = 'unix::device';
  FILE_ATTRIBUTE_UNIX_GID = 'unix::gid';
  FILE_ATTRIBUTE_UNIX_INODE = 'unix::inode';
  FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = 'unix::is-mountpoint';
  FILE_ATTRIBUTE_UNIX_MODE = 'unix::mode';
  FILE_ATTRIBUTE_UNIX_NLINK = 'unix::nlink';
  FILE_ATTRIBUTE_UNIX_RDEV = 'unix::rdev';
  FILE_ATTRIBUTE_UNIX_UID = 'unix::uid';
  MENU_ATTRIBUTE_ACTION = 'action';
  MENU_ATTRIBUTE_ACTION_NAMESPACE = 'action-namespace';
  MENU_ATTRIBUTE_LABEL = 'label';
  MENU_ATTRIBUTE_TARGET = 'target';
  MENU_LINK_SECTION = 'section';
  MENU_LINK_SUBMENU = 'submenu';
  NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = 'gio-native-volume-monitor';
  NETWORK_MONITOR_EXTENSION_POINT_NAME = 'gio-network-monitor';
  PROXY_EXTENSION_POINT_NAME = 'gio-proxy';
  PROXY_RESOLVER_EXTENSION_POINT_NAME = 'gio-proxy-resolver';
  TLS_BACKEND_EXTENSION_POINT_NAME = 'gio-tls-backend';
  TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = '1.3.6.1.5.5.7.3.2';
  TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = '1.3.6.1.5.5.7.3.1';
  VFS_EXTENSION_POINT_NAME = 'gio-vfs';
  VOLUME_IDENTIFIER_KIND_CLASS = 'class';
  VOLUME_IDENTIFIER_KIND_HAL_UDI = 'hal-udi';
  VOLUME_IDENTIFIER_KIND_LABEL = 'label';
  VOLUME_IDENTIFIER_KIND_NFS_MOUNT = 'nfs-mount';
  VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = 'unix-device';
  VOLUME_IDENTIFIER_KIND_UUID = 'uuid';
  VOLUME_MONITOR_EXTENSION_POINT_NAME = 'gio-volume-monitor';

type
  TGAppInfoCreateFlags = Integer;
const
  { GAppInfoCreateFlags }
  G_APP_INFO_CREATE_NONE: TGAppInfoCreateFlags = 0;
  G_APP_INFO_CREATE_NEEDS_TERMINAL: TGAppInfoCreateFlags = 1;
  G_APP_INFO_CREATE_SUPPORTS_URIS: TGAppInfoCreateFlags = 2;
  G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION: TGAppInfoCreateFlags = 4;

type
  TGApplicationFlags = Integer;
const
  { GApplicationFlags }
  G_APPLICATION_FLAGS_NONE: TGApplicationFlags = 0;
  G_APPLICATION_IS_SERVICE: TGApplicationFlags = 1;
  G_APPLICATION_IS_LAUNCHER: TGApplicationFlags = 2;
  G_APPLICATION_HANDLES_OPEN: TGApplicationFlags = 4;
  G_APPLICATION_HANDLES_COMMAND_LINE: TGApplicationFlags = 8;
  G_APPLICATION_SEND_ENVIRONMENT: TGApplicationFlags = 16;
  G_APPLICATION_NON_UNIQUE: TGApplicationFlags = 32;

type
  TGDBusConnectionFlags = Integer;
const
  { GDBusConnectionFlags }
  G_DBUS_CONNECTION_FLAGS_NONE: TGDBusConnectionFlags = 0;
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT: TGDBusConnectionFlags = 1;
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER: TGDBusConnectionFlags = 2;
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: TGDBusConnectionFlags = 4;
  G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION: TGDBusConnectionFlags = 8;
  G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING: TGDBusConnectionFlags = 16;

type
  TGDBusCallFlags = Integer;
const
  { GDBusCallFlags }
  G_DBUS_CALL_FLAGS_NONE: TGDBusCallFlags = 0;
  G_DBUS_CALL_FLAGS_NO_AUTO_START: TGDBusCallFlags = 1;

type
  TGDBusCapabilityFlags = Integer;
const
  { GDBusCapabilityFlags }
  G_DBUS_CAPABILITY_FLAGS_NONE: TGDBusCapabilityFlags = 0;
  G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING: TGDBusCapabilityFlags = 1;

type
  TGDBusSubtreeFlags = Integer;
const
  { GDBusSubtreeFlags }
  G_DBUS_SUBTREE_FLAGS_NONE: TGDBusSubtreeFlags = 0;
  G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES: TGDBusSubtreeFlags = 1;

type
  TGDBusSendMessageFlags = Integer;
const
  { GDBusSendMessageFlags }
  G_DBUS_SEND_MESSAGE_FLAGS_NONE: TGDBusSendMessageFlags = 0;
  G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL: TGDBusSendMessageFlags = 1;

type
  TGDBusSignalFlags = Integer;
const
  { GDBusSignalFlags }
  G_DBUS_SIGNAL_FLAGS_NONE: TGDBusSignalFlags = 0;
  G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE: TGDBusSignalFlags = 1;

type
  TGFileCreateFlags = Integer;
const
  { GFileCreateFlags }
  G_FILE_CREATE_NONE: TGFileCreateFlags = 0;
  G_FILE_CREATE_PRIVATE: TGFileCreateFlags = 1;
  G_FILE_CREATE_REPLACE_DESTINATION: TGFileCreateFlags = 2;

type
  TGFileCopyFlags = Integer;
const
  { GFileCopyFlags }
  G_FILE_COPY_NONE: TGFileCopyFlags = 0;
  G_FILE_COPY_OVERWRITE: TGFileCopyFlags = 1;
  G_FILE_COPY_BACKUP: TGFileCopyFlags = 2;
  G_FILE_COPY_NOFOLLOW_SYMLINKS: TGFileCopyFlags = 4;
  G_FILE_COPY_ALL_METADATA: TGFileCopyFlags = 8;
  G_FILE_COPY_NO_FALLBACK_FOR_MOVE: TGFileCopyFlags = 16;
  G_FILE_COPY_TARGET_DEFAULT_PERMS: TGFileCopyFlags = 32;

type
  TGMountUnmountFlags = Integer;
const
  { GMountUnmountFlags }
  G_MOUNT_UNMOUNT_NONE: TGMountUnmountFlags = 0;
  G_MOUNT_UNMOUNT_FORCE: TGMountUnmountFlags = 1;

type
  TGFileQueryInfoFlags = Integer;
const
  { GFileQueryInfoFlags }
  G_FILE_QUERY_INFO_NONE: TGFileQueryInfoFlags = 0;
  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS: TGFileQueryInfoFlags = 1;

type
  TGFileMonitorFlags = Integer;
const
  { GFileMonitorFlags }
  G_FILE_MONITOR_NONE: TGFileMonitorFlags = 0;
  G_FILE_MONITOR_WATCH_MOUNTS: TGFileMonitorFlags = 1;
  G_FILE_MONITOR_SEND_MOVED: TGFileMonitorFlags = 2;
  G_FILE_MONITOR_WATCH_HARD_LINKS: TGFileMonitorFlags = 4;

type
  TGMountMountFlags = Integer;
const
  { GMountMountFlags }
  G_MOUNT_MOUNT_NONE: TGMountMountFlags = 0;

type
  TGFileAttributeType = Integer;
const
  { GFileAttributeType }
  G_FILE_ATTRIBUTE_TYPE_INVALID: TGFileAttributeType = 0;
  G_FILE_ATTRIBUTE_TYPE_STRING: TGFileAttributeType = 1;
  G_FILE_ATTRIBUTE_TYPE_BYTE_STRING: TGFileAttributeType = 2;
  G_FILE_ATTRIBUTE_TYPE_BOOLEAN: TGFileAttributeType = 3;
  G_FILE_ATTRIBUTE_TYPE_UINT32: TGFileAttributeType = 4;
  G_FILE_ATTRIBUTE_TYPE_INT32: TGFileAttributeType = 5;
  G_FILE_ATTRIBUTE_TYPE_UINT64: TGFileAttributeType = 6;
  G_FILE_ATTRIBUTE_TYPE_INT64: TGFileAttributeType = 7;
  G_FILE_ATTRIBUTE_TYPE_OBJECT: TGFileAttributeType = 8;
  G_FILE_ATTRIBUTE_TYPE_STRINGV: TGFileAttributeType = 9;

type
  TGDriveStartFlags = Integer;
const
  { GDriveStartFlags }
  G_DRIVE_START_NONE: TGDriveStartFlags = 0;

type
  TGAskPasswordFlags = Integer;
const
  { GAskPasswordFlags }
  G_ASK_PASSWORD_NEED_PASSWORD: TGAskPasswordFlags = 1;
  G_ASK_PASSWORD_NEED_USERNAME: TGAskPasswordFlags = 2;
  G_ASK_PASSWORD_NEED_DOMAIN: TGAskPasswordFlags = 4;
  G_ASK_PASSWORD_SAVING_SUPPORTED: TGAskPasswordFlags = 8;
  G_ASK_PASSWORD_ANONYMOUS_SUPPORTED: TGAskPasswordFlags = 16;

type
  TGOutputStreamSpliceFlags = Integer;
const
  { GOutputStreamSpliceFlags }
  G_OUTPUT_STREAM_SPLICE_NONE: TGOutputStreamSpliceFlags = 0;
  G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE: TGOutputStreamSpliceFlags = 1;
  G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET: TGOutputStreamSpliceFlags = 2;

type
  TGBusNameOwnerFlags = Integer;
const
  { GBusNameOwnerFlags }
  G_BUS_NAME_OWNER_FLAGS_NONE: TGBusNameOwnerFlags = 0;
  G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT: TGBusNameOwnerFlags = 1;
  G_BUS_NAME_OWNER_FLAGS_REPLACE: TGBusNameOwnerFlags = 2;

type
  TGBusNameWatcherFlags = Integer;
const
  { GBusNameWatcherFlags }
  G_BUS_NAME_WATCHER_FLAGS_NONE: TGBusNameWatcherFlags = 0;
  G_BUS_NAME_WATCHER_FLAGS_AUTO_START: TGBusNameWatcherFlags = 1;

type
  TGBusType = Integer;
const
  { GBusType }
  G_BUS_TYPE_STARTER: TGBusType = -1;
  G_BUS_TYPE_NONE: TGBusType = 0;
  G_BUS_TYPE_SYSTEM: TGBusType = 1;
  G_BUS_TYPE_SESSION: TGBusType = 2;

type
  TGConverterFlags = Integer;
const
  { GConverterFlags }
  G_CONVERTER_NO_FLAGS: TGConverterFlags = 0;
  G_CONVERTER_INPUT_AT_END: TGConverterFlags = 1;
  G_CONVERTER_FLUSH: TGConverterFlags = 2;

type
  TGConverterResult = Integer;
const
  { GConverterResult }
  G_CONVERTER_ERROR: TGConverterResult = 0;
  G_CONVERTER_CONVERTED: TGConverterResult = 1;
  G_CONVERTER_FINISHED: TGConverterResult = 2;
  G_CONVERTER_FLUSHED: TGConverterResult = 3;

type
  TGCredentialsType = Integer;
const
  { GCredentialsType }
  G_CREDENTIALS_TYPE_INVALID: TGCredentialsType = 0;
  G_CREDENTIALS_TYPE_LINUX_UCRED: TGCredentialsType = 1;
  G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED: TGCredentialsType = 2;
  G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED: TGCredentialsType = 3;

type
  TGIOStreamSpliceFlags = Integer;
const
  { GIOStreamSpliceFlags }
  G_IO_STREAM_SPLICE_NONE: TGIOStreamSpliceFlags = 0;
  G_IO_STREAM_SPLICE_CLOSE_STREAM1: TGIOStreamSpliceFlags = 1;
  G_IO_STREAM_SPLICE_CLOSE_STREAM2: TGIOStreamSpliceFlags = 2;
  G_IO_STREAM_SPLICE_WAIT_FOR_BOTH: TGIOStreamSpliceFlags = 4;

type
  TGDBusMessageFlags = Integer;
const
  { GDBusMessageFlags }
  G_DBUS_MESSAGE_FLAGS_NONE: TGDBusMessageFlags = 0;
  G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED: TGDBusMessageFlags = 1;
  G_DBUS_MESSAGE_FLAGS_NO_AUTO_START: TGDBusMessageFlags = 2;

type
  TGDBusMessageHeaderField = Integer;
const
  { GDBusMessageHeaderField }
  G_DBUS_MESSAGE_HEADER_FIELD_INVALID: TGDBusMessageHeaderField = 0;
  G_DBUS_MESSAGE_HEADER_FIELD_PATH: TGDBusMessageHeaderField = 1;
  G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE: TGDBusMessageHeaderField = 2;
  G_DBUS_MESSAGE_HEADER_FIELD_MEMBER: TGDBusMessageHeaderField = 3;
  G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME: TGDBusMessageHeaderField = 4;
  G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL: TGDBusMessageHeaderField = 5;
  G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION: TGDBusMessageHeaderField = 6;
  G_DBUS_MESSAGE_HEADER_FIELD_SENDER: TGDBusMessageHeaderField = 7;
  G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE: TGDBusMessageHeaderField = 8;
  G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS: TGDBusMessageHeaderField = 9;

type
  TGDBusMessageByteOrder = Integer;
const
  { GDBusMessageByteOrder }
  G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN: TGDBusMessageByteOrder = 66;
  G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN: TGDBusMessageByteOrder = 108;

type
  TGDBusMessageType = Integer;
const
  { GDBusMessageType }
  G_DBUS_MESSAGE_TYPE_INVALID: TGDBusMessageType = 0;
  G_DBUS_MESSAGE_TYPE_METHOD_CALL: TGDBusMessageType = 1;
  G_DBUS_MESSAGE_TYPE_METHOD_RETURN: TGDBusMessageType = 2;
  G_DBUS_MESSAGE_TYPE_ERROR: TGDBusMessageType = 3;
  G_DBUS_MESSAGE_TYPE_SIGNAL: TGDBusMessageType = 4;

type
  TGDBusError = Integer;
const
  { GDBusError }
  G_DBUS_ERROR_FAILED: TGDBusError = 0;
  G_DBUS_ERROR_NO_MEMORY: TGDBusError = 1;
  G_DBUS_ERROR_SERVICE_UNKNOWN: TGDBusError = 2;
  G_DBUS_ERROR_NAME_HAS_NO_OWNER: TGDBusError = 3;
  G_DBUS_ERROR_NO_REPLY: TGDBusError = 4;
  G_DBUS_ERROR_IO_ERROR: TGDBusError = 5;
  G_DBUS_ERROR_BAD_ADDRESS: TGDBusError = 6;
  G_DBUS_ERROR_NOT_SUPPORTED: TGDBusError = 7;
  G_DBUS_ERROR_LIMITS_EXCEEDED: TGDBusError = 8;
  G_DBUS_ERROR_ACCESS_DENIED: TGDBusError = 9;
  G_DBUS_ERROR_AUTH_FAILED: TGDBusError = 10;
  G_DBUS_ERROR_NO_SERVER: TGDBusError = 11;
  G_DBUS_ERROR_TIMEOUT: TGDBusError = 12;
  G_DBUS_ERROR_NO_NETWORK: TGDBusError = 13;
  G_DBUS_ERROR_ADDRESS_IN_USE: TGDBusError = 14;
  G_DBUS_ERROR_DISCONNECTED: TGDBusError = 15;
  G_DBUS_ERROR_INVALID_ARGS: TGDBusError = 16;
  G_DBUS_ERROR_FILE_NOT_FOUND: TGDBusError = 17;
  G_DBUS_ERROR_FILE_EXISTS: TGDBusError = 18;
  G_DBUS_ERROR_UNKNOWN_METHOD: TGDBusError = 19;
  G_DBUS_ERROR_TIMED_OUT: TGDBusError = 20;
  G_DBUS_ERROR_MATCH_RULE_NOT_FOUND: TGDBusError = 21;
  G_DBUS_ERROR_MATCH_RULE_INVALID: TGDBusError = 22;
  G_DBUS_ERROR_SPAWN_EXEC_FAILED: TGDBusError = 23;
  G_DBUS_ERROR_SPAWN_FORK_FAILED: TGDBusError = 24;
  G_DBUS_ERROR_SPAWN_CHILD_EXITED: TGDBusError = 25;
  G_DBUS_ERROR_SPAWN_CHILD_SIGNALED: TGDBusError = 26;
  G_DBUS_ERROR_SPAWN_FAILED: TGDBusError = 27;
  G_DBUS_ERROR_SPAWN_SETUP_FAILED: TGDBusError = 28;
  G_DBUS_ERROR_SPAWN_CONFIG_INVALID: TGDBusError = 29;
  G_DBUS_ERROR_SPAWN_SERVICE_INVALID: TGDBusError = 30;
  G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND: TGDBusError = 31;
  G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID: TGDBusError = 32;
  G_DBUS_ERROR_SPAWN_FILE_INVALID: TGDBusError = 33;
  G_DBUS_ERROR_SPAWN_NO_MEMORY: TGDBusError = 34;
  G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN: TGDBusError = 35;
  G_DBUS_ERROR_INVALID_SIGNATURE: TGDBusError = 36;
  G_DBUS_ERROR_INVALID_FILE_CONTENT: TGDBusError = 37;
  G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN: TGDBusError = 38;
  G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN: TGDBusError = 39;
  G_DBUS_ERROR_OBJECT_PATH_IN_USE: TGDBusError = 40;

type
  TGDBusPropertyInfoFlags = Integer;
const
  { GDBusPropertyInfoFlags }
  G_DBUS_PROPERTY_INFO_FLAGS_NONE: TGDBusPropertyInfoFlags = 0;
  G_DBUS_PROPERTY_INFO_FLAGS_READABLE: TGDBusPropertyInfoFlags = 1;
  G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE: TGDBusPropertyInfoFlags = 2;

type
  TGDBusInterfaceSkeletonFlags = Integer;
const
  { GDBusInterfaceSkeletonFlags }
  G_DBUS_INTERFACE_SKELETON_FLAGS_NONE: TGDBusInterfaceSkeletonFlags = 0;
  G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD: TGDBusInterfaceSkeletonFlags = 1;

type
  TGDBusObjectManagerClientFlags = Integer;
const
  { GDBusObjectManagerClientFlags }
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE: TGDBusObjectManagerClientFlags = 0;
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START: TGDBusObjectManagerClientFlags = 1;

type
  TGDBusProxyFlags = Integer;
const
  { GDBusProxyFlags }
  G_DBUS_PROXY_FLAGS_NONE: TGDBusProxyFlags = 0;
  G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES: TGDBusProxyFlags = 1;
  G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS: TGDBusProxyFlags = 2;
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START: TGDBusProxyFlags = 4;
  G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES: TGDBusProxyFlags = 8;

type
  TGDBusServerFlags = Integer;
const
  { GDBusServerFlags }
  G_DBUS_SERVER_FLAGS_NONE: TGDBusServerFlags = 0;
  G_DBUS_SERVER_FLAGS_RUN_IN_THREAD: TGDBusServerFlags = 1;
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: TGDBusServerFlags = 2;

type
  TGDataStreamByteOrder = Integer;
const
  { GDataStreamByteOrder }
  G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN: TGDataStreamByteOrder = 0;
  G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN: TGDataStreamByteOrder = 1;
  G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN: TGDataStreamByteOrder = 2;

type
  TGDataStreamNewlineType = Integer;
const
  { GDataStreamNewlineType }
  G_DATA_STREAM_NEWLINE_TYPE_LF: TGDataStreamNewlineType = 0;
  G_DATA_STREAM_NEWLINE_TYPE_CR: TGDataStreamNewlineType = 1;
  G_DATA_STREAM_NEWLINE_TYPE_CR_LF: TGDataStreamNewlineType = 2;
  G_DATA_STREAM_NEWLINE_TYPE_ANY: TGDataStreamNewlineType = 3;

type
  TGMountOperationResult = Integer;
const
  { GMountOperationResult }
  G_MOUNT_OPERATION_HANDLED: TGMountOperationResult = 0;
  G_MOUNT_OPERATION_ABORTED: TGMountOperationResult = 1;
  G_MOUNT_OPERATION_UNHANDLED: TGMountOperationResult = 2;

type
  TGPasswordSave = Integer;
const
  { GPasswordSave }
  G_PASSWORD_SAVE_NEVER: TGPasswordSave = 0;
  G_PASSWORD_SAVE_FOR_SESSION: TGPasswordSave = 1;
  G_PASSWORD_SAVE_PERMANENTLY: TGPasswordSave = 2;

type
  TGDriveStartStopType = Integer;
const
  { GDriveStartStopType }
  G_DRIVE_START_STOP_TYPE_UNKNOWN: TGDriveStartStopType = 0;
  G_DRIVE_START_STOP_TYPE_SHUTDOWN: TGDriveStartStopType = 1;
  G_DRIVE_START_STOP_TYPE_NETWORK: TGDriveStartStopType = 2;
  G_DRIVE_START_STOP_TYPE_MULTIDISK: TGDriveStartStopType = 3;
  G_DRIVE_START_STOP_TYPE_PASSWORD: TGDriveStartStopType = 4;

type
  TGEmblemOrigin = Integer;
const
  { GEmblemOrigin }
  G_EMBLEM_ORIGIN_UNKNOWN: TGEmblemOrigin = 0;
  G_EMBLEM_ORIGIN_DEVICE: TGEmblemOrigin = 1;
  G_EMBLEM_ORIGIN_LIVEMETADATA: TGEmblemOrigin = 2;
  G_EMBLEM_ORIGIN_TAG: TGEmblemOrigin = 3;

type
  TGFileMonitorEvent = Integer;
const
  { GFileMonitorEvent }
  G_FILE_MONITOR_EVENT_CHANGED: TGFileMonitorEvent = 0;
  G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT: TGFileMonitorEvent = 1;
  G_FILE_MONITOR_EVENT_DELETED: TGFileMonitorEvent = 2;
  G_FILE_MONITOR_EVENT_CREATED: TGFileMonitorEvent = 3;
  G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED: TGFileMonitorEvent = 4;
  G_FILE_MONITOR_EVENT_PRE_UNMOUNT: TGFileMonitorEvent = 5;
  G_FILE_MONITOR_EVENT_UNMOUNTED: TGFileMonitorEvent = 6;
  G_FILE_MONITOR_EVENT_MOVED: TGFileMonitorEvent = 7;

type
  TGFileAttributeStatus = Integer;
const
  { GFileAttributeStatus }
  G_FILE_ATTRIBUTE_STATUS_UNSET: TGFileAttributeStatus = 0;
  G_FILE_ATTRIBUTE_STATUS_SET: TGFileAttributeStatus = 1;
  G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING: TGFileAttributeStatus = 2;

type
  TGFileType = Integer;
const
  { GFileType }
  G_FILE_TYPE_UNKNOWN: TGFileType = 0;
  G_FILE_TYPE_REGULAR: TGFileType = 1;
  G_FILE_TYPE_DIRECTORY: TGFileType = 2;
  G_FILE_TYPE_SYMBOLIC_LINK: TGFileType = 3;
  G_FILE_TYPE_SPECIAL: TGFileType = 4;
  G_FILE_TYPE_SHORTCUT: TGFileType = 5;
  G_FILE_TYPE_MOUNTABLE: TGFileType = 6;

type
  TGFileAttributeInfoFlags = Integer;
const
  { GFileAttributeInfoFlags }
  G_FILE_ATTRIBUTE_INFO_NONE: TGFileAttributeInfoFlags = 0;
  G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE: TGFileAttributeInfoFlags = 1;
  G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED: TGFileAttributeInfoFlags = 2;

type
  TGFilesystemPreviewType = Integer;
const
  { GFilesystemPreviewType }
  G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS: TGFilesystemPreviewType = 0;
  G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL: TGFilesystemPreviewType = 1;
  G_FILESYSTEM_PREVIEW_TYPE_NEVER: TGFilesystemPreviewType = 2;

type
  TGIOErrorEnum = Integer;
const
  { GIOErrorEnum }
  G_IO_ERROR_FAILED: TGIOErrorEnum = 0;
  G_IO_ERROR_NOT_FOUND: TGIOErrorEnum = 1;
  G_IO_ERROR_EXISTS: TGIOErrorEnum = 2;
  G_IO_ERROR_IS_DIRECTORY: TGIOErrorEnum = 3;
  G_IO_ERROR_NOT_DIRECTORY: TGIOErrorEnum = 4;
  G_IO_ERROR_NOT_EMPTY: TGIOErrorEnum = 5;
  G_IO_ERROR_NOT_REGULAR_FILE: TGIOErrorEnum = 6;
  G_IO_ERROR_NOT_SYMBOLIC_LINK: TGIOErrorEnum = 7;
  G_IO_ERROR_NOT_MOUNTABLE_FILE: TGIOErrorEnum = 8;
  G_IO_ERROR_FILENAME_TOO_LONG: TGIOErrorEnum = 9;
  G_IO_ERROR_INVALID_FILENAME: TGIOErrorEnum = 10;
  G_IO_ERROR_TOO_MANY_LINKS: TGIOErrorEnum = 11;
  G_IO_ERROR_NO_SPACE: TGIOErrorEnum = 12;
  G_IO_ERROR_INVALID_ARGUMENT: TGIOErrorEnum = 13;
  G_IO_ERROR_PERMISSION_DENIED: TGIOErrorEnum = 14;
  G_IO_ERROR_NOT_SUPPORTED: TGIOErrorEnum = 15;
  G_IO_ERROR_NOT_MOUNTED: TGIOErrorEnum = 16;
  G_IO_ERROR_ALREADY_MOUNTED: TGIOErrorEnum = 17;
  G_IO_ERROR_CLOSED: TGIOErrorEnum = 18;
  G_IO_ERROR_CANCELLED: TGIOErrorEnum = 19;
  G_IO_ERROR_PENDING: TGIOErrorEnum = 20;
  G_IO_ERROR_READ_ONLY: TGIOErrorEnum = 21;
  G_IO_ERROR_CANT_CREATE_BACKUP: TGIOErrorEnum = 22;
  G_IO_ERROR_WRONG_ETAG: TGIOErrorEnum = 23;
  G_IO_ERROR_TIMED_OUT: TGIOErrorEnum = 24;
  G_IO_ERROR_WOULD_RECURSE: TGIOErrorEnum = 25;
  G_IO_ERROR_BUSY: TGIOErrorEnum = 26;
  G_IO_ERROR_WOULD_BLOCK: TGIOErrorEnum = 27;
  G_IO_ERROR_HOST_NOT_FOUND: TGIOErrorEnum = 28;
  G_IO_ERROR_WOULD_MERGE: TGIOErrorEnum = 29;
  G_IO_ERROR_FAILED_HANDLED: TGIOErrorEnum = 30;
  G_IO_ERROR_TOO_MANY_OPEN_FILES: TGIOErrorEnum = 31;
  G_IO_ERROR_NOT_INITIALIZED: TGIOErrorEnum = 32;
  G_IO_ERROR_ADDRESS_IN_USE: TGIOErrorEnum = 33;
  G_IO_ERROR_PARTIAL_INPUT: TGIOErrorEnum = 34;
  G_IO_ERROR_INVALID_DATA: TGIOErrorEnum = 35;
  G_IO_ERROR_DBUS_ERROR: TGIOErrorEnum = 36;
  G_IO_ERROR_HOST_UNREACHABLE: TGIOErrorEnum = 37;
  G_IO_ERROR_NETWORK_UNREACHABLE: TGIOErrorEnum = 38;
  G_IO_ERROR_CONNECTION_REFUSED: TGIOErrorEnum = 39;
  G_IO_ERROR_PROXY_FAILED: TGIOErrorEnum = 40;
  G_IO_ERROR_PROXY_AUTH_FAILED: TGIOErrorEnum = 41;
  G_IO_ERROR_PROXY_NEED_AUTH: TGIOErrorEnum = 42;
  G_IO_ERROR_PROXY_NOT_ALLOWED: TGIOErrorEnum = 43;
  G_IO_ERROR_BROKEN_PIPE: TGIOErrorEnum = 44;

type
  TGIOModuleScopeFlags = Integer;
const
  { GIOModuleScopeFlags }
  G_IO_MODULE_SCOPE_NONE: TGIOModuleScopeFlags = 0;
  G_IO_MODULE_SCOPE_BLOCK_DUPLICATES: TGIOModuleScopeFlags = 1;

type
  TGSocketFamily = Integer;
const
  { GSocketFamily }
  G_SOCKET_FAMILY_INVALID: TGSocketFamily = 0;
  G_SOCKET_FAMILY_UNIX: TGSocketFamily = 1;
  G_SOCKET_FAMILY_IPV4: TGSocketFamily = 2;
  G_SOCKET_FAMILY_IPV6: TGSocketFamily = 10;

type
  TGResolverRecordType = Integer;
const
  { GResolverRecordType }
  G_RESOLVER_RECORD_SRV: TGResolverRecordType = 1;
  G_RESOLVER_RECORD_MX: TGResolverRecordType = 2;
  G_RESOLVER_RECORD_TXT: TGResolverRecordType = 3;
  G_RESOLVER_RECORD_SOA: TGResolverRecordType = 4;
  G_RESOLVER_RECORD_NS: TGResolverRecordType = 5;

type
  TGResolverError = Integer;
const
  { GResolverError }
  G_RESOLVER_ERROR_NOT_FOUND: TGResolverError = 0;
  G_RESOLVER_ERROR_TEMPORARY_FAILURE: TGResolverError = 1;
  G_RESOLVER_ERROR_INTERNAL: TGResolverError = 2;

type
  TGResourceLookupFlags = Integer;
const
  { GResourceLookupFlags }
  G_RESOURCE_LOOKUP_FLAGS_NONE: TGResourceLookupFlags = 0;

type
  TGResourceError = Integer;
const
  { GResourceError }
  G_RESOURCE_ERROR_NOT_FOUND: TGResourceError = 0;
  G_RESOURCE_ERROR_INTERNAL: TGResourceError = 1;

type
  TGResourceFlags = Integer;
const
  { GResourceFlags }
  G_RESOURCE_FLAGS_NONE: TGResourceFlags = 0;
  G_RESOURCE_FLAGS_COMPRESSED: TGResourceFlags = 1;

type
  TGSettingsBindFlags = Integer;
const
  { GSettingsBindFlags }
  G_SETTINGS_BIND_DEFAULT: TGSettingsBindFlags = 0;
  G_SETTINGS_BIND_GET: TGSettingsBindFlags = 1;
  G_SETTINGS_BIND_SET: TGSettingsBindFlags = 2;
  G_SETTINGS_BIND_NO_SENSITIVITY: TGSettingsBindFlags = 4;
  G_SETTINGS_BIND_GET_NO_CHANGES: TGSettingsBindFlags = 8;
  G_SETTINGS_BIND_INVERT_BOOLEAN: TGSettingsBindFlags = 16;

type
  TGSocketType = Integer;
const
  { GSocketType }
  G_SOCKET_TYPE_INVALID: TGSocketType = 0;
  G_SOCKET_TYPE_STREAM: TGSocketType = 1;
  G_SOCKET_TYPE_DATAGRAM: TGSocketType = 2;
  G_SOCKET_TYPE_SEQPACKET: TGSocketType = 3;

type
  TGSocketProtocol = Integer;
const
  { GSocketProtocol }
  G_SOCKET_PROTOCOL_UNKNOWN: TGSocketProtocol = -1;
  G_SOCKET_PROTOCOL_DEFAULT: TGSocketProtocol = 0;
  G_SOCKET_PROTOCOL_TCP: TGSocketProtocol = 6;
  G_SOCKET_PROTOCOL_UDP: TGSocketProtocol = 17;
  G_SOCKET_PROTOCOL_SCTP: TGSocketProtocol = 132;

type
  TGTlsCertificateFlags = Integer;
const
  { GTlsCertificateFlags }
  G_TLS_CERTIFICATE_UNKNOWN_CA: TGTlsCertificateFlags = 1;
  G_TLS_CERTIFICATE_BAD_IDENTITY: TGTlsCertificateFlags = 2;
  G_TLS_CERTIFICATE_NOT_ACTIVATED: TGTlsCertificateFlags = 4;
  G_TLS_CERTIFICATE_EXPIRED: TGTlsCertificateFlags = 8;
  G_TLS_CERTIFICATE_REVOKED: TGTlsCertificateFlags = 16;
  G_TLS_CERTIFICATE_INSECURE: TGTlsCertificateFlags = 32;
  G_TLS_CERTIFICATE_GENERIC_ERROR: TGTlsCertificateFlags = 64;
  G_TLS_CERTIFICATE_VALIDATE_ALL: TGTlsCertificateFlags = 127;

type
  TGSocketClientEvent = Integer;
const
  { GSocketClientEvent }
  G_SOCKET_CLIENT_RESOLVING: TGSocketClientEvent = 0;
  G_SOCKET_CLIENT_RESOLVED: TGSocketClientEvent = 1;
  G_SOCKET_CLIENT_CONNECTING: TGSocketClientEvent = 2;
  G_SOCKET_CLIENT_CONNECTED: TGSocketClientEvent = 3;
  G_SOCKET_CLIENT_PROXY_NEGOTIATING: TGSocketClientEvent = 4;
  G_SOCKET_CLIENT_PROXY_NEGOTIATED: TGSocketClientEvent = 5;
  G_SOCKET_CLIENT_TLS_HANDSHAKING: TGSocketClientEvent = 6;
  G_SOCKET_CLIENT_TLS_HANDSHAKED: TGSocketClientEvent = 7;
  G_SOCKET_CLIENT_COMPLETE: TGSocketClientEvent = 8;

type
  TGSocketMsgFlags = Integer;
const
  { GSocketMsgFlags }
  G_SOCKET_MSG_NONE: TGSocketMsgFlags = 0;
  G_SOCKET_MSG_OOB: TGSocketMsgFlags = 1;
  G_SOCKET_MSG_PEEK: TGSocketMsgFlags = 2;
  G_SOCKET_MSG_DONTROUTE: TGSocketMsgFlags = 4;

type
  TGTestDBusFlags = Integer;
const
  { GTestDBusFlags }
  G_TEST_DBUS_NONE: TGTestDBusFlags = 0;

type
  TGTlsAuthenticationMode = Integer;
const
  { GTlsAuthenticationMode }
  G_TLS_AUTHENTICATION_NONE: TGTlsAuthenticationMode = 0;
  G_TLS_AUTHENTICATION_REQUESTED: TGTlsAuthenticationMode = 1;
  G_TLS_AUTHENTICATION_REQUIRED: TGTlsAuthenticationMode = 2;

type
  TGTlsDatabaseLookupFlags = Integer;
const
  { GTlsDatabaseLookupFlags }
  G_TLS_DATABASE_LOOKUP_NONE: TGTlsDatabaseLookupFlags = 0;
  G_TLS_DATABASE_LOOKUP_KEYPAIR: TGTlsDatabaseLookupFlags = 1;

type
  TGTlsDatabaseVerifyFlags = Integer;
const
  { GTlsDatabaseVerifyFlags }
  G_TLS_DATABASE_VERIFY_NONE: TGTlsDatabaseVerifyFlags = 0;

type
  TGTlsRehandshakeMode = Integer;
const
  { GTlsRehandshakeMode }
  G_TLS_REHANDSHAKE_NEVER: TGTlsRehandshakeMode = 0;
  G_TLS_REHANDSHAKE_SAFELY: TGTlsRehandshakeMode = 1;
  G_TLS_REHANDSHAKE_UNSAFELY: TGTlsRehandshakeMode = 2;

type
  TGTlsError = Integer;
const
  { GTlsError }
  G_TLS_ERROR_UNAVAILABLE: TGTlsError = 0;
  G_TLS_ERROR_MISC: TGTlsError = 1;
  G_TLS_ERROR_BAD_CERTIFICATE: TGTlsError = 2;
  G_TLS_ERROR_NOT_TLS: TGTlsError = 3;
  G_TLS_ERROR_HANDSHAKE: TGTlsError = 4;
  G_TLS_ERROR_CERTIFICATE_REQUIRED: TGTlsError = 5;
  G_TLS_ERROR_EOF: TGTlsError = 6;

type
  TGTlsInteractionResult = Integer;
const
  { GTlsInteractionResult }
  G_TLS_INTERACTION_UNHANDLED: TGTlsInteractionResult = 0;
  G_TLS_INTERACTION_HANDLED: TGTlsInteractionResult = 1;
  G_TLS_INTERACTION_FAILED: TGTlsInteractionResult = 2;

type
  TGTlsPasswordFlags = Integer;
const
  { GTlsPasswordFlags }
  G_TLS_PASSWORD_NONE: TGTlsPasswordFlags = 0;
  G_TLS_PASSWORD_RETRY: TGTlsPasswordFlags = 2;
  G_TLS_PASSWORD_MANY_TRIES: TGTlsPasswordFlags = 4;
  G_TLS_PASSWORD_FINAL_TRY: TGTlsPasswordFlags = 8;

type
  TGUnixSocketAddressType = Integer;
const
  { GUnixSocketAddressType }
  G_UNIX_SOCKET_ADDRESS_INVALID: TGUnixSocketAddressType = 0;
  G_UNIX_SOCKET_ADDRESS_ANONYMOUS: TGUnixSocketAddressType = 1;
  G_UNIX_SOCKET_ADDRESS_PATH: TGUnixSocketAddressType = 2;
  G_UNIX_SOCKET_ADDRESS_ABSTRACT: TGUnixSocketAddressType = 3;
  G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED: TGUnixSocketAddressType = 4;

type
  TGZlibCompressorFormat = Integer;
const
  { GZlibCompressorFormat }
  G_ZLIB_COMPRESSOR_FORMAT_ZLIB: TGZlibCompressorFormat = 0;
  G_ZLIB_COMPRESSOR_FORMAT_GZIP: TGZlibCompressorFormat = 1;
  G_ZLIB_COMPRESSOR_FORMAT_RAW: TGZlibCompressorFormat = 2;
type

  PPGAction = ^PGAction;
  PGAction = ^TGAction;
  TGAction = object
  end;

  PPGSimpleAction = ^PGSimpleAction;
  PGSimpleAction = ^TGSimpleAction;
  TGSimpleAction = object(TGObject)
  end;

  PPGActionEntry = ^PGActionEntry;
  PGActionEntry = ^TGActionEntry;

  TGActionEntry = record
    name: Pgchar;
    activate: procedure(action: PGSimpleAction; parameter: PGVariant; user_data: gpointer); cdecl;
    parameter_type: Pgchar;
    state: Pgchar;
    change_state: procedure(action: PGSimpleAction; value: PGVariant; user_data: gpointer); cdecl;
    padding: array [0..2] of gsize;
  end;



  PPGActionGroup = ^PGActionGroup;
  PGActionGroup = ^TGActionGroup;
  TGActionGroup = object
    action_added1: procedure(action_name: Pgchar); cdecl;
    action_enabled_changed1: procedure(action_name: Pgchar; enabled: gboolean); cdecl;
    action_removed1: procedure(action_name: Pgchar); cdecl;
    action_state_changed1: procedure(action_name: Pgchar; value: TGVariant); cdecl;
  end;

  PPGActionGroupInterface = ^PGActionGroupInterface;
  PGActionGroupInterface = ^TGActionGroupInterface;
  TGActionGroupInterface = object
    g_iface: TGTypeInterface;
    has_action: function(action_group: PGActionGroup; action_name: Pgchar): gboolean; cdecl;
    list_actions: function(action_group: PGActionGroup): PPgchar; cdecl;
    get_action_enabled: function(action_group: PGActionGroup; action_name: Pgchar): gboolean; cdecl;
    get_action_parameter_type: function(action_group: PGActionGroup; action_name: Pgchar): PGVariantType; cdecl;
    get_action_state_type: function(action_group: PGActionGroup; action_name: Pgchar): PGVariantType; cdecl;
    get_action_state_hint: function(action_group: PGActionGroup; action_name: Pgchar): PGVariant; cdecl;
    get_action_state: function(action_group: PGActionGroup; action_name: Pgchar): PGVariant; cdecl;
    change_action_state: procedure(action_group: PGActionGroup; action_name: Pgchar; value: PGVariant); cdecl;
    activate_action: procedure(action_group: PGActionGroup; action_name: Pgchar; parameter: PGVariant); cdecl;
    action_added: procedure(action_group: PGActionGroup; action_name: Pgchar); cdecl;
    action_removed: procedure(action_group: PGActionGroup; action_name: Pgchar); cdecl;
    action_enabled_changed: procedure(action_group: PGActionGroup; action_name: Pgchar; enabled: gboolean); cdecl;
    action_state_changed: procedure(action_group: PGActionGroup; action_name: Pgchar; state: PGVariant); cdecl;
    query_action: function(action_group: PGActionGroup; action_name: Pgchar; enabled: Pgboolean; parameter_type: PPGVariantType; state_type: PPGVariantType; state_hint: PPGVariant; state: PPGVariant): gboolean; cdecl;
  end;

  PPGActionInterface = ^PGActionInterface;
  PGActionInterface = ^TGActionInterface;
  TGActionInterface = object
    g_iface: TGTypeInterface;
    get_name: function(action: PGAction): Pgchar; cdecl;
    get_parameter_type: function(action: PGAction): PGVariantType; cdecl;
    get_state_type: function(action: PGAction): PGVariantType; cdecl;
    get_state_hint: function(action: PGAction): PGVariant; cdecl;
    get_enabled: function(action: PGAction): gboolean; cdecl;
    get_state: function(action: PGAction): PGVariant; cdecl;
    change_state: procedure(action: PGAction; value: PGVariant); cdecl;
    activate: procedure(action: PGAction; parameter: PGVariant); cdecl;
  end;

  PPGActionMap = ^PGActionMap;
  PGActionMap = ^TGActionMap;
  TGActionMap = object
  end;

  PPGActionMapInterface = ^PGActionMapInterface;
  PGActionMapInterface = ^TGActionMapInterface;
  TGActionMapInterface = object
    g_iface: TGTypeInterface;
    lookup_action: function(action_map: PGActionMap; action_name: Pgchar): PGAction; cdecl;
    add_action: procedure(action_map: PGActionMap; action: PGAction); cdecl;
    remove_action: procedure(action_map: PGActionMap; action_name: Pgchar); cdecl;
  end;

  PPGAppInfo = ^PGAppInfo;
  PGAppInfo = ^TGAppInfo;

  PPGAppInfoCreateFlags = ^PGAppInfoCreateFlags;
  PGAppInfoCreateFlags = ^TGAppInfoCreateFlags;

  PPGAppLaunchContext = ^PGAppLaunchContext;
  PGAppLaunchContext = ^TGAppLaunchContext;

  PPGIcon = ^PGIcon;
  PGIcon = ^TGIcon;
  TGAppInfo = object
  end;

  PPGAppLaunchContextPrivate = ^PGAppLaunchContextPrivate;
  PGAppLaunchContextPrivate = ^TGAppLaunchContextPrivate;
  TGAppLaunchContext = object(TGObject)
    priv: PGAppLaunchContextPrivate;
  end;
  TGIcon = object
  end;

  PPGAppInfoIface = ^PGAppInfoIface;
  PGAppInfoIface = ^TGAppInfoIface;
  TGAppInfoIface = object
    g_iface: TGTypeInterface;
    dup: function(appinfo: PGAppInfo): PGAppInfo; cdecl;
    equal: function(appinfo1: PGAppInfo; appinfo2: PGAppInfo): gboolean; cdecl;
    get_id: function(appinfo: PGAppInfo): Pgchar; cdecl;
    get_name: function(appinfo: PGAppInfo): Pgchar; cdecl;
    get_description: function(appinfo: PGAppInfo): Pgchar; cdecl;
    get_executable: function(appinfo: PGAppInfo): Pgchar; cdecl;
    get_icon: function(appinfo: PGAppInfo): PGIcon; cdecl;
    launch: function(appinfo: PGAppInfo; files: PGList; launch_context: PGAppLaunchContext; error: PPGError): gboolean; cdecl;
    supports_uris: function(appinfo: PGAppInfo): gboolean; cdecl;
    supports_files: function(appinfo: PGAppInfo): gboolean; cdecl;
    launch_uris: function(appinfo: PGAppInfo; uris: PGList; launch_context: PGAppLaunchContext; error: PPGError): gboolean; cdecl;
    should_show: function(appinfo: PGAppInfo): gboolean; cdecl;
    set_as_default_for_type: function(appinfo: PGAppInfo; content_type: Pgchar; error: PPGError): gboolean; cdecl;
    set_as_default_for_extension: function(appinfo: PGAppInfo; extension: Pgchar; error: PPGError): gboolean; cdecl;
    add_supports_type: function(appinfo: PGAppInfo; content_type: Pgchar; error: PPGError): gboolean; cdecl;
    can_remove_supports_type: function(appinfo: PGAppInfo): gboolean; cdecl;
    remove_supports_type: function(appinfo: PGAppInfo; content_type: Pgchar; error: PPGError): gboolean; cdecl;
    can_delete: function(appinfo: PGAppInfo): gboolean; cdecl;
    do_delete: function(appinfo: PGAppInfo): gboolean; cdecl;
    get_commandline: function(appinfo: PGAppInfo): Pgchar; cdecl;
    get_display_name: function(appinfo: PGAppInfo): Pgchar; cdecl;
    set_as_last_used_for_type: function(appinfo: PGAppInfo; content_type: Pgchar; error: PPGError): gboolean; cdecl;
    get_supported_types: function(appinfo: PGAppInfo): PPgchar; cdecl;
  end;

  TGAppLaunchContextPrivate = record
  end;



  PPGAppLaunchContextClass = ^PGAppLaunchContextClass;
  PGAppLaunchContextClass = ^TGAppLaunchContextClass;
  TGAppLaunchContextClass = object
    parent_class: TGObjectClass;
    get_display: function(context: PGAppLaunchContext; info: PGAppInfo; files: PGList): Pgchar; cdecl;
    get_startup_notify_id: function(context: PGAppLaunchContext; info: PGAppInfo; files: PGList): Pgchar; cdecl;
    launch_failed: procedure(context: PGAppLaunchContext; startup_notify_id: Pgchar); cdecl;
    launched: procedure(context: PGAppLaunchContext; info: PGAppInfo; platform_data: PGVariant); cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
  end;

  PPGApplication = ^PGApplication;
  PGApplication = ^TGApplication;

  PPGApplicationFlags = ^PGApplicationFlags;
  PGApplicationFlags = ^TGApplicationFlags;

  PPGDBusConnection = ^PGDBusConnection;
  PGDBusConnection = ^TGDBusConnection;

  PPGFile = ^PGFile;
  PGFile = ^TGFile;

  PPGCancellable = ^PGCancellable;
  PGCancellable = ^TGCancellable;

  PPGApplicationPrivate = ^PGApplicationPrivate;
  PGApplicationPrivate = ^TGApplicationPrivate;
  TGApplication = object(TGObject)
    priv: PGApplicationPrivate;
  end;

  PPGApplicationCommandLine = ^PGApplicationCommandLine;
  PGApplicationCommandLine = ^TGApplicationCommandLine;

  PPGInputStream = ^PGInputStream;
  PGInputStream = ^TGInputStream;

  PPGApplicationCommandLinePrivate = ^PGApplicationCommandLinePrivate;
  PGApplicationCommandLinePrivate = ^TGApplicationCommandLinePrivate;
  TGApplicationCommandLine = object(TGObject)
    priv: PGApplicationCommandLinePrivate;
  end;

  PPGAsyncResult = ^PGAsyncResult;
  PGAsyncResult = ^TGAsyncResult;

  PPGDBusConnectionFlags = ^PGDBusConnectionFlags;
  PGDBusConnectionFlags = ^TGDBusConnectionFlags;

  PPGDBusAuthObserver = ^PGDBusAuthObserver;
  PGDBusAuthObserver = ^TGDBusAuthObserver;

  PPGIOStream = ^PGIOStream;
  PGIOStream = ^TGIOStream;

  PPGAsyncReadyCallback = ^PGAsyncReadyCallback;
  PGAsyncReadyCallback = ^TGAsyncReadyCallback;
  TGAsyncReadyCallback = procedure(source_object: PGObject; res: PGAsyncResult; user_data: gpointer); cdecl;

  PPGDBusMessageFilterFunction = ^PGDBusMessageFilterFunction;
  PGDBusMessageFilterFunction = ^TGDBusMessageFilterFunction;

  PPGDBusMessage = ^PGDBusMessage;
  PGDBusMessage = ^TGDBusMessage;
  TGDBusMessageFilterFunction = function(connection: PGDBusConnection; message: PGDBusMessage; incoming: gboolean; user_data: gpointer): PGDBusMessage; cdecl;

  PPGDBusCallFlags = ^PGDBusCallFlags;
  PGDBusCallFlags = ^TGDBusCallFlags;

  PPGUnixFDList = ^PGUnixFDList;
  PGUnixFDList = ^TGUnixFDList;

  PPGMenuModel = ^PGMenuModel;
  PGMenuModel = ^TGMenuModel;

  PPGDBusCapabilityFlags = ^PGDBusCapabilityFlags;
  PGDBusCapabilityFlags = ^TGDBusCapabilityFlags;

  PPGCredentials = ^PGCredentials;
  PGCredentials = ^TGCredentials;

  PPGDBusInterfaceInfo = ^PGDBusInterfaceInfo;
  PGDBusInterfaceInfo = ^TGDBusInterfaceInfo;

  PPGDBusInterfaceVTable = ^PGDBusInterfaceVTable;
  PGDBusInterfaceVTable = ^TGDBusInterfaceVTable;

  PPGDBusSubtreeVTable = ^PGDBusSubtreeVTable;
  PGDBusSubtreeVTable = ^TGDBusSubtreeVTable;

  PPGDBusSubtreeFlags = ^PGDBusSubtreeFlags;
  PGDBusSubtreeFlags = ^TGDBusSubtreeFlags;

  PPGDBusSendMessageFlags = ^PGDBusSendMessageFlags;
  PGDBusSendMessageFlags = ^TGDBusSendMessageFlags;

  PPGDBusSignalFlags = ^PGDBusSignalFlags;
  PGDBusSignalFlags = ^TGDBusSignalFlags;

  PPGDBusSignalCallback = ^PGDBusSignalCallback;
  PGDBusSignalCallback = ^TGDBusSignalCallback;
  TGDBusSignalCallback = procedure(connection: PGDBusConnection; sender_name: Pgchar; object_path: Pgchar; interface_name: Pgchar; signal_name: Pgchar; parameters: PGVariant; user_data: gpointer); cdecl;
  TGDBusConnection = object(TGObject)
  end;

  PPGFileIOStream = ^PGFileIOStream;
  PGFileIOStream = ^TGFileIOStream;

  PPGFileOutputStream = ^PGFileOutputStream;
  PGFileOutputStream = ^TGFileOutputStream;

  PPGFileCreateFlags = ^PGFileCreateFlags;
  PGFileCreateFlags = ^TGFileCreateFlags;

  PPGFileCopyFlags = ^PGFileCopyFlags;
  PGFileCopyFlags = ^TGFileCopyFlags;

  PPGFileProgressCallback = ^PGFileProgressCallback;
  PGFileProgressCallback = ^TGFileProgressCallback;
  TGFileProgressCallback = procedure(current_num_bytes: gint64; total_num_bytes: gint64; user_data: gpointer); cdecl;

  PPGMountUnmountFlags = ^PGMountUnmountFlags;
  PGMountUnmountFlags = ^TGMountUnmountFlags;

  PPGMountOperation = ^PGMountOperation;
  PGMountOperation = ^TGMountOperation;

  PPGFileEnumerator = ^PGFileEnumerator;
  PGFileEnumerator = ^TGFileEnumerator;

  PPGFileQueryInfoFlags = ^PGFileQueryInfoFlags;
  PGFileQueryInfoFlags = ^TGFileQueryInfoFlags;

  PPGMount = ^PGMount;
  PGMount = ^TGMount;

  PPGFileReadMoreCallback = ^PGFileReadMoreCallback;
  PGFileReadMoreCallback = ^TGFileReadMoreCallback;
  TGFileReadMoreCallback = function(file_contents: Pgchar; file_size: gint64; callback_data: gpointer): gboolean; cdecl;

  PPGFileMonitor = ^PGFileMonitor;
  PGFileMonitor = ^TGFileMonitor;

  PPGFileMonitorFlags = ^PGFileMonitorFlags;
  PGFileMonitorFlags = ^TGFileMonitorFlags;

  PPGMountMountFlags = ^PGMountMountFlags;
  PGMountMountFlags = ^TGMountMountFlags;

  PPGFileType = ^PGFileType;
  PGFileType = ^TGFileType;

  PPGFileInfo = ^PGFileInfo;
  PGFileInfo = ^TGFileInfo;

  PPGFileAttributeInfoList = ^PGFileAttributeInfoList;
  PGFileAttributeInfoList = ^TGFileAttributeInfoList;

  PPGFileInputStream = ^PGFileInputStream;
  PGFileInputStream = ^TGFileInputStream;

  PPGFileAttributeType = ^PGFileAttributeType;
  PGFileAttributeType = ^TGFileAttributeType;

  PPGDriveStartFlags = ^PGDriveStartFlags;
  PGDriveStartFlags = ^TGDriveStartFlags;
  TGFile = object
  end;

  PPGCancellablePrivate = ^PGCancellablePrivate;
  PGCancellablePrivate = ^TGCancellablePrivate;
  TGCancellable = object(TGObject)
    priv: PGCancellablePrivate;
  end;

  TGApplicationPrivate = record
  end;



  PPGApplicationClass = ^PGApplicationClass;
  PGApplicationClass = ^TGApplicationClass;
  TGApplicationClass = object
    parent_class: TGObjectClass;
    startup: procedure(application: PGApplication); cdecl;
    activate: procedure(application: PGApplication); cdecl;
    open: procedure(application: PGApplication; files: PPGFile; n_files: gint; hint: Pgchar); cdecl;
    command_line: function(application: PGApplication; command_line: PGApplicationCommandLine): gint; cdecl;
    local_command_line: function(application: PGApplication; arguments: PPPgchar; exit_status: Pgint): gboolean; cdecl;
    before_emit: procedure(application: PGApplication; platform_data: PGVariant); cdecl;
    after_emit: procedure(application: PGApplication; platform_data: PGVariant); cdecl;
    add_platform_data: procedure(application: PGApplication; builder: PGVariantBuilder); cdecl;
    quit_mainloop: procedure(application: PGApplication); cdecl;
    run_mainloop: procedure(application: PGApplication); cdecl;
    shutdown: procedure(application: PGApplication); cdecl;
    dbus_register: function(application: PGApplication; connection: PGDBusConnection; object_path: Pgchar; error: PPGError): gboolean; cdecl;
    dbus_unregister: procedure(application: PGApplication; connection: PGDBusConnection; object_path: Pgchar); cdecl;
    padding: array [0..8] of gpointer;
  end;

  PPGInputStreamPrivate = ^PGInputStreamPrivate;
  PGInputStreamPrivate = ^TGInputStreamPrivate;
  TGInputStream = object(TGObject)
    priv: PGInputStreamPrivate;
  end;

  TGApplicationCommandLinePrivate = record
  end;



  PPGApplicationCommandLineClass = ^PGApplicationCommandLineClass;
  PGApplicationCommandLineClass = ^TGApplicationCommandLineClass;
  TGApplicationCommandLineClass = object
    parent_class: TGObjectClass;
    print_literal: procedure(cmdline: PGApplicationCommandLine; message: Pgchar); cdecl;
    printerr_literal: procedure(cmdline: PGApplicationCommandLine; message: Pgchar); cdecl;
    get_stdin: function(cmdline: PGApplicationCommandLine): PGInputStream; cdecl;
    padding: array [0..10] of gpointer;
  end;

  PPGAskPasswordFlags = ^PGAskPasswordFlags;
  PGAskPasswordFlags = ^TGAskPasswordFlags;

  PPGAsyncInitable = ^PGAsyncInitable;
  PGAsyncInitable = ^TGAsyncInitable;
  TGAsyncInitable = object
  end;
  TGAsyncResult = object
  end;

  PPGAsyncInitableIface = ^PGAsyncInitableIface;
  PGAsyncInitableIface = ^TGAsyncInitableIface;
  TGAsyncInitableIface = object
    g_iface: TGTypeInterface;
    init_async: procedure(initable: PGAsyncInitable; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    init_finish: function(initable: PGAsyncInitable; res: PGAsyncResult; error: PPGError): gboolean; cdecl;
  end;

  PPGAsyncResultIface = ^PGAsyncResultIface;
  PGAsyncResultIface = ^TGAsyncResultIface;
  TGAsyncResultIface = object
    g_iface: TGTypeInterface;
    get_user_data: function(res: PGAsyncResult): gpointer; cdecl;
    get_source_object: function(res: PGAsyncResult): PGObject; cdecl;
    is_tagged: function(res: PGAsyncResult; source_tag: gpointer): gboolean; cdecl;
  end;

  PPGSeekable = ^PGSeekable;
  PGSeekable = ^TGSeekable;
  TGSeekable = object
  end;

  PPGBufferedInputStream = ^PGBufferedInputStream;
  PGBufferedInputStream = ^TGBufferedInputStream;

  PPGFilterInputStream = ^PGFilterInputStream;
  PGFilterInputStream = ^TGFilterInputStream;
  TGFilterInputStream = object(TGInputStream)
    base_stream: PGInputStream;
  end;

  PPGBufferedInputStreamPrivate = ^PGBufferedInputStreamPrivate;
  PGBufferedInputStreamPrivate = ^TGBufferedInputStreamPrivate;
  TGBufferedInputStream = object(TGFilterInputStream)
    priv1: PGBufferedInputStreamPrivate;
  end;

  TGBufferedInputStreamPrivate = record
  end;



  PPGFilterInputStreamClass = ^PGFilterInputStreamClass;
  PGFilterInputStreamClass = ^TGFilterInputStreamClass;

  PPGInputStreamClass = ^PGInputStreamClass;
  PGInputStreamClass = ^TGInputStreamClass;
  TGInputStreamClass = object
    parent_class: TGObjectClass;
    read_fn: function(stream: PGInputStream; buffer: Pgpointer; count: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
    skip: function(stream: PGInputStream; count: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
    close_fn: function(stream: PGInputStream; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    read_async: procedure(stream: PGInputStream; buffer: Pguint8; count: gsize; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    read_finish: function(stream: PGInputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
    skip_async: procedure(stream: PGInputStream; count: gsize; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    skip_finish: function(stream: PGInputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
    close_async: procedure(stream: PGInputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    close_finish: function(stream: PGInputStream; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;
  TGFilterInputStreamClass = object
    parent_class: TGInputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
  end;

  PPGBufferedInputStreamClass = ^PGBufferedInputStreamClass;
  PGBufferedInputStreamClass = ^TGBufferedInputStreamClass;
  TGBufferedInputStreamClass = object
    parent_class: TGFilterInputStreamClass;
    fill: function(stream: PGBufferedInputStream; count: gssize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
    fill_async: procedure(stream: PGBufferedInputStream; count: gssize; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    fill_finish: function(stream: PGBufferedInputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGOutputStream = ^PGOutputStream;
  PGOutputStream = ^TGOutputStream;

  PPGOutputStreamSpliceFlags = ^PGOutputStreamSpliceFlags;
  PGOutputStreamSpliceFlags = ^TGOutputStreamSpliceFlags;

  PPGOutputStreamPrivate = ^PGOutputStreamPrivate;
  PGOutputStreamPrivate = ^TGOutputStreamPrivate;
  TGOutputStream = object(TGObject)
    priv: PGOutputStreamPrivate;
  end;

  PPGBufferedOutputStream = ^PGBufferedOutputStream;
  PGBufferedOutputStream = ^TGBufferedOutputStream;

  PPGFilterOutputStream = ^PGFilterOutputStream;
  PGFilterOutputStream = ^TGFilterOutputStream;
  TGFilterOutputStream = object(TGOutputStream)
    base_stream: PGOutputStream;
  end;

  PPGBufferedOutputStreamPrivate = ^PGBufferedOutputStreamPrivate;
  PGBufferedOutputStreamPrivate = ^TGBufferedOutputStreamPrivate;
  TGBufferedOutputStream = object(TGFilterOutputStream)
    priv1: PGBufferedOutputStreamPrivate;
  end;

  TGBufferedOutputStreamPrivate = record
  end;



  PPGFilterOutputStreamClass = ^PGFilterOutputStreamClass;
  PGFilterOutputStreamClass = ^TGFilterOutputStreamClass;

  PPGOutputStreamClass = ^PGOutputStreamClass;
  PGOutputStreamClass = ^TGOutputStreamClass;
  TGOutputStreamClass = object
    parent_class: TGObjectClass;
    write_fn: function(stream: PGOutputStream; buffer: Pguint8; count: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
    splice: function(stream: PGOutputStream; source: PGInputStream; flags: TGOutputStreamSpliceFlags; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
    flush: function(stream: PGOutputStream; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    close_fn: function(stream: PGOutputStream; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    write_async: procedure(stream: PGOutputStream; buffer: Pguint8; count: gsize; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    write_finish: function(stream: PGOutputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
    splice_async: procedure(stream: PGOutputStream; source: PGInputStream; flags: TGOutputStreamSpliceFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    splice_finish: function(stream: PGOutputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
    flush_async: procedure(stream: PGOutputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    flush_finish: function(stream: PGOutputStream; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    close_async: procedure(stream: PGOutputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    close_finish: function(stream: PGOutputStream; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
    _g_reserved7: procedure; cdecl;
    _g_reserved8: procedure; cdecl;
  end;
  TGFilterOutputStreamClass = object
    parent_class: TGOutputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
  end;

  PPGBufferedOutputStreamClass = ^PGBufferedOutputStreamClass;
  PGBufferedOutputStreamClass = ^TGBufferedOutputStreamClass;
  TGBufferedOutputStreamClass = object
    parent_class: TGFilterOutputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
  end;
  TGBusAcquiredCallback = procedure(connection: PGDBusConnection; name: Pgchar; user_data: gpointer); cdecl;
  TGBusNameAcquiredCallback = procedure(connection: PGDBusConnection; name: Pgchar; user_data: gpointer); cdecl;
  TGBusNameAppearedCallback = procedure(connection: PGDBusConnection; name: Pgchar; name_owner: Pgchar; user_data: gpointer); cdecl;
  TGBusNameLostCallback = procedure(connection: PGDBusConnection; name: Pgchar; user_data: gpointer); cdecl;

  PPGBusNameOwnerFlags = ^PGBusNameOwnerFlags;
  PGBusNameOwnerFlags = ^TGBusNameOwnerFlags;
  TGBusNameVanishedCallback = procedure(connection: PGDBusConnection; name: Pgchar; user_data: gpointer); cdecl;

  PPGBusNameWatcherFlags = ^PGBusNameWatcherFlags;
  PGBusNameWatcherFlags = ^TGBusNameWatcherFlags;

  PPGBusType = ^PGBusType;
  PGBusType = ^TGBusType;

  TGCancellablePrivate = record
  end;



  PPGCancellableClass = ^PGCancellableClass;
  PGCancellableClass = ^TGCancellableClass;
  TGCancellableClass = object
    parent_class: TGObjectClass;
    cancelled: procedure(cancellable: PGCancellable); cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;
  TGCancellableSourceFunc = function(cancellable: PGCancellable; user_data: gpointer): gboolean; cdecl;

  PPGConverter = ^PGConverter;
  PGConverter = ^TGConverter;

  PPGConverterResult = ^PGConverterResult;
  PGConverterResult = ^TGConverterResult;

  PPGConverterFlags = ^PGConverterFlags;
  PGConverterFlags = ^TGConverterFlags;
  TGConverter = object
  end;

  PPGInitable = ^PGInitable;
  PGInitable = ^TGInitable;
  TGInitable = object
  end;

  PPGCharsetConverter = ^PGCharsetConverter;
  PGCharsetConverter = ^TGCharsetConverter;
  TGCharsetConverter = object(TGObject)
  end;

  PPGCharsetConverterClass = ^PGCharsetConverterClass;
  PGCharsetConverterClass = ^TGCharsetConverterClass;
  TGCharsetConverterClass = object
    parent_class: TGObjectClass;
  end;

  PPGConverterIface = ^PGConverterIface;
  PGConverterIface = ^TGConverterIface;
  TGConverterIface = object
    g_iface: TGTypeInterface;
    convert: function(converter: PGConverter; inbuf: Pguint8; inbuf_size: gsize; outbuf: Pgpointer; outbuf_size: gsize; flags: TGConverterFlags; bytes_read: Pgsize; bytes_written: Pgsize; error: PPGError): TGConverterResult; cdecl;
    reset: procedure(converter: PGConverter); cdecl;
  end;

  PPGPollableInputStream = ^PGPollableInputStream;
  PGPollableInputStream = ^TGPollableInputStream;
  TGPollableInputStream = object
  end;

  PPGConverterInputStream = ^PGConverterInputStream;
  PGConverterInputStream = ^TGConverterInputStream;

  PPGConverterInputStreamPrivate = ^PGConverterInputStreamPrivate;
  PGConverterInputStreamPrivate = ^TGConverterInputStreamPrivate;
  TGConverterInputStream = object(TGFilterInputStream)
    priv1: PGConverterInputStreamPrivate;
  end;

  TGConverterInputStreamPrivate = record
  end;



  PPGConverterInputStreamClass = ^PGConverterInputStreamClass;
  PGConverterInputStreamClass = ^TGConverterInputStreamClass;
  TGConverterInputStreamClass = object
    parent_class: TGFilterInputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGPollableOutputStream = ^PGPollableOutputStream;
  PGPollableOutputStream = ^TGPollableOutputStream;
  TGPollableOutputStream = object
  end;

  PPGConverterOutputStream = ^PGConverterOutputStream;
  PGConverterOutputStream = ^TGConverterOutputStream;

  PPGConverterOutputStreamPrivate = ^PGConverterOutputStreamPrivate;
  PGConverterOutputStreamPrivate = ^TGConverterOutputStreamPrivate;
  TGConverterOutputStream = object(TGFilterOutputStream)
    priv1: PGConverterOutputStreamPrivate;
  end;

  TGConverterOutputStreamPrivate = record
  end;



  PPGConverterOutputStreamClass = ^PGConverterOutputStreamClass;
  PGConverterOutputStreamClass = ^TGConverterOutputStreamClass;
  TGConverterOutputStreamClass = object
    parent_class: TGFilterOutputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGCredentialsType = ^PGCredentialsType;
  PGCredentialsType = ^TGCredentialsType;
  TGCredentials = object(TGObject)
  end;

  PPGCredentialsClass = ^PGCredentialsClass;
  PGCredentialsClass = ^TGCredentialsClass;
  TGCredentialsClass = object
  end;

  PPGRemoteActionGroup = ^PGRemoteActionGroup;
  PGRemoteActionGroup = ^TGRemoteActionGroup;
  TGRemoteActionGroup = object
  end;

  PPGDBusActionGroup = ^PGDBusActionGroup;
  PGDBusActionGroup = ^TGDBusActionGroup;
  TGDBusActionGroup = object(TGObject)
  end;

  PPGDBusAnnotationInfo = ^PGDBusAnnotationInfo;
  PGDBusAnnotationInfo = ^TGDBusAnnotationInfo;
  TGDBusAnnotationInfo = object
    ref_count: gint;
    key: Pgchar;
    value: Pgchar;
    annotations: PGDBusAnnotationInfo;
  end;

  PPGDBusArgInfo = ^PGDBusArgInfo;
  PGDBusArgInfo = ^TGDBusArgInfo;
  TGDBusArgInfo = object
    ref_count: gint;
    name: Pgchar;
    signature: Pgchar;
    annotations: PGDBusAnnotationInfo;
  end;
  TGDBusAuthObserver = object(TGObject)
  end;

  PPGIOStreamSpliceFlags = ^PGIOStreamSpliceFlags;
  PGIOStreamSpliceFlags = ^TGIOStreamSpliceFlags;

  PPGIOStreamPrivate = ^PGIOStreamPrivate;
  PGIOStreamPrivate = ^TGIOStreamPrivate;
  TGIOStream = object(TGObject)
    priv: PGIOStreamPrivate;
  end;

  PPGUnixFDListPrivate = ^PGUnixFDListPrivate;
  PGUnixFDListPrivate = ^TGUnixFDListPrivate;
  TGUnixFDList = object(TGObject)
    priv: PGUnixFDListPrivate;
  end;

  PPGMenuAttributeIter = ^PGMenuAttributeIter;
  PGMenuAttributeIter = ^TGMenuAttributeIter;

  PPGMenuLinkIter = ^PGMenuLinkIter;
  PGMenuLinkIter = ^TGMenuLinkIter;

  PPGMenuModelPrivate = ^PGMenuModelPrivate;
  PGMenuModelPrivate = ^TGMenuModelPrivate;
  TGMenuModel = object(TGObject)
    priv: PGMenuModelPrivate;
  end;

  PPGDBusMethodInfo = ^PGDBusMethodInfo;
  PGDBusMethodInfo = ^TGDBusMethodInfo;

  PPGDBusPropertyInfo = ^PGDBusPropertyInfo;
  PGDBusPropertyInfo = ^TGDBusPropertyInfo;

  PPGDBusSignalInfo = ^PGDBusSignalInfo;
  PGDBusSignalInfo = ^TGDBusSignalInfo;
  TGDBusInterfaceInfo = object
    ref_count: gint;
    name: Pgchar;
    methods: PGDBusMethodInfo;
    signals: PGDBusSignalInfo;
    properties: PGDBusPropertyInfo;
    annotations: PGDBusAnnotationInfo;
  end;

  PPGDBusInterfaceMethodCallFunc = ^PGDBusInterfaceMethodCallFunc;
  PGDBusInterfaceMethodCallFunc = ^TGDBusInterfaceMethodCallFunc;

  PPGDBusMethodInvocation = ^PGDBusMethodInvocation;
  PGDBusMethodInvocation = ^TGDBusMethodInvocation;
  TGDBusInterfaceMethodCallFunc = procedure(connection: PGDBusConnection; sender: Pgchar; object_path: Pgchar; interface_name: Pgchar; method_name: Pgchar; parameters: PGVariant; invocation: PGDBusMethodInvocation; user_data: gpointer); cdecl;

  PPGDBusInterfaceGetPropertyFunc = ^PGDBusInterfaceGetPropertyFunc;
  PGDBusInterfaceGetPropertyFunc = ^TGDBusInterfaceGetPropertyFunc;
  TGDBusInterfaceGetPropertyFunc = function(connection: PGDBusConnection; sender: Pgchar; object_path: Pgchar; interface_name: Pgchar; property_name: Pgchar; error: PPGError; user_data: gpointer): PGVariant; cdecl;

  PPGDBusInterfaceSetPropertyFunc = ^PGDBusInterfaceSetPropertyFunc;
  PGDBusInterfaceSetPropertyFunc = ^TGDBusInterfaceSetPropertyFunc;
  TGDBusInterfaceSetPropertyFunc = function(connection: PGDBusConnection; sender: Pgchar; object_path: Pgchar; interface_name: Pgchar; property_name: Pgchar; value: PGVariant; error: PPGError; user_data: gpointer): gboolean; cdecl;

  TGDBusInterfaceVTable = record
    method_call: TGDBusInterfaceMethodCallFunc;
    get_property: TGDBusInterfaceGetPropertyFunc;
    set_property: TGDBusInterfaceSetPropertyFunc;
    padding: array [0..7] of gpointer;
  end;



  PPGDBusSubtreeEnumerateFunc = ^PGDBusSubtreeEnumerateFunc;
  PGDBusSubtreeEnumerateFunc = ^TGDBusSubtreeEnumerateFunc;
  TGDBusSubtreeEnumerateFunc = function(connection: PGDBusConnection; sender: Pgchar; object_path: Pgchar; user_data: gpointer): PPgchar; cdecl;

  PPGDBusSubtreeIntrospectFunc = ^PGDBusSubtreeIntrospectFunc;
  PGDBusSubtreeIntrospectFunc = ^TGDBusSubtreeIntrospectFunc;
  TGDBusSubtreeIntrospectFunc = function(connection: PGDBusConnection; sender: Pgchar; object_path: Pgchar; node: Pgchar; user_data: gpointer): PPGDBusInterfaceInfo; cdecl;

  PPGDBusSubtreeDispatchFunc = ^PGDBusSubtreeDispatchFunc;
  PGDBusSubtreeDispatchFunc = ^TGDBusSubtreeDispatchFunc;
  TGDBusSubtreeDispatchFunc = function(connection: PGDBusConnection; sender: Pgchar; object_path: Pgchar; interface_name: Pgchar; node: Pgchar; out_user_data: Pgpointer; user_data: gpointer): PGDBusInterfaceVTable; cdecl;

  TGDBusSubtreeVTable = record
    enumerate: TGDBusSubtreeEnumerateFunc;
    introspect: TGDBusSubtreeIntrospectFunc;
    dispatch: TGDBusSubtreeDispatchFunc;
    padding: array [0..7] of gpointer;
  end;



  PPGDBusMessageByteOrder = ^PGDBusMessageByteOrder;
  PGDBusMessageByteOrder = ^TGDBusMessageByteOrder;

  PPGDBusMessageFlags = ^PGDBusMessageFlags;
  PGDBusMessageFlags = ^TGDBusMessageFlags;

  PPGDBusMessageHeaderField = ^PGDBusMessageHeaderField;
  PGDBusMessageHeaderField = ^TGDBusMessageHeaderField;

  PPGDBusMessageType = ^PGDBusMessageType;
  PGDBusMessageType = ^TGDBusMessageType;
  TGDBusMessage = object(TGObject)
  end;

  PPGDBusErrorEntry = ^PGDBusErrorEntry;
  PGDBusErrorEntry = ^TGDBusErrorEntry;

  TGDBusErrorEntry = record
    error_code: gint;
    dbus_error_name: Pgchar;
  end;



  PPGDBusError = ^PGDBusError;
  PGDBusError = ^TGDBusError;

  PPGDBusObject = ^PGDBusObject;
  PGDBusObject = ^TGDBusObject;

  PPGDBusInterface = ^PGDBusInterface;
  PGDBusInterface = ^TGDBusInterface;
  TGDBusInterface = object
  end;
  TGDBusObject = object
    interface_added: procedure(interface_: TGDBusInterface); cdecl;
    interface_removed: procedure(interface_: TGDBusInterface); cdecl;
  end;

  PPGDBusInterfaceIface = ^PGDBusInterfaceIface;
  PGDBusInterfaceIface = ^TGDBusInterfaceIface;
  TGDBusInterfaceIface = object
    parent_iface: TGTypeInterface;
    get_info: function(interface_: PGDBusInterface): PGDBusInterfaceInfo; cdecl;
    get_object: function(interface_: PGDBusInterface): PGDBusObject; cdecl;
    set_object: procedure(interface_: PGDBusInterface; object_: PGDBusObject); cdecl;
    dup_object: function(interface_: PGDBusInterface): PGDBusObject; cdecl;
  end;
  TGDBusMethodInfo = object
    ref_count: gint;
    name: Pgchar;
    in_args: PGDBusArgInfo;
    out_args: PGDBusArgInfo;
    annotations: PGDBusAnnotationInfo;
  end;
  TGDBusSignalInfo = object
    ref_count: gint;
    name: Pgchar;
    args: PGDBusArgInfo;
    annotations: PGDBusAnnotationInfo;
  end;

  PPGDBusPropertyInfoFlags = ^PGDBusPropertyInfoFlags;
  PGDBusPropertyInfoFlags = ^TGDBusPropertyInfoFlags;
  TGDBusPropertyInfo = object
    ref_count: gint;
    name: Pgchar;
    signature: Pgchar;
    flags: TGDBusPropertyInfoFlags;
    annotations: PGDBusAnnotationInfo;
  end;
  TGDBusMethodInvocation = object(TGObject)
  end;

  PPGDBusInterfaceSkeleton = ^PGDBusInterfaceSkeleton;
  PGDBusInterfaceSkeleton = ^TGDBusInterfaceSkeleton;

  PPGDBusInterfaceSkeletonFlags = ^PGDBusInterfaceSkeletonFlags;
  PGDBusInterfaceSkeletonFlags = ^TGDBusInterfaceSkeletonFlags;

  PPGDBusInterfaceSkeletonPrivate = ^PGDBusInterfaceSkeletonPrivate;
  PGDBusInterfaceSkeletonPrivate = ^TGDBusInterfaceSkeletonPrivate;
  TGDBusInterfaceSkeleton = object(TGObject)
    priv: PGDBusInterfaceSkeletonPrivate;
  end;

  TGDBusInterfaceSkeletonPrivate = record
  end;



  PPGDBusInterfaceSkeletonClass = ^PGDBusInterfaceSkeletonClass;
  PGDBusInterfaceSkeletonClass = ^TGDBusInterfaceSkeletonClass;
  TGDBusInterfaceSkeletonClass = object
    parent_class: TGObjectClass;
    get_info: function(interface_: PGDBusInterfaceSkeleton): PGDBusInterfaceInfo; cdecl;
    get_vtable: function(interface_: PGDBusInterfaceSkeleton): PGDBusInterfaceVTable; cdecl;
    get_properties: function(interface_: PGDBusInterfaceSkeleton): PGVariant; cdecl;
    flush: procedure(interface_: PGDBusInterfaceSkeleton); cdecl;
    vfunc_padding: array [0..7] of gpointer;
    g_authorize_method: function(interface_: PGDBusInterfaceSkeleton; invocation: PGDBusMethodInvocation): gboolean; cdecl;
    signal_padding: array [0..7] of gpointer;
  end;

  PPGDBusMenuModel = ^PGDBusMenuModel;
  PGDBusMenuModel = ^TGDBusMenuModel;
  TGDBusMenuModel = object(TGMenuModel)
  end;

  PPGDBusNodeInfo = ^PGDBusNodeInfo;
  PGDBusNodeInfo = ^TGDBusNodeInfo;
  TGDBusNodeInfo = object
    ref_count: gint;
    path: Pgchar;
    interfaces: PGDBusInterfaceInfo;
    nodes: PGDBusNodeInfo;
    annotations: PGDBusAnnotationInfo;
  end;

  PPGDBusObjectIface = ^PGDBusObjectIface;
  PGDBusObjectIface = ^TGDBusObjectIface;
  TGDBusObjectIface = object
    parent_iface: TGTypeInterface;
    get_object_path: function(object_: PGDBusObject): Pgchar; cdecl;
    get_interfaces: function(object_: PGDBusObject): PGList; cdecl;
    get_interface: function(object_: PGDBusObject; interface_name: Pgchar): PGDBusInterface; cdecl;
    interface_added: procedure(object_: PGDBusObject; interface_: PGDBusInterface); cdecl;
    interface_removed: procedure(object_: PGDBusObject; interface_: PGDBusInterface); cdecl;
  end;

  PPGDBusObjectManager = ^PGDBusObjectManager;
  PGDBusObjectManager = ^TGDBusObjectManager;
  TGDBusObjectManager = object
    interface_added: procedure(object_: TGDBusObject; interface_: TGDBusInterface); cdecl;
    interface_removed: procedure(object_: TGDBusObject; interface_: TGDBusInterface); cdecl;
    object_added: procedure(object_: TGDBusObject); cdecl;
    object_removed: procedure(object_: TGDBusObject); cdecl;
  end;

  PPGDBusObjectManagerClient = ^PGDBusObjectManagerClient;
  PGDBusObjectManagerClient = ^TGDBusObjectManagerClient;

  PPGDBusObjectManagerClientFlags = ^PGDBusObjectManagerClientFlags;
  PGDBusObjectManagerClientFlags = ^TGDBusObjectManagerClientFlags;

  PPGDBusProxyTypeFunc = ^PGDBusProxyTypeFunc;
  PGDBusProxyTypeFunc = ^TGDBusProxyTypeFunc;
  TGDBusProxyTypeFunc = function(manager: PGDBusObjectManagerClient; object_path: Pgchar; interface_name: Pgchar; user_data: gpointer): TGType; cdecl;

  PPGDBusObjectManagerClientPrivate = ^PGDBusObjectManagerClientPrivate;
  PGDBusObjectManagerClientPrivate = ^TGDBusObjectManagerClientPrivate;
  TGDBusObjectManagerClient = object(TGObject)
    priv: PGDBusObjectManagerClientPrivate;
  end;

  PPGDBusObjectProxy = ^PGDBusObjectProxy;
  PGDBusObjectProxy = ^TGDBusObjectProxy;

  PPGDBusObjectProxyPrivate = ^PGDBusObjectProxyPrivate;
  PGDBusObjectProxyPrivate = ^TGDBusObjectProxyPrivate;
  TGDBusObjectProxy = object(TGObject)
    priv: PGDBusObjectProxyPrivate;
  end;

  PPGDBusProxy = ^PGDBusProxy;
  PGDBusProxy = ^TGDBusProxy;

  PPGDBusProxyFlags = ^PGDBusProxyFlags;
  PGDBusProxyFlags = ^TGDBusProxyFlags;

  PPGDBusProxyPrivate = ^PGDBusProxyPrivate;
  PGDBusProxyPrivate = ^TGDBusProxyPrivate;
  TGDBusProxy = object(TGObject)
    priv: PGDBusProxyPrivate;
  end;

  TGDBusObjectManagerClientPrivate = record
  end;



  PPGDBusObjectManagerClientClass = ^PGDBusObjectManagerClientClass;
  PGDBusObjectManagerClientClass = ^TGDBusObjectManagerClientClass;
  TGDBusObjectManagerClientClass = object
    parent_class: TGObjectClass;
    interface_proxy_signal: procedure(manager: PGDBusObjectManagerClient; object_proxy: PGDBusObjectProxy; interface_proxy: PGDBusProxy; sender_name: Pgchar; signal_name: Pgchar; parameters: PGVariant); cdecl;
    interface_proxy_properties_changed: procedure(manager: PGDBusObjectManagerClient; object_proxy: PGDBusObjectProxy; interface_proxy: PGDBusProxy; changed_properties: PGVariant; invalidated_properties: PPgchar); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGDBusObjectManagerIface = ^PGDBusObjectManagerIface;
  PGDBusObjectManagerIface = ^TGDBusObjectManagerIface;
  TGDBusObjectManagerIface = object
    parent_iface: TGTypeInterface;
    get_object_path: function(manager: PGDBusObjectManager): Pgchar; cdecl;
    get_objects: function(manager: PGDBusObjectManager): PGList; cdecl;
    get_object: function(manager: PGDBusObjectManager; object_path: Pgchar): PGDBusObject; cdecl;
    get_interface: function(manager: PGDBusObjectManager; object_path: Pgchar; interface_name: Pgchar): PGDBusInterface; cdecl;
    object_added: procedure(manager: PGDBusObjectManager; object_: PGDBusObject); cdecl;
    object_removed: procedure(manager: PGDBusObjectManager; object_: PGDBusObject); cdecl;
    interface_added: procedure(manager: PGDBusObjectManager; object_: PGDBusObject; interface_: PGDBusInterface); cdecl;
    interface_removed: procedure(manager: PGDBusObjectManager; object_: PGDBusObject; interface_: PGDBusInterface); cdecl;
  end;

  PPGDBusObjectManagerServer = ^PGDBusObjectManagerServer;
  PGDBusObjectManagerServer = ^TGDBusObjectManagerServer;

  PPGDBusObjectSkeleton = ^PGDBusObjectSkeleton;
  PGDBusObjectSkeleton = ^TGDBusObjectSkeleton;

  PPGDBusObjectManagerServerPrivate = ^PGDBusObjectManagerServerPrivate;
  PGDBusObjectManagerServerPrivate = ^TGDBusObjectManagerServerPrivate;
  TGDBusObjectManagerServer = object(TGObject)
    priv: PGDBusObjectManagerServerPrivate;
  end;

  PPGDBusObjectSkeletonPrivate = ^PGDBusObjectSkeletonPrivate;
  PGDBusObjectSkeletonPrivate = ^TGDBusObjectSkeletonPrivate;
  TGDBusObjectSkeleton = object(TGObject)
    priv: PGDBusObjectSkeletonPrivate;
  end;

  TGDBusObjectManagerServerPrivate = record
  end;



  PPGDBusObjectManagerServerClass = ^PGDBusObjectManagerServerClass;
  PGDBusObjectManagerServerClass = ^TGDBusObjectManagerServerClass;
  TGDBusObjectManagerServerClass = object
    parent_class: TGObjectClass;
    padding: array [0..7] of gpointer;
  end;

  TGDBusObjectProxyPrivate = record
  end;



  PPGDBusObjectProxyClass = ^PGDBusObjectProxyClass;
  PGDBusObjectProxyClass = ^TGDBusObjectProxyClass;
  TGDBusObjectProxyClass = object
    parent_class: TGObjectClass;
    padding: array [0..7] of gpointer;
  end;

  TGDBusObjectSkeletonPrivate = record
  end;



  PPGDBusObjectSkeletonClass = ^PGDBusObjectSkeletonClass;
  PGDBusObjectSkeletonClass = ^TGDBusObjectSkeletonClass;
  TGDBusObjectSkeletonClass = object
    parent_class: TGObjectClass;
    authorize_method: function(object_: PGDBusObjectSkeleton; interface_: PGDBusInterfaceSkeleton; invocation: PGDBusMethodInvocation): gboolean; cdecl;
    padding: array [0..7] of gpointer;
  end;

  TGDBusProxyPrivate = record
  end;



  PPGDBusProxyClass = ^PGDBusProxyClass;
  PGDBusProxyClass = ^TGDBusProxyClass;
  TGDBusProxyClass = object
    parent_class: TGObjectClass;
    g_properties_changed: procedure(proxy: PGDBusProxy; changed_properties: PGVariant; invalidated_properties: PPgchar); cdecl;
    g_signal: procedure(proxy: PGDBusProxy; sender_name: Pgchar; signal_name: Pgchar; parameters: PGVariant); cdecl;
    padding: array [0..31] of gpointer;
  end;

  PPGDBusServer = ^PGDBusServer;
  PGDBusServer = ^TGDBusServer;

  PPGDBusServerFlags = ^PGDBusServerFlags;
  PGDBusServerFlags = ^TGDBusServerFlags;
  TGDBusServer = object(TGObject)
  end;

  PPGDataInputStream = ^PGDataInputStream;
  PGDataInputStream = ^TGDataInputStream;

  PPGDataStreamByteOrder = ^PGDataStreamByteOrder;
  PGDataStreamByteOrder = ^TGDataStreamByteOrder;

  PPGDataStreamNewlineType = ^PGDataStreamNewlineType;
  PGDataStreamNewlineType = ^TGDataStreamNewlineType;

  PPGDataInputStreamPrivate = ^PGDataInputStreamPrivate;
  PGDataInputStreamPrivate = ^TGDataInputStreamPrivate;
  TGDataInputStream = object(TGBufferedInputStream)
    priv2: PGDataInputStreamPrivate;
  end;

  TGDataInputStreamPrivate = record
  end;



  PPGDataInputStreamClass = ^PGDataInputStreamClass;
  PGDataInputStreamClass = ^TGDataInputStreamClass;
  TGDataInputStreamClass = object
    parent_class: TGBufferedInputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGDataOutputStream = ^PGDataOutputStream;
  PGDataOutputStream = ^TGDataOutputStream;

  PPGDataOutputStreamPrivate = ^PGDataOutputStreamPrivate;
  PGDataOutputStreamPrivate = ^TGDataOutputStreamPrivate;
  TGDataOutputStream = object(TGFilterOutputStream)
    priv1: PGDataOutputStreamPrivate;
  end;

  TGDataOutputStreamPrivate = record
  end;



  PPGDataOutputStreamClass = ^PGDataOutputStreamClass;
  PGDataOutputStreamClass = ^TGDataOutputStreamClass;
  TGDataOutputStreamClass = object
    parent_class: TGFilterOutputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGDesktopAppInfo = ^PGDesktopAppInfo;
  PGDesktopAppInfo = ^TGDesktopAppInfo;

  PPGDesktopAppLaunchCallback = ^PGDesktopAppLaunchCallback;
  PGDesktopAppLaunchCallback = ^TGDesktopAppLaunchCallback;
  TGDesktopAppLaunchCallback = procedure(appinfo: PGDesktopAppInfo; pid: TGPid; user_data: gpointer); cdecl;
  TGDesktopAppInfo = object(TGObject)
  end;

  PPGDesktopAppInfoClass = ^PGDesktopAppInfoClass;
  PGDesktopAppInfoClass = ^TGDesktopAppInfoClass;
  TGDesktopAppInfoClass = object
    parent_class: TGObjectClass;
  end;

  PPGDesktopAppInfoLookup = ^PGDesktopAppInfoLookup;
  PGDesktopAppInfoLookup = ^TGDesktopAppInfoLookup;
  TGDesktopAppInfoLookup = object
  end;

  PPGDesktopAppInfoLookupIface = ^PGDesktopAppInfoLookupIface;
  PGDesktopAppInfoLookupIface = ^TGDesktopAppInfoLookupIface;
  TGDesktopAppInfoLookupIface = object
    g_iface: TGTypeInterface;
    get_default_for_uri_scheme: function(lookup: PGDesktopAppInfoLookup; uri_scheme: Pgchar): PGAppInfo; cdecl;
  end;

  PPGDrive = ^PGDrive;
  PGDrive = ^TGDrive;

  PPGDriveStartStopType = ^PGDriveStartStopType;
  PGDriveStartStopType = ^TGDriveStartStopType;
  TGDrive = object
    changed: procedure; cdecl;
    disconnected: procedure; cdecl;
    eject_button: procedure; cdecl;
    stop_button: procedure; cdecl;
  end;

  PPGPasswordSave = ^PGPasswordSave;
  PGPasswordSave = ^TGPasswordSave;

  PPGMountOperationResult = ^PGMountOperationResult;
  PGMountOperationResult = ^TGMountOperationResult;

  PPGMountOperationPrivate = ^PGMountOperationPrivate;
  PGMountOperationPrivate = ^TGMountOperationPrivate;
  TGMountOperation = object(TGObject)
    priv: PGMountOperationPrivate;
  end;

  PPGDriveIface = ^PGDriveIface;
  PGDriveIface = ^TGDriveIface;
  TGDriveIface = object
    g_iface: TGTypeInterface;
    changed: procedure(drive: PGDrive); cdecl;
    disconnected: procedure(drive: PGDrive); cdecl;
    eject_button: procedure(drive: PGDrive); cdecl;
    get_name: function(drive: PGDrive): Pgchar; cdecl;
    get_icon: function(drive: PGDrive): PGIcon; cdecl;
    has_volumes: function(drive: PGDrive): gboolean; cdecl;
    get_volumes: function(drive: PGDrive): PGList; cdecl;
    is_media_removable: function(drive: PGDrive): gboolean; cdecl;
    has_media: function(drive: PGDrive): gboolean; cdecl;
    is_media_check_automatic: function(drive: PGDrive): gboolean; cdecl;
    can_eject: function(drive: PGDrive): gboolean; cdecl;
    can_poll_for_media: function(drive: PGDrive): gboolean; cdecl;
    eject: procedure(drive: PGDrive; flags: TGMountUnmountFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    eject_finish: function(drive: PGDrive; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    poll_for_media: procedure(drive: PGDrive; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    poll_for_media_finish: function(drive: PGDrive; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    get_identifier: function(drive: PGDrive; kind: Pgchar): Pgchar; cdecl;
    enumerate_identifiers: function(drive: PGDrive): PPgchar; cdecl;
    get_start_stop_type: function(drive: PGDrive): TGDriveStartStopType; cdecl;
    can_start: function(drive: PGDrive): gboolean; cdecl;
    can_start_degraded: function(drive: PGDrive): gboolean; cdecl;
    start: procedure(drive: PGDrive; flags: TGDriveStartFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    start_finish: function(drive: PGDrive; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    can_stop: function(drive: PGDrive): gboolean; cdecl;
    stop: procedure(drive: PGDrive; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    stop_finish: function(drive: PGDrive; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    stop_button: procedure(drive: PGDrive); cdecl;
    eject_with_operation: procedure(drive: PGDrive; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    eject_with_operation_finish: function(drive: PGDrive; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    get_sort_key: function(drive: PGDrive): Pgchar; cdecl;
    get_symbolic_icon: function(drive: PGDrive): PGIcon; cdecl;
  end;

  PPGEmblem = ^PGEmblem;
  PGEmblem = ^TGEmblem;

  PPGEmblemOrigin = ^PGEmblemOrigin;
  PGEmblemOrigin = ^TGEmblemOrigin;
  TGEmblem = object(TGObject)
  end;

  PPGEmblemClass = ^PGEmblemClass;
  PGEmblemClass = ^TGEmblemClass;
  TGEmblemClass = object
  end;

  PPGEmblemedIcon = ^PGEmblemedIcon;
  PGEmblemedIcon = ^TGEmblemedIcon;

  PPGEmblemedIconPrivate = ^PGEmblemedIconPrivate;
  PGEmblemedIconPrivate = ^TGEmblemedIconPrivate;
  TGEmblemedIcon = object(TGObject)
    priv: PGEmblemedIconPrivate;
  end;

  TGEmblemedIconPrivate = record
  end;



  PPGEmblemedIconClass = ^PGEmblemedIconClass;
  PGEmblemedIconClass = ^TGEmblemedIconClass;
  TGEmblemedIconClass = object
    parent_class: TGObjectClass;
  end;

  PPGFileIOStreamPrivate = ^PGFileIOStreamPrivate;
  PGFileIOStreamPrivate = ^TGFileIOStreamPrivate;
  TGFileIOStream = object(TGIOStream)
    priv1: PGFileIOStreamPrivate;
  end;

  PPGFileOutputStreamPrivate = ^PGFileOutputStreamPrivate;
  PGFileOutputStreamPrivate = ^TGFileOutputStreamPrivate;
  TGFileOutputStream = object(TGOutputStream)
    priv1: PGFileOutputStreamPrivate;
  end;

  PPGFileEnumeratorPrivate = ^PGFileEnumeratorPrivate;
  PGFileEnumeratorPrivate = ^TGFileEnumeratorPrivate;
  TGFileEnumerator = object(TGObject)
    priv: PGFileEnumeratorPrivate;
  end;

  PPGVolume = ^PGVolume;
  PGVolume = ^TGVolume;
  TGMount = object
    changed: procedure; cdecl;
    pre_unmount: procedure; cdecl;
    unmounted: procedure; cdecl;
  end;

  PPGFileMonitorEvent = ^PGFileMonitorEvent;
  PGFileMonitorEvent = ^TGFileMonitorEvent;

  PPGFileMonitorPrivate = ^PGFileMonitorPrivate;
  PGFileMonitorPrivate = ^TGFileMonitorPrivate;
  TGFileMonitor = object(TGObject)
    priv: PGFileMonitorPrivate;
  end;

  PPGFileAttributeStatus = ^PGFileAttributeStatus;
  PGFileAttributeStatus = ^TGFileAttributeStatus;

  PPGFileAttributeMatcher = ^PGFileAttributeMatcher;
  PGFileAttributeMatcher = ^TGFileAttributeMatcher;
  TGFileInfo = object(TGObject)
  end;

  PPGFileAttributeInfoFlags = ^PGFileAttributeInfoFlags;
  PGFileAttributeInfoFlags = ^TGFileAttributeInfoFlags;

  PPGFileAttributeInfo = ^PGFileAttributeInfo;
  PGFileAttributeInfo = ^TGFileAttributeInfo;
  TGFileAttributeInfoList = object
    infos: PGFileAttributeInfo;
    n_infos: gint;
  end;

  PPGFileInputStreamPrivate = ^PGFileInputStreamPrivate;
  PGFileInputStreamPrivate = ^TGFileInputStreamPrivate;
  TGFileInputStream = object(TGInputStream)
    priv1: PGFileInputStreamPrivate;
  end;

  TGFileAttributeInfo = record
    name: Pgchar;
    type_: TGFileAttributeType;
    flags: TGFileAttributeInfoFlags;
  end;


  TGFileAttributeMatcher = object
  end;

  PPGFileDescriptorBased = ^PGFileDescriptorBased;
  PGFileDescriptorBased = ^TGFileDescriptorBased;
  TGFileDescriptorBased = object
  end;

  PPGFileDescriptorBasedIface = ^PGFileDescriptorBasedIface;
  PGFileDescriptorBasedIface = ^TGFileDescriptorBasedIface;
  TGFileDescriptorBasedIface = object
    g_iface: TGTypeInterface;
    get_fd: function(fd_based: PGFileDescriptorBased): gint; cdecl;
  end;

  TGFileEnumeratorPrivate = record
  end;



  PPGFileEnumeratorClass = ^PGFileEnumeratorClass;
  PGFileEnumeratorClass = ^TGFileEnumeratorClass;
  TGFileEnumeratorClass = object
    parent_class: TGObjectClass;
    next_file: function(enumerator: PGFileEnumerator; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
    close_fn: function(enumerator: PGFileEnumerator; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    next_files_async: procedure(enumerator: PGFileEnumerator; num_files: gint; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    next_files_finish: function(enumerator: PGFileEnumerator; result_: PGAsyncResult; error: PPGError): PGList; cdecl;
    close_async: procedure(enumerator: PGFileEnumerator; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    close_finish: function(enumerator: PGFileEnumerator; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
    _g_reserved7: procedure; cdecl;
  end;

  TGFileIOStreamPrivate = record
  end;



  PPGIOStreamClass = ^PGIOStreamClass;
  PGIOStreamClass = ^TGIOStreamClass;
  TGIOStreamClass = object
    parent_class: TGObjectClass;
    get_input_stream: function(stream: PGIOStream): PGInputStream; cdecl;
    get_output_stream: function(stream: PGIOStream): PGOutputStream; cdecl;
    close_fn: function(stream: PGIOStream; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    close_async: procedure(stream: PGIOStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    close_finish: function(stream: PGIOStream; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
    _g_reserved7: procedure; cdecl;
    _g_reserved8: procedure; cdecl;
    _g_reserved9: procedure; cdecl;
    _g_reserved10: procedure; cdecl;
  end;

  PPGFileIOStreamClass = ^PGFileIOStreamClass;
  PGFileIOStreamClass = ^TGFileIOStreamClass;
  TGFileIOStreamClass = object
    parent_class: TGIOStreamClass;
    tell: function(stream: PGFileIOStream): gint64; cdecl;
    can_seek: function(stream: PGFileIOStream): gboolean; cdecl;
    seek: function(stream: PGFileIOStream; offset: gint64; type_: TGSeekType; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    can_truncate: function(stream: PGFileIOStream): gboolean; cdecl;
    truncate_fn: function(stream: PGFileIOStream; size: gint64; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    query_info: function(stream: PGFileIOStream; attributes: Pgchar; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
    query_info_async: procedure(stream: PGFileIOStream; attributes: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    query_info_finish: function(stream: PGFileIOStream; result_: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
    get_etag: function(stream: PGFileIOStream): Pgchar; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGLoadableIcon = ^PGLoadableIcon;
  PGLoadableIcon = ^TGLoadableIcon;
  TGLoadableIcon = object
  end;

  PPGFileIcon = ^PGFileIcon;
  PGFileIcon = ^TGFileIcon;
  TGFileIcon = object(TGObject)
  end;

  PPGFileIconClass = ^PGFileIconClass;
  PGFileIconClass = ^TGFileIconClass;
  TGFileIconClass = object
  end;

  PPGFileIface = ^PGFileIface;
  PGFileIface = ^TGFileIface;
  TGFileIface = object
    g_iface: TGTypeInterface;
    dup: function(file_: PGFile): PGFile; cdecl;
    hash: function(file_: PGFile): guint; cdecl;
    equal: function(file1: PGFile; file2: PGFile): gboolean; cdecl;
    is_native: function(file_: PGFile): gboolean; cdecl;
    has_uri_scheme: function(file_: PGFile; uri_scheme: Pgchar): gboolean; cdecl;
    get_uri_scheme: function(file_: PGFile): Pgchar; cdecl;
    get_basename: function(file_: PGFile): Pgchar; cdecl;
    get_path: function(file_: PGFile): Pgchar; cdecl;
    get_uri: function(file_: PGFile): Pgchar; cdecl;
    get_parse_name: function(file_: PGFile): Pgchar; cdecl;
    get_parent: function(file_: PGFile): PGFile; cdecl;
    prefix_matches: function(prefix: PGFile; file_: PGFile): gboolean; cdecl;
    get_relative_path: function(parent: PGFile; descendant: PGFile): Pgchar; cdecl;
    resolve_relative_path: function(file_: PGFile; relative_path: Pgchar): PGFile; cdecl;
    get_child_for_display_name: function(file_: PGFile; display_name: Pgchar; error: PPGError): PGFile; cdecl;
    enumerate_children: function(file_: PGFile; attributes: Pgchar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): PGFileEnumerator; cdecl;
    enumerate_children_async: procedure(file_: PGFile; attributes: Pgchar; flags: TGFileQueryInfoFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    enumerate_children_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileEnumerator; cdecl;
    query_info: function(file_: PGFile; attributes: Pgchar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
    query_info_async: procedure(file_: PGFile; attributes: Pgchar; flags: TGFileQueryInfoFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    query_info_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
    query_filesystem_info: function(file_: PGFile; attributes: Pgchar; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
    query_filesystem_info_async: procedure(file_: PGFile; attributes: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    query_filesystem_info_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
    find_enclosing_mount: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGMount; cdecl;
    find_enclosing_mount_async: procedure(file_: PGFile; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    find_enclosing_mount_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGMount; cdecl;
    set_display_name: function(file_: PGFile; display_name: Pgchar; cancellable: PGCancellable; error: PPGError): PGFile; cdecl;
    set_display_name_async: procedure(file_: PGFile; display_name: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    set_display_name_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFile; cdecl;
    query_settable_attributes: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileAttributeInfoList; cdecl;
    _query_settable_attributes_async: procedure; cdecl;
    _query_settable_attributes_finish: procedure; cdecl;
    query_writable_namespaces: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileAttributeInfoList; cdecl;
    _query_writable_namespaces_async: procedure; cdecl;
    _query_writable_namespaces_finish: procedure; cdecl;
    set_attribute: function(file_: PGFile; attribute: Pgchar; type_: TGFileAttributeType; value_p: gpointer; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    set_attributes_from_info: function(file_: PGFile; info: PGFileInfo; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    set_attributes_async: procedure(file_: PGFile; info: PGFileInfo; flags: TGFileQueryInfoFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    set_attributes_finish: function(file_: PGFile; result_: PGAsyncResult; info: PPGFileInfo; error: PPGError): gboolean; cdecl;
    read_fn: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileInputStream; cdecl;
    read_async: procedure(file_: PGFile; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    read_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInputStream; cdecl;
    append_to: function(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileOutputStream; cdecl;
    append_to_async: procedure(file_: PGFile; flags: TGFileCreateFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    append_to_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl;
    create: function(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileOutputStream; cdecl;
    create_async: procedure(file_: PGFile; flags: TGFileCreateFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    create_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl;
    replace: function(file_: PGFile; etag: Pgchar; make_backup: gboolean; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileOutputStream; cdecl;
    replace_async: procedure(file_: PGFile; etag: Pgchar; make_backup: gboolean; flags: TGFileCreateFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    replace_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl;
    delete_file: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    delete_file_async: procedure(file_: PGFile; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    delete_file_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    trash: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    _trash_async: procedure; cdecl;
    _trash_finish: procedure; cdecl;
    make_directory: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    _make_directory_async: procedure; cdecl;
    _make_directory_finish: procedure; cdecl;
    make_symbolic_link: function(file_: PGFile; symlink_value: Pgchar; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    _make_symbolic_link_async: procedure; cdecl;
    _make_symbolic_link_finish: procedure; cdecl;
    copy: function(source: PGFile; destination: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; progress_callback: TGFileProgressCallback; progress_callback_data: gpointer; error: PPGError): gboolean; cdecl;
    copy_async: procedure(source: PGFile; destination: PGFile; flags: TGFileCopyFlags; io_priority: gint; cancellable: PGCancellable; progress_callback: TGFileProgressCallback; progress_callback_data: gpointer; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    copy_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): gboolean; cdecl;
    move: function(source: PGFile; destination: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; progress_callback: TGFileProgressCallback; progress_callback_data: gpointer; error: PPGError): gboolean; cdecl;
    _move_async: procedure; cdecl;
    _move_finish: procedure; cdecl;
    mount_mountable: procedure(file_: PGFile; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    mount_mountable_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): PGFile; cdecl;
    unmount_mountable: procedure(file_: PGFile; flags: TGMountUnmountFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    unmount_mountable_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    eject_mountable: procedure(file_: PGFile; flags: TGMountUnmountFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    eject_mountable_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    mount_enclosing_volume: procedure(location: PGFile; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    mount_enclosing_volume_finish: function(location: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    monitor_dir: function(file_: PGFile; flags: TGFileMonitorFlags; cancellable: PGCancellable; error: PPGError): PGFileMonitor; cdecl;
    monitor_file: function(file_: PGFile; flags: TGFileMonitorFlags; cancellable: PGCancellable; error: PPGError): PGFileMonitor; cdecl;
    open_readwrite: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileIOStream; cdecl;
    open_readwrite_async: procedure(file_: PGFile; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    open_readwrite_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl;
    create_readwrite: function(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileIOStream; cdecl;
    create_readwrite_async: procedure(file_: PGFile; flags: TGFileCreateFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    create_readwrite_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl;
    replace_readwrite: function(file_: PGFile; etag: Pgchar; make_backup: gboolean; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileIOStream; cdecl;
    replace_readwrite_async: procedure(file_: PGFile; etag: Pgchar; make_backup: gboolean; flags: TGFileCreateFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    replace_readwrite_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl;
    start_mountable: procedure(file_: PGFile; flags: TGDriveStartFlags; start_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    start_mountable_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    stop_mountable: procedure(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    stop_mountable_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    supports_thread_contexts: gboolean;
    unmount_mountable_with_operation: procedure(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    unmount_mountable_with_operation_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    eject_mountable_with_operation: procedure(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    eject_mountable_with_operation_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    poll_mountable: procedure(file_: PGFile; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    poll_mountable_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
  end;

  PPGFileInfoClass = ^PGFileInfoClass;
  PGFileInfoClass = ^TGFileInfoClass;
  TGFileInfoClass = object
  end;

  TGFileInputStreamPrivate = record
  end;



  PPGFileInputStreamClass = ^PGFileInputStreamClass;
  PGFileInputStreamClass = ^TGFileInputStreamClass;
  TGFileInputStreamClass = object
    parent_class: TGInputStreamClass;
    tell: function(stream: PGFileInputStream): gint64; cdecl;
    can_seek: function(stream: PGFileInputStream): gboolean; cdecl;
    seek: function(stream: PGFileInputStream; offset: gint64; type_: TGSeekType; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    query_info: function(stream: PGFileInputStream; attributes: Pgchar; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
    query_info_async: procedure(stream: PGFileInputStream; attributes: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    query_info_finish: function(stream: PGFileInputStream; result_: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  TGFileMonitorPrivate = record
  end;



  PPGFileMonitorClass = ^PGFileMonitorClass;
  PGFileMonitorClass = ^TGFileMonitorClass;
  TGFileMonitorClass = object
    parent_class: TGObjectClass;
    changed: procedure(monitor: PGFileMonitor; file_: PGFile; other_file: PGFile; event_type: TGFileMonitorEvent); cdecl;
    cancel: function(monitor: PGFileMonitor): gboolean; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  TGFileOutputStreamPrivate = record
  end;



  PPGFileOutputStreamClass = ^PGFileOutputStreamClass;
  PGFileOutputStreamClass = ^TGFileOutputStreamClass;
  TGFileOutputStreamClass = object
    parent_class: TGOutputStreamClass;
    tell: function(stream: PGFileOutputStream): gint64; cdecl;
    can_seek: function(stream: PGFileOutputStream): gboolean; cdecl;
    seek: function(stream: PGFileOutputStream; offset: gint64; type_: TGSeekType; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    can_truncate: function(stream: PGFileOutputStream): gboolean; cdecl;
    truncate_fn: function(stream: PGFileOutputStream; size: gint64; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    query_info: function(stream: PGFileOutputStream; attributes: Pgchar; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
    query_info_async: procedure(stream: PGFileOutputStream; attributes: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    query_info_finish: function(stream: PGFileOutputStream; result_: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
    get_etag: function(stream: PGFileOutputStream): Pgchar; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGFilenameCompleter = ^PGFilenameCompleter;
  PGFilenameCompleter = ^TGFilenameCompleter;
  TGFilenameCompleter = object(TGObject)
  end;

  PPGFilenameCompleterClass = ^PGFilenameCompleterClass;
  PGFilenameCompleterClass = ^TGFilenameCompleterClass;
  TGFilenameCompleterClass = object
    parent_class: TGObjectClass;
    got_completion_data: procedure(filename_completer: PGFilenameCompleter); cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
  end;

  PPGFilesystemPreviewType = ^PGFilesystemPreviewType;
  PGFilesystemPreviewType = ^TGFilesystemPreviewType;

  PPGIOErrorEnum = ^PGIOErrorEnum;
  PGIOErrorEnum = ^TGIOErrorEnum;

  PPGIOExtension = ^PGIOExtension;
  PGIOExtension = ^TGIOExtension;
  TGIOExtension = object
  end;

  PPGIOExtensionPoint = ^PGIOExtensionPoint;
  PGIOExtensionPoint = ^TGIOExtensionPoint;
  TGIOExtensionPoint = object
  end;

  PPGIOModule = ^PGIOModule;
  PGIOModule = ^TGIOModule;
  TGIOModule = object(TGTypeModule)
  end;

  PPGIOModuleClass = ^PGIOModuleClass;
  PGIOModuleClass = ^TGIOModuleClass;
  TGIOModuleClass = object
  end;

  PPGIOModuleScope = ^PGIOModuleScope;
  PGIOModuleScope = ^TGIOModuleScope;

  PPGIOModuleScopeFlags = ^PGIOModuleScopeFlags;
  PGIOModuleScopeFlags = ^TGIOModuleScopeFlags;
  TGIOModuleScope = object
  end;

  PPGIOSchedulerJob = ^PGIOSchedulerJob;
  PGIOSchedulerJob = ^TGIOSchedulerJob;
  TGIOSchedulerJob = object
  end;
  TGIOSchedulerJobFunc = function(job: PGIOSchedulerJob; cancellable: PGCancellable; user_data: gpointer): gboolean; cdecl;

  TGIOStreamPrivate = record
  end;



  PPGIOStreamAdapter = ^PGIOStreamAdapter;
  PGIOStreamAdapter = ^TGIOStreamAdapter;

  TGIOStreamAdapter = record
  end;



  PPGIconIface = ^PGIconIface;
  PGIconIface = ^TGIconIface;
  TGIconIface = object
    g_iface: TGTypeInterface;
    hash: function(icon: PGIcon): guint; cdecl;
    equal: function(icon1: PGIcon; icon2: PGIcon): gboolean; cdecl;
    to_tokens: function(icon: PGIcon; tokens: Pgpointer; out_version: Pgint): gboolean; cdecl;
    from_tokens: function(tokens: PPgchar; num_tokens: gint; version: gint; error: PPGError): PGIcon; cdecl;
  end;

  PPGInetAddress = ^PGInetAddress;
  PGInetAddress = ^TGInetAddress;

  PPGSocketFamily = ^PGSocketFamily;
  PGSocketFamily = ^TGSocketFamily;

  PPGInetAddressPrivate = ^PGInetAddressPrivate;
  PGInetAddressPrivate = ^TGInetAddressPrivate;
  TGInetAddress = object(TGObject)
    priv: PGInetAddressPrivate;
  end;

  TGInetAddressPrivate = record
  end;



  PPGInetAddressClass = ^PGInetAddressClass;
  PGInetAddressClass = ^TGInetAddressClass;
  TGInetAddressClass = object
    parent_class: TGObjectClass;
    to_string: function(address: PGInetAddress): Pgchar; cdecl;
    to_bytes: function(address: PGInetAddress): Pguint8; cdecl;
  end;

  PPGInetAddressMask = ^PGInetAddressMask;
  PGInetAddressMask = ^TGInetAddressMask;

  PPGInetAddressMaskPrivate = ^PGInetAddressMaskPrivate;
  PGInetAddressMaskPrivate = ^TGInetAddressMaskPrivate;
  TGInetAddressMask = object(TGObject)
    priv: PGInetAddressMaskPrivate;
  end;

  TGInetAddressMaskPrivate = record
  end;



  PPGInetAddressMaskClass = ^PGInetAddressMaskClass;
  PGInetAddressMaskClass = ^TGInetAddressMaskClass;
  TGInetAddressMaskClass = object
    parent_class: TGObjectClass;
  end;

  PPGSocketConnectable = ^PGSocketConnectable;
  PGSocketConnectable = ^TGSocketConnectable;

  PPGSocketAddressEnumerator = ^PGSocketAddressEnumerator;
  PGSocketAddressEnumerator = ^TGSocketAddressEnumerator;
  TGSocketConnectable = object
  end;

  PPGSocketAddress = ^PGSocketAddress;
  PGSocketAddress = ^TGSocketAddress;
  TGSocketAddress = object(TGObject)
  end;

  PPGInetSocketAddress = ^PGInetSocketAddress;
  PGInetSocketAddress = ^TGInetSocketAddress;

  PPGInetSocketAddressPrivate = ^PGInetSocketAddressPrivate;
  PGInetSocketAddressPrivate = ^TGInetSocketAddressPrivate;
  TGInetSocketAddress = object(TGSocketAddress)
    priv: PGInetSocketAddressPrivate;
  end;

  TGInetSocketAddressPrivate = record
  end;



  PPGSocketAddressClass = ^PGSocketAddressClass;
  PGSocketAddressClass = ^TGSocketAddressClass;
  TGSocketAddressClass = object
    parent_class: TGObjectClass;
    get_family: function(address: PGSocketAddress): TGSocketFamily; cdecl;
    get_native_size: function(address: PGSocketAddress): gssize; cdecl;
    to_native: function(address: PGSocketAddress; dest: gpointer; destlen: gsize; error: PPGError): gboolean; cdecl;
  end;

  PPGInetSocketAddressClass = ^PGInetSocketAddressClass;
  PGInetSocketAddressClass = ^TGInetSocketAddressClass;
  TGInetSocketAddressClass = object
    parent_class: TGSocketAddressClass;
  end;

  PPGInitableIface = ^PGInitableIface;
  PGInitableIface = ^TGInitableIface;
  TGInitableIface = object
    g_iface: TGTypeInterface;
    init: function(initable: PGInitable; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
  end;

  TGInputStreamPrivate = record
  end;



  PPGInputVector = ^PGInputVector;
  PGInputVector = ^TGInputVector;

  TGInputVector = record
    buffer: gpointer;
    size: gsize;
  end;



  PPGLoadableIconIface = ^PGLoadableIconIface;
  PGLoadableIconIface = ^TGLoadableIconIface;
  TGLoadableIconIface = object
    g_iface: TGTypeInterface;
    load: function(icon: PGLoadableIcon; size: gint; type_: PPgchar; cancellable: PGCancellable; error: PPGError): PGInputStream; cdecl;
    load_async: procedure(icon: PGLoadableIcon; size: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    load_finish: function(icon: PGLoadableIcon; res: PGAsyncResult; type_: PPgchar; error: PPGError): PGInputStream; cdecl;
  end;

  PPGMemoryInputStream = ^PGMemoryInputStream;
  PGMemoryInputStream = ^TGMemoryInputStream;

  PPGMemoryInputStreamPrivate = ^PGMemoryInputStreamPrivate;
  PGMemoryInputStreamPrivate = ^TGMemoryInputStreamPrivate;
  TGMemoryInputStream = object(TGInputStream)
    priv1: PGMemoryInputStreamPrivate;
  end;

  TGMemoryInputStreamPrivate = record
  end;



  PPGMemoryInputStreamClass = ^PGMemoryInputStreamClass;
  PGMemoryInputStreamClass = ^TGMemoryInputStreamClass;
  TGMemoryInputStreamClass = object
    parent_class: TGInputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;
  TGReallocFunc = function(data: gpointer; size: gsize): gpointer; cdecl;

  PPGMemoryOutputStream = ^PGMemoryOutputStream;
  PGMemoryOutputStream = ^TGMemoryOutputStream;

  PPGReallocFunc = ^PGReallocFunc;
  PGReallocFunc = ^TGReallocFunc;

  PPGMemoryOutputStreamPrivate = ^PGMemoryOutputStreamPrivate;
  PGMemoryOutputStreamPrivate = ^TGMemoryOutputStreamPrivate;
  TGMemoryOutputStream = object(TGOutputStream)
    priv1: PGMemoryOutputStreamPrivate;
  end;

  TGMemoryOutputStreamPrivate = record
  end;



  PPGMemoryOutputStreamClass = ^PGMemoryOutputStreamClass;
  PGMemoryOutputStreamClass = ^TGMemoryOutputStreamClass;
  TGMemoryOutputStreamClass = object
    parent_class: TGOutputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGMenu = ^PGMenu;
  PGMenu = ^TGMenu;

  PPGMenuItem = ^PGMenuItem;
  PGMenuItem = ^TGMenuItem;
  TGMenu = object(TGMenuModel)
  end;
  TGMenuItem = object(TGObject)
  end;

  PPGMenuAttributeIterPrivate = ^PGMenuAttributeIterPrivate;
  PGMenuAttributeIterPrivate = ^TGMenuAttributeIterPrivate;
  TGMenuAttributeIter = object(TGObject)
    priv: PGMenuAttributeIterPrivate;
  end;

  TGMenuAttributeIterPrivate = record
  end;



  PPGMenuAttributeIterClass = ^PGMenuAttributeIterClass;
  PGMenuAttributeIterClass = ^TGMenuAttributeIterClass;
  TGMenuAttributeIterClass = object
    parent_class: TGObjectClass;
    get_next: function(iter: PGMenuAttributeIter; out_name: PPgchar; value: PPGVariant): gboolean; cdecl;
  end;

  PPGMenuLinkIterPrivate = ^PGMenuLinkIterPrivate;
  PGMenuLinkIterPrivate = ^TGMenuLinkIterPrivate;
  TGMenuLinkIter = object(TGObject)
    priv: PGMenuLinkIterPrivate;
  end;

  TGMenuLinkIterPrivate = record
  end;



  PPGMenuLinkIterClass = ^PGMenuLinkIterClass;
  PGMenuLinkIterClass = ^TGMenuLinkIterClass;
  TGMenuLinkIterClass = object
    parent_class: TGObjectClass;
    get_next: function(iter: PGMenuLinkIter; out_link: PPgchar; value: PPGMenuModel): gboolean; cdecl;
  end;

  TGMenuModelPrivate = record
  end;



  PPGMenuModelClass = ^PGMenuModelClass;
  PGMenuModelClass = ^TGMenuModelClass;
  TGMenuModelClass = object
    parent_class: TGObjectClass;
    is_mutable: function(model: PGMenuModel): gboolean; cdecl;
    get_n_items: function(model: PGMenuModel): gint; cdecl;
    get_item_attributes: procedure(model: PGMenuModel; item_index: gint; attributes: PPGHashTable); cdecl;
    iterate_item_attributes: function(model: PGMenuModel; item_index: gint): PGMenuAttributeIter; cdecl;
    get_item_attribute_value: function(model: PGMenuModel; item_index: gint; attribute: Pgchar; expected_type: PGVariantType): PGVariant; cdecl;
    get_item_links: procedure(model: PGMenuModel; item_index: gint; links: PPGHashTable); cdecl;
    iterate_item_links: function(model: PGMenuModel; item_index: gint): PGMenuLinkIter; cdecl;
    get_item_link: function(model: PGMenuModel; item_index: gint; link: Pgchar): PGMenuModel; cdecl;
  end;
  TGVolume = object
    changed: procedure; cdecl;
    removed: procedure; cdecl;
  end;

  PPGMountIface = ^PGMountIface;
  PGMountIface = ^TGMountIface;
  TGMountIface = object
    g_iface: TGTypeInterface;
    changed: procedure(mount: PGMount); cdecl;
    unmounted: procedure(mount: PGMount); cdecl;
    get_root: function(mount: PGMount): PGFile; cdecl;
    get_name: function(mount: PGMount): Pgchar; cdecl;
    get_icon: function(mount: PGMount): PGIcon; cdecl;
    get_uuid: function(mount: PGMount): Pgchar; cdecl;
    get_volume: function(mount: PGMount): PGVolume; cdecl;
    get_drive: function(mount: PGMount): PGDrive; cdecl;
    can_unmount: function(mount: PGMount): gboolean; cdecl;
    can_eject: function(mount: PGMount): gboolean; cdecl;
    unmount: procedure(mount: PGMount; flags: TGMountUnmountFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    unmount_finish: function(mount: PGMount; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    eject: procedure(mount: PGMount; flags: TGMountUnmountFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    eject_finish: function(mount: PGMount; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    remount: procedure(mount: PGMount; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    remount_finish: function(mount: PGMount; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    guess_content_type: procedure(mount: PGMount; force_rescan: gboolean; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    guess_content_type_finish: function(mount: PGMount; result_: PGAsyncResult; error: PPGError): PPgchar; cdecl;
    guess_content_type_sync: function(mount: PGMount; force_rescan: gboolean; cancellable: PGCancellable; error: PPGError): PPgchar; cdecl;
    pre_unmount: procedure(mount: PGMount); cdecl;
    unmount_with_operation: procedure(mount: PGMount; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    unmount_with_operation_finish: function(mount: PGMount; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    eject_with_operation: procedure(mount: PGMount; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    eject_with_operation_finish: function(mount: PGMount; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    get_default_location: function(mount: PGMount): PGFile; cdecl;
    get_sort_key: function(mount: PGMount): Pgchar; cdecl;
    get_symbolic_icon: function(mount: PGMount): PGIcon; cdecl;
  end;

  TGMountOperationPrivate = record
  end;



  PPGMountOperationClass = ^PGMountOperationClass;
  PGMountOperationClass = ^TGMountOperationClass;
  TGMountOperationClass = object
    parent_class: TGObjectClass;
    ask_password: procedure(op: PGMountOperation; message: Pgchar; default_user: Pgchar; default_domain: Pgchar; flags: TGAskPasswordFlags); cdecl;
    ask_question: procedure(op: PGMountOperation; message: Pgchar; choices: Pgchar); cdecl;
    reply: procedure(op: PGMountOperation; result_: TGMountOperationResult); cdecl;
    aborted: procedure(op: PGMountOperation); cdecl;
    show_processes: procedure(op: PGMountOperation; message: Pgchar; processes: Pgpointer; choices: Pgchar); cdecl;
    show_unmount_progress: procedure(op: PGMountOperation; message: Pgchar; time_left: gint64; bytes_left: gint64); cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
    _g_reserved7: procedure; cdecl;
    _g_reserved8: procedure; cdecl;
    _g_reserved9: procedure; cdecl;
  end;

  PPGVolumeMonitor = ^PGVolumeMonitor;
  PGVolumeMonitor = ^TGVolumeMonitor;
  TGVolumeMonitor = object(TGObject)
    priv: gpointer;
  end;

  PPGNativeVolumeMonitor = ^PGNativeVolumeMonitor;
  PGNativeVolumeMonitor = ^TGNativeVolumeMonitor;
  TGNativeVolumeMonitor = object(TGVolumeMonitor)
  end;

  PPGVolumeMonitorClass = ^PGVolumeMonitorClass;
  PGVolumeMonitorClass = ^TGVolumeMonitorClass;
  TGVolumeMonitorClass = object
    parent_class: TGObjectClass;
    volume_added: procedure(volume_monitor: PGVolumeMonitor; volume: PGVolume); cdecl;
    volume_removed: procedure(volume_monitor: PGVolumeMonitor; volume: PGVolume); cdecl;
    volume_changed: procedure(volume_monitor: PGVolumeMonitor; volume: PGVolume); cdecl;
    mount_added: procedure(volume_monitor: PGVolumeMonitor; mount: PGMount); cdecl;
    mount_removed: procedure(volume_monitor: PGVolumeMonitor; mount: PGMount); cdecl;
    mount_pre_unmount: procedure(volume_monitor: PGVolumeMonitor; mount: PGMount); cdecl;
    mount_changed: procedure(volume_monitor: PGVolumeMonitor; mount: PGMount); cdecl;
    drive_connected: procedure(volume_monitor: PGVolumeMonitor; drive: PGDrive); cdecl;
    drive_disconnected: procedure(volume_monitor: PGVolumeMonitor; drive: PGDrive); cdecl;
    drive_changed: procedure(volume_monitor: PGVolumeMonitor; drive: PGDrive); cdecl;
    is_supported: function: gboolean; cdecl;
    get_connected_drives: function(volume_monitor: PGVolumeMonitor): PGList; cdecl;
    get_volumes: function(volume_monitor: PGVolumeMonitor): PGList; cdecl;
    get_mounts: function(volume_monitor: PGVolumeMonitor): PGList; cdecl;
    get_volume_for_uuid: function(volume_monitor: PGVolumeMonitor; uuid: Pgchar): PGVolume; cdecl;
    get_mount_for_uuid: function(volume_monitor: PGVolumeMonitor; uuid: Pgchar): PGMount; cdecl;
    adopt_orphan_mount: function(mount: PGMount; volume_monitor: PGVolumeMonitor): PGVolume; cdecl;
    drive_eject_button: procedure(volume_monitor: PGVolumeMonitor; drive: PGDrive); cdecl;
    drive_stop_button: procedure(volume_monitor: PGVolumeMonitor; drive: PGDrive); cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
  end;

  PPGNativeVolumeMonitorClass = ^PGNativeVolumeMonitorClass;
  PGNativeVolumeMonitorClass = ^TGNativeVolumeMonitorClass;
  TGNativeVolumeMonitorClass = object
    parent_class: TGVolumeMonitorClass;
    get_mount_for_mount_path: function(mount_path: Pgchar; cancellable: PGCancellable): PGMount; cdecl;
  end;

  PPGNetworkAddress = ^PGNetworkAddress;
  PGNetworkAddress = ^TGNetworkAddress;

  PPGNetworkAddressPrivate = ^PGNetworkAddressPrivate;
  PGNetworkAddressPrivate = ^TGNetworkAddressPrivate;
  TGNetworkAddress = object(TGObject)
    priv: PGNetworkAddressPrivate;
  end;

  TGNetworkAddressPrivate = record
  end;



  PPGNetworkAddressClass = ^PGNetworkAddressClass;
  PGNetworkAddressClass = ^TGNetworkAddressClass;
  TGNetworkAddressClass = object
    parent_class: TGObjectClass;
  end;

  PPGNetworkMonitor = ^PGNetworkMonitor;
  PGNetworkMonitor = ^TGNetworkMonitor;
  TGNetworkMonitor = object
    network_changed: procedure(available: gboolean); cdecl;
  end;

  PPGNetworkMonitorInterface = ^PGNetworkMonitorInterface;
  PGNetworkMonitorInterface = ^TGNetworkMonitorInterface;
  TGNetworkMonitorInterface = object
    g_iface: TGTypeInterface;
    network_changed: procedure(monitor: PGNetworkMonitor; available: gboolean); cdecl;
    can_reach: function(monitor: PGNetworkMonitor; connectable: PGSocketConnectable; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    can_reach_async: procedure(monitor: PGNetworkMonitor; connectable: PGSocketConnectable; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    can_reach_finish: function(monitor: PGNetworkMonitor; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
  end;

  PPGNetworkService = ^PGNetworkService;
  PGNetworkService = ^TGNetworkService;

  PPGNetworkServicePrivate = ^PGNetworkServicePrivate;
  PGNetworkServicePrivate = ^TGNetworkServicePrivate;
  TGNetworkService = object(TGObject)
    priv: PGNetworkServicePrivate;
  end;

  TGNetworkServicePrivate = record
  end;



  PPGNetworkServiceClass = ^PGNetworkServiceClass;
  PGNetworkServiceClass = ^TGNetworkServiceClass;
  TGNetworkServiceClass = object
    parent_class: TGObjectClass;
  end;

  TGOutputStreamPrivate = record
  end;



  PPGOutputVector = ^PGOutputVector;
  PGOutputVector = ^TGOutputVector;

  TGOutputVector = record
    buffer: Pgpointer;
    size: gsize;
  end;



  PPGPermission = ^PGPermission;
  PGPermission = ^TGPermission;

  PPGPermissionPrivate = ^PGPermissionPrivate;
  PGPermissionPrivate = ^TGPermissionPrivate;
  TGPermission = object(TGObject)
    priv: PGPermissionPrivate;
  end;

  TGPermissionPrivate = record
  end;



  PPGPermissionClass = ^PGPermissionClass;
  PGPermissionClass = ^TGPermissionClass;
  TGPermissionClass = object
    parent_class: TGObjectClass;
    acquire: function(permission: PGPermission; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    acquire_async: procedure(permission: PGPermission; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    acquire_finish: function(permission: PGPermission; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    release: function(permission: PGPermission; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    release_async: procedure(permission: PGPermission; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    release_finish: function(permission: PGPermission; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    reserved: array [0..15] of gpointer;
  end;

  PPGPollableInputStreamInterface = ^PGPollableInputStreamInterface;
  PGPollableInputStreamInterface = ^TGPollableInputStreamInterface;
  TGPollableInputStreamInterface = object
    g_iface: TGTypeInterface;
    can_poll: function(stream: PGPollableInputStream): gboolean; cdecl;
    is_readable: function(stream: PGPollableInputStream): gboolean; cdecl;
    create_source: function(stream: PGPollableInputStream; cancellable: PGCancellable): PGSource; cdecl;
    read_nonblocking: function(stream: PGPollableInputStream; buffer: Pgpointer; count: gsize; error: PPGError): gssize; cdecl;
  end;

  PPGPollableOutputStreamInterface = ^PGPollableOutputStreamInterface;
  PGPollableOutputStreamInterface = ^TGPollableOutputStreamInterface;
  TGPollableOutputStreamInterface = object
    g_iface: TGTypeInterface;
    can_poll: function(stream: PGPollableOutputStream): gboolean; cdecl;
    is_writable: function(stream: PGPollableOutputStream): gboolean; cdecl;
    create_source: function(stream: PGPollableOutputStream; cancellable: PGCancellable): PGSource; cdecl;
    write_nonblocking: function(stream: PGPollableOutputStream; buffer: Pguint8; count: gsize; error: PPGError): gssize; cdecl;
  end;
  TGPollableSourceFunc = function(pollable_stream: PGObject; user_data: gpointer): gboolean; cdecl;

  PPGProxy = ^PGProxy;
  PGProxy = ^TGProxy;

  PPGProxyAddress = ^PGProxyAddress;
  PGProxyAddress = ^TGProxyAddress;
  TGProxy = object
  end;

  PPGProxyAddressPrivate = ^PGProxyAddressPrivate;
  PGProxyAddressPrivate = ^TGProxyAddressPrivate;
  TGProxyAddress = object(TGInetSocketAddress)
    priv1: PGProxyAddressPrivate;
  end;

  TGProxyAddressPrivate = record
  end;



  PPGProxyAddressClass = ^PGProxyAddressClass;
  PGProxyAddressClass = ^TGProxyAddressClass;
  TGProxyAddressClass = object
    parent_class: TGInetSocketAddressClass;
  end;

  PPGProxyResolver = ^PGProxyResolver;
  PGProxyResolver = ^TGProxyResolver;
  TGProxyResolver = object
  end;
  TGSocketAddressEnumerator = object(TGObject)
  end;

  PPGProxyAddressEnumeratorPrivate = ^PGProxyAddressEnumeratorPrivate;
  PGProxyAddressEnumeratorPrivate = ^TGProxyAddressEnumeratorPrivate;

  TGProxyAddressEnumeratorPrivate = record
  end;



  PPGProxyAddressEnumerator = ^PGProxyAddressEnumerator;
  PGProxyAddressEnumerator = ^TGProxyAddressEnumerator;
  TGProxyAddressEnumerator = object(TGSocketAddressEnumerator)
    priv: PGProxyAddressEnumeratorPrivate;
  end;

  PPGSocketAddressEnumeratorClass = ^PGSocketAddressEnumeratorClass;
  PGSocketAddressEnumeratorClass = ^TGSocketAddressEnumeratorClass;
  TGSocketAddressEnumeratorClass = object
    parent_class: TGObjectClass;
    next: function(enumerator: PGSocketAddressEnumerator; cancellable: PGCancellable; error: PPGError): PGSocketAddress; cdecl;
    next_async: procedure(enumerator: PGSocketAddressEnumerator; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    next_finish: function(enumerator: PGSocketAddressEnumerator; result_: PGAsyncResult; error: PPGError): PGSocketAddress; cdecl;
  end;

  PPGProxyAddressEnumeratorClass = ^PGProxyAddressEnumeratorClass;
  PGProxyAddressEnumeratorClass = ^TGProxyAddressEnumeratorClass;
  TGProxyAddressEnumeratorClass = object
    parent_class: TGSocketAddressEnumeratorClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
    _g_reserved7: procedure; cdecl;
  end;

  PPGProxyInterface = ^PGProxyInterface;
  PGProxyInterface = ^TGProxyInterface;
  TGProxyInterface = object
    g_iface: TGTypeInterface;
    connect: function(proxy: PGProxy; connection: PGIOStream; proxy_address: PGProxyAddress; cancellable: PGCancellable; error: PPGError): PGIOStream; cdecl;
    connect_async: procedure(proxy: PGProxy; connection: PGIOStream; proxy_address: PGProxyAddress; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    connect_finish: function(proxy: PGProxy; result_: PGAsyncResult; error: PPGError): PGIOStream; cdecl;
    supports_hostname: function(proxy: PGProxy): gboolean; cdecl;
  end;

  PPGProxyResolverInterface = ^PGProxyResolverInterface;
  PGProxyResolverInterface = ^TGProxyResolverInterface;
  TGProxyResolverInterface = object
    g_iface: TGTypeInterface;
    is_supported: function(resolver: PGProxyResolver): gboolean; cdecl;
    lookup: function(resolver: PGProxyResolver; uri: Pgchar; cancellable: PGCancellable; error: PPGError): PPgchar; cdecl;
    lookup_async: procedure(resolver: PGProxyResolver; uri: Pgchar; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    lookup_finish: function(resolver: PGProxyResolver; result_: PGAsyncResult; error: PPGError): PPgchar; cdecl;
  end;

  PPGRemoteActionGroupInterface = ^PGRemoteActionGroupInterface;
  PGRemoteActionGroupInterface = ^TGRemoteActionGroupInterface;
  TGRemoteActionGroupInterface = object
    g_iface: TGTypeInterface;
    activate_action_full: procedure(remote: PGRemoteActionGroup; action_name: Pgchar; parameter: PGVariant; platform_data: PGVariant); cdecl;
    change_action_state_full: procedure(remote: PGRemoteActionGroup; action_name: Pgchar; value: PGVariant; platform_data: PGVariant); cdecl;
  end;

  PPGResolver = ^PGResolver;
  PGResolver = ^TGResolver;

  PPGResolverRecordType = ^PGResolverRecordType;
  PGResolverRecordType = ^TGResolverRecordType;

  PPGResolverPrivate = ^PGResolverPrivate;
  PGResolverPrivate = ^TGResolverPrivate;
  TGResolver = object(TGObject)
    priv: PGResolverPrivate;
  end;

  TGResolverPrivate = record
  end;



  PPGResolverClass = ^PGResolverClass;
  PGResolverClass = ^TGResolverClass;
  TGResolverClass = object
    parent_class: TGObjectClass;
    reload: procedure(resolver: PGResolver); cdecl;
    lookup_by_name: function(resolver: PGResolver; hostname: Pgchar; cancellable: PGCancellable; error: PPGError): PGList; cdecl;
    lookup_by_name_async: procedure(resolver: PGResolver; hostname: Pgchar; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    lookup_by_name_finish: function(resolver: PGResolver; result_: PGAsyncResult; error: PPGError): PGList; cdecl;
    lookup_by_address: function(resolver: PGResolver; address: PGInetAddress; cancellable: PGCancellable; error: PPGError): Pgchar; cdecl;
    lookup_by_address_async: procedure(resolver: PGResolver; address: PGInetAddress; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    lookup_by_address_finish: function(resolver: PGResolver; result_: PGAsyncResult; error: PPGError): Pgchar; cdecl;
    lookup_service: function(resolver: PGResolver; rrname: Pgchar; cancellable: PGCancellable; error: PPGError): PGList; cdecl;
    lookup_service_async: procedure(resolver: PGResolver; rrname: Pgchar; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    lookup_service_finish: function(resolver: PGResolver; result_: PGAsyncResult; error: PPGError): PGList; cdecl;
    lookup_records: function(resolver: PGResolver; rrname: Pgchar; record_type: TGResolverRecordType; cancellable: PGCancellable; error: PPGError): PGList; cdecl;
    lookup_records_async: procedure(resolver: PGResolver; rrname: Pgchar; record_type: TGResolverRecordType; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    lookup_records_finish: function(resolver: PGResolver; result_: PGAsyncResult; error: PPGError): PGList; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
  end;

  PPGResolverError = ^PGResolverError;
  PGResolverError = ^TGResolverError;

  PPGResource = ^PGResource;
  PGResource = ^TGResource;

  PPGResourceLookupFlags = ^PGResourceLookupFlags;
  PGResourceLookupFlags = ^TGResourceLookupFlags;
  TGResource = object
  end;

  PPGResourceError = ^PGResourceError;
  PGResourceError = ^TGResourceError;

  PPGResourceFlags = ^PGResourceFlags;
  PGResourceFlags = ^TGResourceFlags;

  PPGSeekableIface = ^PGSeekableIface;
  PGSeekableIface = ^TGSeekableIface;
  TGSeekableIface = object
    g_iface: TGTypeInterface;
    tell: function(seekable: PGSeekable): gint64; cdecl;
    can_seek: function(seekable: PGSeekable): gboolean; cdecl;
    seek: function(seekable: PGSeekable; offset: gint64; type_: TGSeekType; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    can_truncate: function(seekable: PGSeekable): gboolean; cdecl;
    truncate_fn: function(seekable: PGSeekable; offset: gint64; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
  end;

  PPGSettings = ^PGSettings;
  PGSettings = ^TGSettings;

  PPGSettingsSchema = ^PGSettingsSchema;
  PGSettingsSchema = ^TGSettingsSchema;

  PPGSettingsBackend = ^PGSettingsBackend;
  PGSettingsBackend = ^TGSettingsBackend;

  PPGSettingsBindFlags = ^PGSettingsBindFlags;
  PGSettingsBindFlags = ^TGSettingsBindFlags;

  PPGSettingsBindGetMapping = ^PGSettingsBindGetMapping;
  PGSettingsBindGetMapping = ^TGSettingsBindGetMapping;
  TGSettingsBindGetMapping = function(value: PGValue; variant: PGVariant; user_data: gpointer): gboolean; cdecl;

  PPGSettingsBindSetMapping = ^PGSettingsBindSetMapping;
  PGSettingsBindSetMapping = ^TGSettingsBindSetMapping;
  TGSettingsBindSetMapping = function(value: PGValue; expected_type: PGVariantType; user_data: gpointer): PGVariant; cdecl;

  PPGSettingsGetMapping = ^PGSettingsGetMapping;
  PGSettingsGetMapping = ^TGSettingsGetMapping;
  TGSettingsGetMapping = function(value: PGVariant; result_: Pgpointer; user_data: gpointer): gboolean; cdecl;

  PPGSettingsPrivate = ^PGSettingsPrivate;
  PGSettingsPrivate = ^TGSettingsPrivate;
  TGSettings = object(TGObject)
    priv: PGSettingsPrivate;
  end;
  TGSettingsSchema = object
  end;

  TGSettingsBackend = record
  end;



  TGSettingsPrivate = record
  end;



  PPGSettingsClass = ^PGSettingsClass;
  PGSettingsClass = ^TGSettingsClass;
  TGSettingsClass = object
    parent_class: TGObjectClass;
    writable_changed: procedure(settings: PGSettings; key: Pgchar); cdecl;
    changed: procedure(settings: PGSettings; key: Pgchar); cdecl;
    writable_change_event: function(settings: PGSettings; key: TGQuark): gboolean; cdecl;
    change_event: function(settings: PGSettings; keys: PGQuark; n_keys: gint): gboolean; cdecl;
    padding: array [0..19] of gpointer;
  end;

  PPGSettingsSchemaSource = ^PGSettingsSchemaSource;
  PGSettingsSchemaSource = ^TGSettingsSchemaSource;
  TGSettingsSchemaSource = object
  end;

  PPGSimpleActionGroup = ^PGSimpleActionGroup;
  PGSimpleActionGroup = ^TGSimpleActionGroup;

  PPGSimpleActionGroupPrivate = ^PGSimpleActionGroupPrivate;
  PGSimpleActionGroupPrivate = ^TGSimpleActionGroupPrivate;
  TGSimpleActionGroup = object(TGObject)
    priv: PGSimpleActionGroupPrivate;
  end;

  TGSimpleActionGroupPrivate = record
  end;



  PPGSimpleActionGroupClass = ^PGSimpleActionGroupClass;
  PGSimpleActionGroupClass = ^TGSimpleActionGroupClass;
  TGSimpleActionGroupClass = object
    parent_class: TGObjectClass;
    padding: array [0..11] of gpointer;
  end;

  PPGSimpleAsyncResult = ^PGSimpleAsyncResult;
  PGSimpleAsyncResult = ^TGSimpleAsyncResult;

  PPGSimpleAsyncThreadFunc = ^PGSimpleAsyncThreadFunc;
  PGSimpleAsyncThreadFunc = ^TGSimpleAsyncThreadFunc;
  TGSimpleAsyncThreadFunc = procedure(res: PGSimpleAsyncResult; object_: PGObject; cancellable: PGCancellable); cdecl;
  TGSimpleAsyncResult = object(TGObject)
  end;

  PPGSimpleAsyncResultClass = ^PGSimpleAsyncResultClass;
  PGSimpleAsyncResultClass = ^TGSimpleAsyncResultClass;
  TGSimpleAsyncResultClass = object
  end;

  PPGSimplePermission = ^PGSimplePermission;
  PGSimplePermission = ^TGSimplePermission;
  TGSimplePermission = object(TGPermission)
  end;

  PPGSimpleProxyResolver = ^PGSimpleProxyResolver;
  PGSimpleProxyResolver = ^TGSimpleProxyResolver;

  PPGSimpleProxyResolverPrivate = ^PGSimpleProxyResolverPrivate;
  PGSimpleProxyResolverPrivate = ^TGSimpleProxyResolverPrivate;
  TGSimpleProxyResolver = object(TGObject)
    priv: PGSimpleProxyResolverPrivate;
  end;

  TGSimpleProxyResolverPrivate = record
  end;



  PPGSimpleProxyResolverClass = ^PGSimpleProxyResolverClass;
  PGSimpleProxyResolverClass = ^TGSimpleProxyResolverClass;
  TGSimpleProxyResolverClass = object
    parent_class: TGObjectClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGSocket = ^PGSocket;
  PGSocket = ^TGSocket;

  PPGSocketType = ^PGSocketType;
  PGSocketType = ^TGSocketType;

  PPGSocketProtocol = ^PGSocketProtocol;
  PGSocketProtocol = ^TGSocketProtocol;

  PPGSocketConnection = ^PGSocketConnection;
  PGSocketConnection = ^TGSocketConnection;

  PPPGSocketControlMessage = ^PPGSocketControlMessage;
  PPGSocketControlMessage = ^PGSocketControlMessage;
  PGSocketControlMessage = ^TGSocketControlMessage;

  PPGSocketPrivate = ^PGSocketPrivate;
  PGSocketPrivate = ^TGSocketPrivate;
  TGSocket = object(TGObject)
    priv: PGSocketPrivate;
  end;

  PPGSocketConnectionPrivate = ^PGSocketConnectionPrivate;
  PGSocketConnectionPrivate = ^TGSocketConnectionPrivate;
  TGSocketConnection = object(TGIOStream)
    priv1: PGSocketConnectionPrivate;
  end;

  PPGSocketControlMessagePrivate = ^PGSocketControlMessagePrivate;
  PGSocketControlMessagePrivate = ^TGSocketControlMessagePrivate;
  TGSocketControlMessage = object(TGObject)
    priv: PGSocketControlMessagePrivate;
  end;

  TGSocketPrivate = record
  end;



  PPGSocketClass = ^PGSocketClass;
  PGSocketClass = ^TGSocketClass;
  TGSocketClass = object
    parent_class: TGObjectClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
    _g_reserved7: procedure; cdecl;
    _g_reserved8: procedure; cdecl;
    _g_reserved9: procedure; cdecl;
    _g_reserved10: procedure; cdecl;
  end;

  PPGSocketClient = ^PGSocketClient;
  PGSocketClient = ^TGSocketClient;

  PPGTlsCertificateFlags = ^PGTlsCertificateFlags;
  PGTlsCertificateFlags = ^TGTlsCertificateFlags;

  PPGSocketClientPrivate = ^PGSocketClientPrivate;
  PGSocketClientPrivate = ^TGSocketClientPrivate;
  TGSocketClient = object(TGObject)
    priv: PGSocketClientPrivate;
  end;

  PPGSocketClientEvent = ^PGSocketClientEvent;
  PGSocketClientEvent = ^TGSocketClientEvent;

  TGSocketClientPrivate = record
  end;



  PPGSocketClientClass = ^PGSocketClientClass;
  PGSocketClientClass = ^TGSocketClientClass;
  TGSocketClientClass = object
    parent_class: TGObjectClass;
    event: procedure(client: PGSocketClient; event: TGSocketClientEvent; connectable: PGSocketConnectable; connection: PGIOStream); cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
  end;

  PPGSocketConnectableIface = ^PGSocketConnectableIface;
  PGSocketConnectableIface = ^TGSocketConnectableIface;
  TGSocketConnectableIface = object
    g_iface: TGTypeInterface;
    enumerate: function(connectable: PGSocketConnectable): PGSocketAddressEnumerator; cdecl;
    proxy_enumerate: function(connectable: PGSocketConnectable): PGSocketAddressEnumerator; cdecl;
  end;

  TGSocketConnectionPrivate = record
  end;



  PPGSocketConnectionClass = ^PGSocketConnectionClass;
  PGSocketConnectionClass = ^TGSocketConnectionClass;
  TGSocketConnectionClass = object
    parent_class: TGIOStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
  end;

  TGSocketControlMessagePrivate = record
  end;



  PPGSocketControlMessageClass = ^PGSocketControlMessageClass;
  PGSocketControlMessageClass = ^TGSocketControlMessageClass;
  TGSocketControlMessageClass = object
    parent_class: TGObjectClass;
    get_size: function(message: PGSocketControlMessage): gsize; cdecl;
    get_level: function(message: PGSocketControlMessage): gint; cdecl;
    get_type: function(message: PGSocketControlMessage): gint; cdecl;
    serialize: procedure(message: PGSocketControlMessage; data: gpointer); cdecl;
    deserialize: function(level: gint; type_: gint; size: gsize; data: gpointer): PGSocketControlMessage; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGSocketListener = ^PGSocketListener;
  PGSocketListener = ^TGSocketListener;

  PPGSocketListenerPrivate = ^PGSocketListenerPrivate;
  PGSocketListenerPrivate = ^TGSocketListenerPrivate;
  TGSocketListener = object(TGObject)
    priv: PGSocketListenerPrivate;
  end;

  TGSocketListenerPrivate = record
  end;



  PPGSocketListenerClass = ^PGSocketListenerClass;
  PGSocketListenerClass = ^TGSocketListenerClass;
  TGSocketListenerClass = object
    parent_class: TGObjectClass;
    changed: procedure(listener: PGSocketListener); cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
  end;

  PPGSocketMsgFlags = ^PGSocketMsgFlags;
  PGSocketMsgFlags = ^TGSocketMsgFlags;

  PPGSocketService = ^PGSocketService;
  PGSocketService = ^TGSocketService;

  PPGSocketServicePrivate = ^PGSocketServicePrivate;
  PGSocketServicePrivate = ^TGSocketServicePrivate;
  TGSocketService = object(TGSocketListener)
    priv1: PGSocketServicePrivate;
  end;

  TGSocketServicePrivate = record
  end;



  PPGSocketServiceClass = ^PGSocketServiceClass;
  PGSocketServiceClass = ^TGSocketServiceClass;
  TGSocketServiceClass = object
    parent_class: TGSocketListenerClass;
    incoming: function(service: PGSocketService; connection: PGSocketConnection; source_object: PGObject): gboolean; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
  end;
  TGSocketSourceFunc = function(socket: PGSocket; condition: TGIOCondition; user_data: gpointer): gboolean; cdecl;

  PPGSrvTarget = ^PGSrvTarget;
  PGSrvTarget = ^TGSrvTarget;
  TGSrvTarget = object
  end;

  PPGStaticResource = ^PGStaticResource;
  PGStaticResource = ^TGStaticResource;
  TGStaticResource = object
    data: Pguint8;
    data_len: gsize;
    resource: PGResource;
    next: PGStaticResource;
    padding: gpointer;
  end;

  PPGTask = ^PGTask;
  PGTask = ^TGTask;

  PPGTaskThreadFunc = ^PGTaskThreadFunc;
  PGTaskThreadFunc = ^TGTaskThreadFunc;
  TGTaskThreadFunc = procedure(task: PGTask; source_object: PGObject; task_data: gpointer; cancellable: PGCancellable); cdecl;
  TGTask = object(TGObject)
  end;

  PPGTaskClass = ^PGTaskClass;
  PGTaskClass = ^TGTaskClass;
  TGTaskClass = object
  end;

  PPGTcpConnection = ^PGTcpConnection;
  PGTcpConnection = ^TGTcpConnection;

  PPGTcpConnectionPrivate = ^PGTcpConnectionPrivate;
  PGTcpConnectionPrivate = ^TGTcpConnectionPrivate;
  TGTcpConnection = object(TGSocketConnection)
    priv2: PGTcpConnectionPrivate;
  end;

  TGTcpConnectionPrivate = record
  end;



  PPGTcpConnectionClass = ^PGTcpConnectionClass;
  PGTcpConnectionClass = ^TGTcpConnectionClass;
  TGTcpConnectionClass = object
    parent_class: TGSocketConnectionClass;
  end;

  PPGTcpWrapperConnection = ^PGTcpWrapperConnection;
  PGTcpWrapperConnection = ^TGTcpWrapperConnection;

  PPGTcpWrapperConnectionPrivate = ^PGTcpWrapperConnectionPrivate;
  PGTcpWrapperConnectionPrivate = ^TGTcpWrapperConnectionPrivate;
  TGTcpWrapperConnection = object(TGTcpConnection)
    priv3: PGTcpWrapperConnectionPrivate;
  end;

  TGTcpWrapperConnectionPrivate = record
  end;



  PPGTcpWrapperConnectionClass = ^PGTcpWrapperConnectionClass;
  PGTcpWrapperConnectionClass = ^TGTcpWrapperConnectionClass;
  TGTcpWrapperConnectionClass = object
    parent_class: TGTcpConnectionClass;
  end;

  PPGTestDBus = ^PGTestDBus;
  PGTestDBus = ^TGTestDBus;

  PPGTestDBusFlags = ^PGTestDBusFlags;
  PGTestDBusFlags = ^TGTestDBusFlags;
  TGTestDBus = object(TGObject)
  end;

  PPGThemedIcon = ^PGThemedIcon;
  PGThemedIcon = ^TGThemedIcon;
  TGThemedIcon = object(TGObject)
  end;

  PPGThemedIconClass = ^PGThemedIconClass;
  PGThemedIconClass = ^TGThemedIconClass;
  TGThemedIconClass = object
  end;

  PPGThreadedSocketService = ^PGThreadedSocketService;
  PGThreadedSocketService = ^TGThreadedSocketService;

  PPGThreadedSocketServicePrivate = ^PGThreadedSocketServicePrivate;
  PGThreadedSocketServicePrivate = ^TGThreadedSocketServicePrivate;
  TGThreadedSocketService = object(TGSocketService)
    priv2: PGThreadedSocketServicePrivate;
  end;

  TGThreadedSocketServicePrivate = record
  end;



  PPGThreadedSocketServiceClass = ^PGThreadedSocketServiceClass;
  PGThreadedSocketServiceClass = ^TGThreadedSocketServiceClass;
  TGThreadedSocketServiceClass = object
    parent_class: TGSocketServiceClass;
    run: function(service: PGThreadedSocketService; connection: PGSocketConnection; source_object: PGObject): gboolean; cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGTlsAuthenticationMode = ^PGTlsAuthenticationMode;
  PGTlsAuthenticationMode = ^TGTlsAuthenticationMode;

  PPGTlsBackend = ^PGTlsBackend;
  PGTlsBackend = ^TGTlsBackend;

  PPGTlsDatabase = ^PGTlsDatabase;
  PGTlsDatabase = ^TGTlsDatabase;
  TGTlsBackend = object
  end;

  PPGTlsCertificate = ^PGTlsCertificate;
  PGTlsCertificate = ^TGTlsCertificate;

  PPGTlsInteraction = ^PGTlsInteraction;
  PGTlsInteraction = ^TGTlsInteraction;

  PPGTlsDatabaseLookupFlags = ^PGTlsDatabaseLookupFlags;
  PGTlsDatabaseLookupFlags = ^TGTlsDatabaseLookupFlags;

  PPGTlsDatabaseVerifyFlags = ^PGTlsDatabaseVerifyFlags;
  PGTlsDatabaseVerifyFlags = ^TGTlsDatabaseVerifyFlags;

  PPGTlsDatabasePrivate = ^PGTlsDatabasePrivate;
  PGTlsDatabasePrivate = ^TGTlsDatabasePrivate;
  TGTlsDatabase = object(TGObject)
    priv: PGTlsDatabasePrivate;
  end;

  PPGTlsBackendInterface = ^PGTlsBackendInterface;
  PGTlsBackendInterface = ^TGTlsBackendInterface;
  TGTlsBackendInterface = object
    g_iface: TGTypeInterface;
    supports_tls: function(backend: PGTlsBackend): gboolean; cdecl;
    get_certificate_type: function: TGType; cdecl;
    get_client_connection_type: function: TGType; cdecl;
    get_server_connection_type: function: TGType; cdecl;
    get_file_database_type: function: TGType; cdecl;
    get_default_database: function(backend: PGTlsBackend): PGTlsDatabase; cdecl;
  end;

  PPGTlsCertificatePrivate = ^PGTlsCertificatePrivate;
  PGTlsCertificatePrivate = ^TGTlsCertificatePrivate;
  TGTlsCertificate = object(TGObject)
    priv: PGTlsCertificatePrivate;
  end;

  TGTlsCertificatePrivate = record
  end;



  PPGTlsCertificateClass = ^PGTlsCertificateClass;
  PGTlsCertificateClass = ^TGTlsCertificateClass;
  TGTlsCertificateClass = object
    parent_class: TGObjectClass;
    verify: function(cert: PGTlsCertificate; identity: PGSocketConnectable; trusted_ca: PGTlsCertificate): TGTlsCertificateFlags; cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGTlsClientConnection = ^PGTlsClientConnection;
  PGTlsClientConnection = ^TGTlsClientConnection;
  TGTlsClientConnection = object
  end;

  PPGTlsClientConnectionInterface = ^PGTlsClientConnectionInterface;
  PGTlsClientConnectionInterface = ^TGTlsClientConnectionInterface;
  TGTlsClientConnectionInterface = object
    g_iface: TGTypeInterface;
  end;

  PPGTlsConnection = ^PGTlsConnection;
  PGTlsConnection = ^TGTlsConnection;

  PPGTlsRehandshakeMode = ^PGTlsRehandshakeMode;
  PGTlsRehandshakeMode = ^TGTlsRehandshakeMode;

  PPGTlsConnectionPrivate = ^PGTlsConnectionPrivate;
  PGTlsConnectionPrivate = ^TGTlsConnectionPrivate;
  TGTlsConnection = object(TGIOStream)
    priv1: PGTlsConnectionPrivate;
  end;

  PPGTlsInteractionResult = ^PGTlsInteractionResult;
  PGTlsInteractionResult = ^TGTlsInteractionResult;

  PPGTlsPassword = ^PGTlsPassword;
  PGTlsPassword = ^TGTlsPassword;

  PPGTlsInteractionPrivate = ^PGTlsInteractionPrivate;
  PGTlsInteractionPrivate = ^TGTlsInteractionPrivate;
  TGTlsInteraction = object(TGObject)
    priv: PGTlsInteractionPrivate;
  end;

  TGTlsConnectionPrivate = record
  end;



  PPGTlsConnectionClass = ^PGTlsConnectionClass;
  PGTlsConnectionClass = ^TGTlsConnectionClass;
  TGTlsConnectionClass = object
    parent_class: TGIOStreamClass;
    accept_certificate: function(connection: PGTlsConnection; peer_cert: PGTlsCertificate; errors: TGTlsCertificateFlags): gboolean; cdecl;
    handshake: function(conn: PGTlsConnection; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    handshake_async: procedure(conn: PGTlsConnection; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    handshake_finish: function(conn: PGTlsConnection; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    padding: array [0..7] of gpointer;
  end;

  TGTlsDatabasePrivate = record
  end;



  PPGTlsDatabaseClass = ^PGTlsDatabaseClass;
  PGTlsDatabaseClass = ^TGTlsDatabaseClass;
  TGTlsDatabaseClass = object
    parent_class: TGObjectClass;
    verify_chain: function(self: PGTlsDatabase; chain: PGTlsCertificate; purpose: Pgchar; identity: PGSocketConnectable; interaction: PGTlsInteraction; flags: TGTlsDatabaseVerifyFlags; cancellable: PGCancellable; error: PPGError): TGTlsCertificateFlags; cdecl;
    verify_chain_async: procedure(self: PGTlsDatabase; chain: PGTlsCertificate; purpose: Pgchar; identity: PGSocketConnectable; interaction: PGTlsInteraction; flags: TGTlsDatabaseVerifyFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    verify_chain_finish: function(self: PGTlsDatabase; result_: PGAsyncResult; error: PPGError): TGTlsCertificateFlags; cdecl;
    create_certificate_handle: function(self: PGTlsDatabase; certificate: PGTlsCertificate): Pgchar; cdecl;
    lookup_certificate_for_handle: function(self: PGTlsDatabase; handle: Pgchar; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; error: PPGError): PGTlsCertificate; cdecl;
    lookup_certificate_for_handle_async: procedure(self: PGTlsDatabase; handle: Pgchar; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    lookup_certificate_for_handle_finish: function(self: PGTlsDatabase; result_: PGAsyncResult; error: PPGError): PGTlsCertificate; cdecl;
    lookup_certificate_issuer: function(self: PGTlsDatabase; certificate: PGTlsCertificate; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; error: PPGError): PGTlsCertificate; cdecl;
    lookup_certificate_issuer_async: procedure(self: PGTlsDatabase; certificate: PGTlsCertificate; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    lookup_certificate_issuer_finish: function(self: PGTlsDatabase; result_: PGAsyncResult; error: PPGError): PGTlsCertificate; cdecl;
    lookup_certificates_issued_by: function(self: PGTlsDatabase; issuer_raw_dn: Pguint8; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; error: PPGError): PGList; cdecl;
    lookup_certificates_issued_by_async: procedure(self: PGTlsDatabase; issuer_raw_dn: Pguint8; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    lookup_certificates_issued_by_finish: function(self: PGTlsDatabase; result_: PGAsyncResult; error: PPGError): PGList; cdecl;
    padding: array [0..15] of gpointer;
  end;

  PPGTlsError = ^PGTlsError;
  PGTlsError = ^TGTlsError;

  PPGTlsFileDatabase = ^PGTlsFileDatabase;
  PGTlsFileDatabase = ^TGTlsFileDatabase;
  TGTlsFileDatabase = object
  end;

  PPGTlsFileDatabaseInterface = ^PGTlsFileDatabaseInterface;
  PGTlsFileDatabaseInterface = ^TGTlsFileDatabaseInterface;
  TGTlsFileDatabaseInterface = object
    g_iface: TGTypeInterface;
    padding: array [0..7] of gpointer;
  end;

  PPGTlsPasswordFlags = ^PGTlsPasswordFlags;
  PGTlsPasswordFlags = ^TGTlsPasswordFlags;

  PPGTlsPasswordPrivate = ^PGTlsPasswordPrivate;
  PGTlsPasswordPrivate = ^TGTlsPasswordPrivate;
  TGTlsPassword = object(TGObject)
    priv: PGTlsPasswordPrivate;
  end;

  TGTlsInteractionPrivate = record
  end;



  PPGTlsInteractionClass = ^PGTlsInteractionClass;
  PGTlsInteractionClass = ^TGTlsInteractionClass;
  TGTlsInteractionClass = object
    parent_class: TGObjectClass;
    ask_password: function(interaction: PGTlsInteraction; password: PGTlsPassword; cancellable: PGCancellable; error: PPGError): TGTlsInteractionResult; cdecl;
    ask_password_async: procedure(interaction: PGTlsInteraction; password: PGTlsPassword; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    ask_password_finish: function(interaction: PGTlsInteraction; result_: PGAsyncResult; error: PPGError): TGTlsInteractionResult; cdecl;
    padding: array [0..23] of gpointer;
  end;

  TGTlsPasswordPrivate = record
  end;



  PPGTlsPasswordClass = ^PGTlsPasswordClass;
  PGTlsPasswordClass = ^TGTlsPasswordClass;
  TGTlsPasswordClass = object
    parent_class: TGObjectClass;
    get_value: function(password: PGTlsPassword; length: Pgsize): Pguint8; cdecl;
    set_value: procedure(password: PGTlsPassword; value: Pguint8; length: gssize; destroy_: TGDestroyNotify); cdecl;
    get_default_warning: function(password: PGTlsPassword): Pgchar; cdecl;
    padding: array [0..3] of gpointer;
  end;

  PPGTlsServerConnection = ^PGTlsServerConnection;
  PGTlsServerConnection = ^TGTlsServerConnection;
  TGTlsServerConnection = object
  end;

  PPGTlsServerConnectionInterface = ^PGTlsServerConnectionInterface;
  PGTlsServerConnectionInterface = ^TGTlsServerConnectionInterface;
  TGTlsServerConnectionInterface = object
    g_iface: TGTypeInterface;
  end;

  PPGUnixConnection = ^PGUnixConnection;
  PGUnixConnection = ^TGUnixConnection;

  PPGUnixConnectionPrivate = ^PGUnixConnectionPrivate;
  PGUnixConnectionPrivate = ^TGUnixConnectionPrivate;
  TGUnixConnection = object(TGSocketConnection)
    priv2: PGUnixConnectionPrivate;
  end;

  TGUnixConnectionPrivate = record
  end;



  PPGUnixConnectionClass = ^PGUnixConnectionClass;
  PGUnixConnectionClass = ^TGUnixConnectionClass;
  TGUnixConnectionClass = object
    parent_class: TGSocketConnectionClass;
  end;

  PPGUnixCredentialsMessage = ^PGUnixCredentialsMessage;
  PGUnixCredentialsMessage = ^TGUnixCredentialsMessage;

  PPGUnixCredentialsMessagePrivate = ^PGUnixCredentialsMessagePrivate;
  PGUnixCredentialsMessagePrivate = ^TGUnixCredentialsMessagePrivate;
  TGUnixCredentialsMessage = object(TGSocketControlMessage)
    priv1: PGUnixCredentialsMessagePrivate;
  end;

  TGUnixCredentialsMessagePrivate = record
  end;



  PPGUnixCredentialsMessageClass = ^PGUnixCredentialsMessageClass;
  PGUnixCredentialsMessageClass = ^TGUnixCredentialsMessageClass;
  TGUnixCredentialsMessageClass = object
    parent_class: TGSocketControlMessageClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
  end;

  TGUnixFDListPrivate = record
  end;



  PPGUnixFDListClass = ^PGUnixFDListClass;
  PGUnixFDListClass = ^TGUnixFDListClass;
  TGUnixFDListClass = object
    parent_class: TGObjectClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGUnixFDMessage = ^PGUnixFDMessage;
  PGUnixFDMessage = ^TGUnixFDMessage;

  PPGUnixFDMessagePrivate = ^PGUnixFDMessagePrivate;
  PGUnixFDMessagePrivate = ^TGUnixFDMessagePrivate;
  TGUnixFDMessage = object(TGSocketControlMessage)
    priv1: PGUnixFDMessagePrivate;
  end;

  TGUnixFDMessagePrivate = record
  end;



  PPGUnixFDMessageClass = ^PGUnixFDMessageClass;
  PGUnixFDMessageClass = ^TGUnixFDMessageClass;
  TGUnixFDMessageClass = object
    parent_class: TGSocketControlMessageClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
  end;

  PPGUnixInputStream = ^PGUnixInputStream;
  PGUnixInputStream = ^TGUnixInputStream;

  PPGUnixInputStreamPrivate = ^PGUnixInputStreamPrivate;
  PGUnixInputStreamPrivate = ^TGUnixInputStreamPrivate;
  TGUnixInputStream = object(TGInputStream)
    priv1: PGUnixInputStreamPrivate;
  end;

  TGUnixInputStreamPrivate = record
  end;



  PPGUnixInputStreamClass = ^PGUnixInputStreamClass;
  PGUnixInputStreamClass = ^TGUnixInputStreamClass;
  TGUnixInputStreamClass = object
    parent_class: TGInputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGUnixMountEntry = ^PGUnixMountEntry;
  PGUnixMountEntry = ^TGUnixMountEntry;

  TGUnixMountEntry = record
  end;



  PPGUnixMountMonitor = ^PGUnixMountMonitor;
  PGUnixMountMonitor = ^TGUnixMountMonitor;
  TGUnixMountMonitor = object(TGObject)
  end;

  PPGUnixMountMonitorClass = ^PGUnixMountMonitorClass;
  PGUnixMountMonitorClass = ^TGUnixMountMonitorClass;
  TGUnixMountMonitorClass = object
  end;

  PPGUnixMountPoint = ^PGUnixMountPoint;
  PGUnixMountPoint = ^TGUnixMountPoint;
  TGUnixMountPoint = object
  end;

  PPGUnixOutputStream = ^PGUnixOutputStream;
  PGUnixOutputStream = ^TGUnixOutputStream;

  PPGUnixOutputStreamPrivate = ^PGUnixOutputStreamPrivate;
  PGUnixOutputStreamPrivate = ^TGUnixOutputStreamPrivate;
  TGUnixOutputStream = object(TGOutputStream)
    priv1: PGUnixOutputStreamPrivate;
  end;

  TGUnixOutputStreamPrivate = record
  end;



  PPGUnixOutputStreamClass = ^PGUnixOutputStreamClass;
  PGUnixOutputStreamClass = ^TGUnixOutputStreamClass;
  TGUnixOutputStreamClass = object
    parent_class: TGOutputStreamClass;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
  end;

  PPGUnixSocketAddressType = ^PGUnixSocketAddressType;
  PGUnixSocketAddressType = ^TGUnixSocketAddressType;

  PPGUnixSocketAddress = ^PGUnixSocketAddress;
  PGUnixSocketAddress = ^TGUnixSocketAddress;

  PPGUnixSocketAddressPrivate = ^PGUnixSocketAddressPrivate;
  PGUnixSocketAddressPrivate = ^TGUnixSocketAddressPrivate;
  TGUnixSocketAddress = object(TGSocketAddress)
    priv: PGUnixSocketAddressPrivate;
  end;

  TGUnixSocketAddressPrivate = record
  end;



  PPGUnixSocketAddressClass = ^PGUnixSocketAddressClass;
  PGUnixSocketAddressClass = ^TGUnixSocketAddressClass;
  TGUnixSocketAddressClass = object
    parent_class: TGSocketAddressClass;
  end;

  PPGVfs = ^PGVfs;
  PGVfs = ^TGVfs;
  TGVfs = object(TGObject)
  end;

  PPGVfsClass = ^PGVfsClass;
  PGVfsClass = ^TGVfsClass;
  TGVfsClass = object
    parent_class: TGObjectClass;
    is_active: function(vfs: PGVfs): gboolean; cdecl;
    get_file_for_path: function(vfs: PGVfs; path: Pgchar): PGFile; cdecl;
    get_file_for_uri: function(vfs: PGVfs; uri: Pgchar): PGFile; cdecl;
    get_supported_uri_schemes: function(vfs: PGVfs): PPgchar; cdecl;
    parse_name: function(vfs: PGVfs; parse_name: Pgchar): PGFile; cdecl;
    local_file_add_info: procedure(vfs: PGVfs; filename: Pgchar; device: guint64; attribute_matcher: PGFileAttributeMatcher; info: PGFileInfo; cancellable: PGCancellable; extra_data: Pgpointer; free_extra_data: PGDestroyNotify); cdecl;
    add_writable_namespaces: procedure(vfs: PGVfs; list: PGFileAttributeInfoList); cdecl;
    local_file_set_attributes: function(vfs: PGVfs; filename: Pgchar; info: PGFileInfo; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
    local_file_removed: procedure(vfs: PGVfs; filename: Pgchar); cdecl;
    local_file_moved: procedure(vfs: PGVfs; source: Pgchar; dest: Pgchar); cdecl;
    _g_reserved1: procedure; cdecl;
    _g_reserved2: procedure; cdecl;
    _g_reserved3: procedure; cdecl;
    _g_reserved4: procedure; cdecl;
    _g_reserved5: procedure; cdecl;
    _g_reserved6: procedure; cdecl;
    _g_reserved7: procedure; cdecl;
  end;

  PPGVolumeIface = ^PGVolumeIface;
  PGVolumeIface = ^TGVolumeIface;
  TGVolumeIface = object
    g_iface: TGTypeInterface;
    changed: procedure(volume: PGVolume); cdecl;
    removed: procedure(volume: PGVolume); cdecl;
    get_name: function(volume: PGVolume): Pgchar; cdecl;
    get_icon: function(volume: PGVolume): PGIcon; cdecl;
    get_uuid: function(volume: PGVolume): Pgchar; cdecl;
    get_drive: function(volume: PGVolume): PGDrive; cdecl;
    get_mount: function(volume: PGVolume): PGMount; cdecl;
    can_mount: function(volume: PGVolume): gboolean; cdecl;
    can_eject: function(volume: PGVolume): gboolean; cdecl;
    mount_fn: procedure(volume: PGVolume; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    mount_finish: function(volume: PGVolume; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    eject: procedure(volume: PGVolume; flags: TGMountUnmountFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    eject_finish: function(volume: PGVolume; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    get_identifier: function(volume: PGVolume; kind: Pgchar): Pgchar; cdecl;
    enumerate_identifiers: function(volume: PGVolume): PPgchar; cdecl;
    should_automount: function(volume: PGVolume): gboolean; cdecl;
    get_activation_root: function(volume: PGVolume): PGFile; cdecl;
    eject_with_operation: procedure(volume: PGVolume; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    eject_with_operation_finish: function(volume: PGVolume; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    get_sort_key: function(volume: PGVolume): Pgchar; cdecl;
    get_symbolic_icon: function(volume: PGVolume): PGIcon; cdecl;
  end;

  PPGZlibCompressor = ^PGZlibCompressor;
  PGZlibCompressor = ^TGZlibCompressor;

  PPGZlibCompressorFormat = ^PGZlibCompressorFormat;
  PGZlibCompressorFormat = ^TGZlibCompressorFormat;
  TGZlibCompressor = object(TGObject)
  end;

  PPGZlibCompressorClass = ^PGZlibCompressorClass;
  PGZlibCompressorClass = ^TGZlibCompressorClass;
  TGZlibCompressorClass = object
    parent_class: TGObjectClass;
  end;

  PPGZlibDecompressor = ^PGZlibDecompressor;
  PGZlibDecompressor = ^TGZlibDecompressor;
  TGZlibDecompressor = object(TGObject)
  end;

  PPGZlibDecompressorClass = ^PGZlibDecompressorClass;
  PGZlibDecompressorClass = ^TGZlibDecompressorClass;
  TGZlibDecompressorClass = object
    parent_class: TGObjectClass;
  end;

var
g_action_activate: procedure(action: PGAction; parameter: PGVariant); cdecl;
g_action_change_state: procedure(action: PGAction; value: PGVariant); cdecl;
g_action_get_enabled: function(action: PGAction): gboolean; cdecl;
g_action_get_name: function(action: PGAction): Pgchar; cdecl;
g_action_get_parameter_type: function(action: PGAction): PGVariantType; cdecl;
g_action_get_state: function(action: PGAction): PGVariant; cdecl;
g_action_get_state_hint: function(action: PGAction): PGVariant; cdecl;
g_action_get_state_type: function(action: PGAction): PGVariantType; cdecl;
g_action_get_type: function:TGType; cdecl;
g_action_group_action_added: procedure(action_group: PGActionGroup; action_name: Pgchar); cdecl;
g_action_group_action_enabled_changed: procedure(action_group: PGActionGroup; action_name: Pgchar; enabled: gboolean); cdecl;
g_action_group_action_removed: procedure(action_group: PGActionGroup; action_name: Pgchar); cdecl;
g_action_group_action_state_changed: procedure(action_group: PGActionGroup; action_name: Pgchar; state: PGVariant); cdecl;
g_action_group_activate_action: procedure(action_group: PGActionGroup; action_name: Pgchar; parameter: PGVariant); cdecl;
g_action_group_change_action_state: procedure(action_group: PGActionGroup; action_name: Pgchar; value: PGVariant); cdecl;
g_action_group_get_action_enabled: function(action_group: PGActionGroup; action_name: Pgchar): gboolean; cdecl;
g_action_group_get_action_parameter_type: function(action_group: PGActionGroup; action_name: Pgchar): PGVariantType; cdecl;
g_action_group_get_action_state: function(action_group: PGActionGroup; action_name: Pgchar): PGVariant; cdecl;
g_action_group_get_action_state_hint: function(action_group: PGActionGroup; action_name: Pgchar): PGVariant; cdecl;
g_action_group_get_action_state_type: function(action_group: PGActionGroup; action_name: Pgchar): PGVariantType; cdecl;
g_action_group_get_type: function:TGType; cdecl;
g_action_group_has_action: function(action_group: PGActionGroup; action_name: Pgchar): gboolean; cdecl;
g_action_group_list_actions: function(action_group: PGActionGroup): PPgchar; cdecl;
g_action_group_query_action: function(action_group: PGActionGroup; action_name: Pgchar; enabled: Pgboolean; parameter_type: PPGVariantType; state_type: PPGVariantType; state_hint: PPGVariant; state: PPGVariant): gboolean; cdecl;
g_action_map_add_action: procedure(action_map: PGActionMap; action: PGAction); cdecl;
g_action_map_add_action_entries: procedure(action_map: PGActionMap; entries: PGActionEntry; n_entries: gint; user_data: gpointer); cdecl;
g_action_map_get_type: function:TGType; cdecl;
g_action_map_lookup_action: function(action_map: PGActionMap; action_name: Pgchar): PGAction; cdecl;
g_action_map_remove_action: procedure(action_map: PGActionMap; action_name: Pgchar); cdecl;
g_app_info_add_supports_type: function(appinfo: PGAppInfo; content_type: Pgchar; error: PPGError): gboolean; cdecl;
g_app_info_can_delete: function(appinfo: PGAppInfo): gboolean; cdecl;
g_app_info_can_remove_supports_type: function(appinfo: PGAppInfo): gboolean; cdecl;
g_app_info_create_from_commandline: function(commandline: Pgchar; application_name: Pgchar; flags: TGAppInfoCreateFlags; error: PPGError): PGAppInfo; cdecl;
g_app_info_delete: function(appinfo: PGAppInfo): gboolean; cdecl;
g_app_info_dup: function(appinfo: PGAppInfo): PGAppInfo; cdecl;
g_app_info_equal: function(appinfo1: PGAppInfo; appinfo2: PGAppInfo): gboolean; cdecl;
g_app_info_get_all: function: PGList; cdecl;
g_app_info_get_all_for_type: function(content_type: Pgchar): PGList; cdecl;
g_app_info_get_commandline: function(appinfo: PGAppInfo): Pgchar; cdecl;
g_app_info_get_default_for_type: function(content_type: Pgchar; must_support_uris: gboolean): PGAppInfo; cdecl;
g_app_info_get_default_for_uri_scheme: function(uri_scheme: Pgchar): PGAppInfo; cdecl;
g_app_info_get_description: function(appinfo: PGAppInfo): Pgchar; cdecl;
g_app_info_get_display_name: function(appinfo: PGAppInfo): Pgchar; cdecl;
g_app_info_get_executable: function(appinfo: PGAppInfo): Pgchar; cdecl;
g_app_info_get_fallback_for_type: function(content_type: Pgchar): PGList; cdecl;
g_app_info_get_icon: function(appinfo: PGAppInfo): PGIcon; cdecl;
g_app_info_get_id: function(appinfo: PGAppInfo): Pgchar; cdecl;
g_app_info_get_name: function(appinfo: PGAppInfo): Pgchar; cdecl;
g_app_info_get_recommended_for_type: function(content_type: Pgchar): PGList; cdecl;
g_app_info_get_supported_types: function(appinfo: PGAppInfo): PPgchar; cdecl;
g_app_info_get_type: function:TGType; cdecl;
g_app_info_launch: function(appinfo: PGAppInfo; files: PGList; launch_context: PGAppLaunchContext; error: PPGError): gboolean; cdecl;
g_app_info_launch_default_for_uri: function(uri: Pgchar; launch_context: PGAppLaunchContext; error: PPGError): gboolean; cdecl;
g_app_info_launch_uris: function(appinfo: PGAppInfo; uris: PGList; launch_context: PGAppLaunchContext; error: PPGError): gboolean; cdecl;
g_app_info_remove_supports_type: function(appinfo: PGAppInfo; content_type: Pgchar; error: PPGError): gboolean; cdecl;
g_app_info_reset_type_associations: procedure(content_type: Pgchar); cdecl;
g_app_info_set_as_default_for_extension: function(appinfo: PGAppInfo; extension: Pgchar; error: PPGError): gboolean; cdecl;
g_app_info_set_as_default_for_type: function(appinfo: PGAppInfo; content_type: Pgchar; error: PPGError): gboolean; cdecl;
g_app_info_set_as_last_used_for_type: function(appinfo: PGAppInfo; content_type: Pgchar; error: PPGError): gboolean; cdecl;
g_app_info_should_show: function(appinfo: PGAppInfo): gboolean; cdecl;
g_app_info_supports_files: function(appinfo: PGAppInfo): gboolean; cdecl;
g_app_info_supports_uris: function(appinfo: PGAppInfo): gboolean; cdecl;
g_app_launch_context_get_display: function(context: PGAppLaunchContext; info: PGAppInfo; files: PGList): Pgchar; cdecl;
g_app_launch_context_get_environment: function(context: PGAppLaunchContext): PPgchar; cdecl;
g_app_launch_context_get_startup_notify_id: function(context: PGAppLaunchContext; info: PGAppInfo; files: PGList): Pgchar; cdecl;
g_app_launch_context_get_type: function:TGType; cdecl;
g_app_launch_context_launch_failed: procedure(context: PGAppLaunchContext; startup_notify_id: Pgchar); cdecl;
g_app_launch_context_new: function: PGAppLaunchContext; cdecl;
g_app_launch_context_setenv: procedure(context: PGAppLaunchContext; variable: Pgchar; value: Pgchar); cdecl;
g_app_launch_context_unsetenv: procedure(context: PGAppLaunchContext; variable: Pgchar); cdecl;
g_application_activate: procedure(application: PGApplication); cdecl;
g_application_command_line_create_file_for_arg: function(cmdline: PGApplicationCommandLine; arg: Pgchar): PGFile; cdecl;
g_application_command_line_get_arguments: function(cmdline: PGApplicationCommandLine; argc: Pgint): PPgchar; cdecl;
g_application_command_line_get_cwd: function(cmdline: PGApplicationCommandLine): Pgchar; cdecl;
g_application_command_line_get_environ: function(cmdline: PGApplicationCommandLine): PPgchar; cdecl;
g_application_command_line_get_exit_status: function(cmdline: PGApplicationCommandLine): gint; cdecl;
g_application_command_line_get_is_remote: function(cmdline: PGApplicationCommandLine): gboolean; cdecl;
g_application_command_line_get_platform_data: function(cmdline: PGApplicationCommandLine): PGVariant; cdecl;
g_application_command_line_get_stdin: function(cmdline: PGApplicationCommandLine): PGInputStream; cdecl;
g_application_command_line_get_type: function:TGType; cdecl;
g_application_command_line_getenv: function(cmdline: PGApplicationCommandLine; name: Pgchar): Pgchar; cdecl;
g_application_command_line_print: procedure(cmdline: PGApplicationCommandLine; format: Pgchar; args: array of const); cdecl;
g_application_command_line_printerr: procedure(cmdline: PGApplicationCommandLine; format: Pgchar; args: array of const); cdecl;
g_application_command_line_set_exit_status: procedure(cmdline: PGApplicationCommandLine; exit_status: gint); cdecl;
g_application_get_application_id: function(application: PGApplication): Pgchar; cdecl;
g_application_get_dbus_connection: function(application: PGApplication): PGDBusConnection; cdecl;
g_application_get_dbus_object_path: function(application: PGApplication): Pgchar; cdecl;
g_application_get_default: function: PGApplication; cdecl;
g_application_get_flags: function(application: PGApplication): TGApplicationFlags; cdecl;
g_application_get_inactivity_timeout: function(application: PGApplication): guint; cdecl;
g_application_get_is_registered: function(application: PGApplication): gboolean; cdecl;
g_application_get_is_remote: function(application: PGApplication): gboolean; cdecl;
g_application_get_type: function:TGType; cdecl;
g_application_hold: procedure(application: PGApplication); cdecl;
g_application_id_is_valid: function(application_id: Pgchar): gboolean; cdecl;
g_application_new: function(application_id: Pgchar; flags: TGApplicationFlags): PGApplication; cdecl;
g_application_open: procedure(application: PGApplication; files: PPGFile; n_files: gint; hint: Pgchar); cdecl;
g_application_quit: procedure(application: PGApplication); cdecl;
g_application_register: function(application: PGApplication; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_application_release: procedure(application: PGApplication); cdecl;
g_application_run: function(application: PGApplication; argc: gint; argv: PPgchar): gint; cdecl;
g_application_set_application_id: procedure(application: PGApplication; application_id: Pgchar); cdecl;
g_application_set_default: procedure(application: PGApplication); cdecl;
g_application_set_flags: procedure(application: PGApplication; flags: TGApplicationFlags); cdecl;
g_application_set_inactivity_timeout: procedure(application: PGApplication; inactivity_timeout: guint); cdecl;
g_async_initable_get_type: function:TGType; cdecl;
g_async_initable_init_async: procedure(initable: PGAsyncInitable; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_async_initable_init_finish: function(initable: PGAsyncInitable; res: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_async_initable_new_async: procedure(object_type: TGType; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer; first_property_name: Pgchar; args: array of const); cdecl;
g_async_initable_new_finish: function(initable: PGAsyncInitable; res: PGAsyncResult; error: PPGError): PGObject; cdecl;
g_async_initable_new_valist_async: procedure(object_type: TGType; first_property_name: Pgchar; var_args: Tva_list; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_async_initable_newv_async: procedure(object_type: TGType; n_parameters: guint; parameters: PGParameter; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_async_result_get_source_object: function(res: PGAsyncResult): PGObject; cdecl;
g_async_result_get_type: function:TGType; cdecl;
g_async_result_get_user_data: function(res: PGAsyncResult): gpointer; cdecl;
g_async_result_is_tagged: function(res: PGAsyncResult; source_tag: gpointer): gboolean; cdecl;
g_async_result_legacy_propagate_error: function(res: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_buffered_input_stream_fill: function(stream: PGBufferedInputStream; count: gssize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_buffered_input_stream_fill_async: procedure(stream: PGBufferedInputStream; count: gssize; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_buffered_input_stream_fill_finish: function(stream: PGBufferedInputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
g_buffered_input_stream_get_available: function(stream: PGBufferedInputStream): gsize; cdecl;
g_buffered_input_stream_get_buffer_size: function(stream: PGBufferedInputStream): gsize; cdecl;
g_buffered_input_stream_get_type: function:TGType; cdecl;
g_buffered_input_stream_new: function(base_stream: PGInputStream): PGBufferedInputStream; cdecl;
g_buffered_input_stream_new_sized: function(base_stream: PGInputStream; size: gsize): PGBufferedInputStream; cdecl;
g_buffered_input_stream_peek: function(stream: PGBufferedInputStream; buffer: Pguint8; offset: gsize; count: gsize): gsize; cdecl;
g_buffered_input_stream_peek_buffer: function(stream: PGBufferedInputStream; count: Pgsize): Pguint8; cdecl;
g_buffered_input_stream_read_byte: function(stream: PGBufferedInputStream; cancellable: PGCancellable; error: PPGError): gint; cdecl;
g_buffered_input_stream_set_buffer_size: procedure(stream: PGBufferedInputStream; size: gsize); cdecl;
g_buffered_output_stream_get_auto_grow: function(stream: PGBufferedOutputStream): gboolean; cdecl;
g_buffered_output_stream_get_buffer_size: function(stream: PGBufferedOutputStream): gsize; cdecl;
g_buffered_output_stream_get_type: function:TGType; cdecl;
g_buffered_output_stream_new: function(base_stream: PGOutputStream): PGBufferedOutputStream; cdecl;
g_buffered_output_stream_new_sized: function(base_stream: PGOutputStream; size: gsize): PGBufferedOutputStream; cdecl;
g_buffered_output_stream_set_auto_grow: procedure(stream: PGBufferedOutputStream; auto_grow: gboolean); cdecl;
g_buffered_output_stream_set_buffer_size: procedure(stream: PGBufferedOutputStream; size: gsize); cdecl;
g_bus_get: procedure(bus_type: TGBusType; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_bus_get_finish: function(res: PGAsyncResult; error: PPGError): PGDBusConnection; cdecl;
g_bus_get_sync: function(bus_type: TGBusType; cancellable: PGCancellable; error: PPGError): PGDBusConnection; cdecl;
g_bus_own_name: function(bus_type: TGBusType; name: Pgchar; flags: TGBusNameOwnerFlags; bus_acquired_handler: TGBusAcquiredCallback; name_acquired_handler: TGBusNameAcquiredCallback; name_lost_handler: TGBusNameLostCallback; user_data: gpointer; user_data_free_func: TGDestroyNotify): guint; cdecl;
g_bus_own_name_on_connection: function(connection: PGDBusConnection; name: Pgchar; flags: TGBusNameOwnerFlags; name_acquired_handler: TGBusNameAcquiredCallback; name_lost_handler: TGBusNameLostCallback; user_data: gpointer; user_data_free_func: TGDestroyNotify): guint; cdecl;
g_bus_own_name_on_connection_with_closures: function(connection: PGDBusConnection; name: Pgchar; flags: TGBusNameOwnerFlags; name_acquired_closure: PGClosure; name_lost_closure: PGClosure): guint; cdecl;
g_bus_own_name_with_closures: function(bus_type: TGBusType; name: Pgchar; flags: TGBusNameOwnerFlags; bus_acquired_closure: PGClosure; name_acquired_closure: PGClosure; name_lost_closure: PGClosure): guint; cdecl;
g_bus_unown_name: procedure(owner_id: guint); cdecl;
g_bus_unwatch_name: procedure(watcher_id: guint); cdecl;
g_bus_watch_name: function(bus_type: TGBusType; name: Pgchar; flags: TGBusNameWatcherFlags; name_appeared_handler: TGBusNameAppearedCallback; name_vanished_handler: TGBusNameVanishedCallback; user_data: gpointer; user_data_free_func: TGDestroyNotify): guint; cdecl;
g_bus_watch_name_on_connection: function(connection: PGDBusConnection; name: Pgchar; flags: TGBusNameWatcherFlags; name_appeared_handler: TGBusNameAppearedCallback; name_vanished_handler: TGBusNameVanishedCallback; user_data: gpointer; user_data_free_func: TGDestroyNotify): guint; cdecl;
g_bus_watch_name_on_connection_with_closures: function(connection: PGDBusConnection; name: Pgchar; flags: TGBusNameWatcherFlags; name_appeared_closure: PGClosure; name_vanished_closure: PGClosure): guint; cdecl;
g_bus_watch_name_with_closures: function(bus_type: TGBusType; name: Pgchar; flags: TGBusNameWatcherFlags; name_appeared_closure: PGClosure; name_vanished_closure: PGClosure): guint; cdecl;
g_cancellable_cancel: procedure(cancellable: PGCancellable); cdecl;
g_cancellable_connect: function(cancellable: PGCancellable; callback: TGCallback; data: gpointer; data_destroy_func: TGDestroyNotify): gulong; cdecl;
g_cancellable_disconnect: procedure(cancellable: PGCancellable; handler_id: gulong); cdecl;
g_cancellable_get_current: function: PGCancellable; cdecl;
g_cancellable_get_fd: function(cancellable: PGCancellable): gint; cdecl;
g_cancellable_get_type: function:TGType; cdecl;
g_cancellable_is_cancelled: function(cancellable: PGCancellable): gboolean; cdecl;
g_cancellable_make_pollfd: function(cancellable: PGCancellable; pollfd: PGPollFD): gboolean; cdecl;
g_cancellable_new: function: PGCancellable; cdecl;
g_cancellable_pop_current: procedure(cancellable: PGCancellable); cdecl;
g_cancellable_push_current: procedure(cancellable: PGCancellable); cdecl;
g_cancellable_release_fd: procedure(cancellable: PGCancellable); cdecl;
g_cancellable_reset: procedure(cancellable: PGCancellable); cdecl;
g_cancellable_set_error_if_cancelled: function(cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_cancellable_source_new: function(cancellable: PGCancellable): PGSource; cdecl;
g_charset_converter_get_num_fallbacks: function(converter: PGCharsetConverter): guint; cdecl;
g_charset_converter_get_type: function:TGType; cdecl;
g_charset_converter_get_use_fallback: function(converter: PGCharsetConverter): gboolean; cdecl;
g_charset_converter_new: function(to_charset: Pgchar; from_charset: Pgchar; error: PPGError): PGCharsetConverter; cdecl;
g_charset_converter_set_use_fallback: procedure(converter: PGCharsetConverter; use_fallback: gboolean); cdecl;
g_content_type_can_be_executable: function(type_: Pgchar): gboolean; cdecl;
g_content_type_equals: function(type1: Pgchar; type2: Pgchar): gboolean; cdecl;
g_content_type_from_mime_type: function(mime_type: Pgchar): Pgchar; cdecl;
g_content_type_get_description: function(type_: Pgchar): Pgchar; cdecl;
g_content_type_get_generic_icon_name: function(type_: Pgchar): Pgchar; cdecl;
g_content_type_get_icon: function(type_: Pgchar): PGIcon; cdecl;
g_content_type_get_mime_type: function(type_: Pgchar): Pgchar; cdecl;
g_content_type_get_symbolic_icon: function(type_: Pgchar): PGIcon; cdecl;
g_content_type_guess: function(filename: Pgchar; data: Pguint8; data_size: gsize; result_uncertain: Pgboolean): Pgchar; cdecl;
g_content_type_guess_for_tree: function(root: PGFile): PPgchar; cdecl;
g_content_type_is_a: function(type_: Pgchar; supertype: Pgchar): gboolean; cdecl;
g_content_type_is_unknown: function(type_: Pgchar): gboolean; cdecl;
g_content_types_get_registered: function: PGList; cdecl;
g_converter_convert: function(converter: PGConverter; inbuf: Pguint8; inbuf_size: gsize; outbuf: Pgpointer; outbuf_size: gsize; flags: TGConverterFlags; bytes_read: Pgsize; bytes_written: Pgsize; error: PPGError): TGConverterResult; cdecl;
g_converter_get_type: function:TGType; cdecl;
g_converter_input_stream_get_converter: function(converter_stream: PGConverterInputStream): PGConverter; cdecl;
g_converter_input_stream_get_type: function:TGType; cdecl;
g_converter_input_stream_new: function(base_stream: PGInputStream; converter: PGConverter): PGConverterInputStream; cdecl;
g_converter_output_stream_get_converter: function(converter_stream: PGConverterOutputStream): PGConverter; cdecl;
g_converter_output_stream_get_type: function:TGType; cdecl;
g_converter_output_stream_new: function(base_stream: PGOutputStream; converter: PGConverter): PGConverterOutputStream; cdecl;
g_converter_reset: procedure(converter: PGConverter); cdecl;
g_credentials_get_native: function(credentials: PGCredentials; native_type: TGCredentialsType): gpointer; cdecl;
g_credentials_get_type: function:TGType; cdecl;
g_credentials_get_unix_pid: function(credentials: PGCredentials; error: PPGError): gint; cdecl;
g_credentials_get_unix_user: function(credentials: PGCredentials; error: PPGError): guint; cdecl;
g_credentials_is_same_user: function(credentials: PGCredentials; other_credentials: PGCredentials; error: PPGError): gboolean; cdecl;
g_credentials_new: function: PGCredentials; cdecl;
g_credentials_set_native: procedure(credentials: PGCredentials; native_type: TGCredentialsType; native: gpointer); cdecl;
g_credentials_set_unix_user: function(credentials: PGCredentials; uid: guint; error: PPGError): gboolean; cdecl;
g_credentials_to_string: function(credentials: PGCredentials): Pgchar; cdecl;
g_data_input_stream_get_byte_order: function(stream: PGDataInputStream): TGDataStreamByteOrder; cdecl;
g_data_input_stream_get_newline_type: function(stream: PGDataInputStream): TGDataStreamNewlineType; cdecl;
g_data_input_stream_get_type: function:TGType; cdecl;
g_data_input_stream_new: function(base_stream: PGInputStream): PGDataInputStream; cdecl;
g_data_input_stream_read_byte: function(stream: PGDataInputStream; cancellable: PGCancellable; error: PPGError): guint8; cdecl;
g_data_input_stream_read_int16: function(stream: PGDataInputStream; cancellable: PGCancellable; error: PPGError): gint16; cdecl;
g_data_input_stream_read_int32: function(stream: PGDataInputStream; cancellable: PGCancellable; error: PPGError): gint32; cdecl;
g_data_input_stream_read_int64: function(stream: PGDataInputStream; cancellable: PGCancellable; error: PPGError): gint64; cdecl;
g_data_input_stream_read_line: function(stream: PGDataInputStream; length: Pgsize; cancellable: PGCancellable; error: PPGError): Pgchar; cdecl;
g_data_input_stream_read_line_async: procedure(stream: PGDataInputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_data_input_stream_read_line_finish: function(stream: PGDataInputStream; result_: PGAsyncResult; length: Pgsize; error: PPGError): Pgchar; cdecl;
g_data_input_stream_read_line_finish_utf8: function(stream: PGDataInputStream; result_: PGAsyncResult; length: Pgsize; error: PPGError): Pgchar; cdecl;
g_data_input_stream_read_line_utf8: function(stream: PGDataInputStream; length: Pgsize; cancellable: PGCancellable; error: PPGError): Pgchar; cdecl;
g_data_input_stream_read_uint16: function(stream: PGDataInputStream; cancellable: PGCancellable; error: PPGError): guint16; cdecl;
g_data_input_stream_read_uint32: function(stream: PGDataInputStream; cancellable: PGCancellable; error: PPGError): guint32; cdecl;
g_data_input_stream_read_uint64: function(stream: PGDataInputStream; cancellable: PGCancellable; error: PPGError): guint64; cdecl;
g_data_input_stream_read_until: function(stream: PGDataInputStream; stop_chars: Pgchar; length: Pgsize; cancellable: PGCancellable; error: PPGError): Pgchar; cdecl;
g_data_input_stream_read_until_async: procedure(stream: PGDataInputStream; stop_chars: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_data_input_stream_read_until_finish: function(stream: PGDataInputStream; result_: PGAsyncResult; length: Pgsize; error: PPGError): Pgchar; cdecl;
g_data_input_stream_read_upto: function(stream: PGDataInputStream; stop_chars: Pgchar; stop_chars_len: gssize; length: Pgsize; cancellable: PGCancellable; error: PPGError): Pgchar; cdecl;
g_data_input_stream_read_upto_async: procedure(stream: PGDataInputStream; stop_chars: Pgchar; stop_chars_len: gssize; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_data_input_stream_read_upto_finish: function(stream: PGDataInputStream; result_: PGAsyncResult; length: Pgsize; error: PPGError): Pgchar; cdecl;
g_data_input_stream_set_byte_order: procedure(stream: PGDataInputStream; order: TGDataStreamByteOrder); cdecl;
g_data_input_stream_set_newline_type: procedure(stream: PGDataInputStream; type_: TGDataStreamNewlineType); cdecl;
g_data_output_stream_get_byte_order: function(stream: PGDataOutputStream): TGDataStreamByteOrder; cdecl;
g_data_output_stream_get_type: function:TGType; cdecl;
g_data_output_stream_new: function(base_stream: PGOutputStream): PGDataOutputStream; cdecl;
g_data_output_stream_put_byte: function(stream: PGDataOutputStream; data: guint8; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_data_output_stream_put_int16: function(stream: PGDataOutputStream; data: gint16; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_data_output_stream_put_int32: function(stream: PGDataOutputStream; data: gint32; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_data_output_stream_put_int64: function(stream: PGDataOutputStream; data: gint64; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_data_output_stream_put_string: function(stream: PGDataOutputStream; str: Pgchar; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_data_output_stream_put_uint16: function(stream: PGDataOutputStream; data: guint16; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_data_output_stream_put_uint32: function(stream: PGDataOutputStream; data: guint32; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_data_output_stream_put_uint64: function(stream: PGDataOutputStream; data: guint64; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_data_output_stream_set_byte_order: procedure(stream: PGDataOutputStream; order: TGDataStreamByteOrder); cdecl;
g_dbus_action_group_get: function(connection: PGDBusConnection; bus_name: Pgchar; object_path: Pgchar): PGDBusActionGroup; cdecl;
g_dbus_action_group_get_type: function:TGType; cdecl;
g_dbus_address_escape_value: function(string_: Pgchar): Pgchar; cdecl;
g_dbus_address_get_for_bus_sync: function(bus_type: TGBusType; cancellable: PGCancellable; error: PPGError): Pgchar; cdecl;
g_dbus_address_get_stream: procedure(address: Pgchar; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_address_get_stream_finish: function(res: PGAsyncResult; out_guid: PPgchar; error: PPGError): PGIOStream; cdecl;
g_dbus_address_get_stream_sync: function(address: Pgchar; out_guid: PPgchar; cancellable: PGCancellable; error: PPGError): PGIOStream; cdecl;
g_dbus_annotation_info_get_type: function:TGType; cdecl;
g_dbus_annotation_info_lookup: function(annotations: PPGDBusAnnotationInfo; name: Pgchar): Pgchar; cdecl;
g_dbus_annotation_info_ref: function(info: PGDBusAnnotationInfo): PGDBusAnnotationInfo; cdecl;
g_dbus_annotation_info_unref: procedure(info: PGDBusAnnotationInfo); cdecl;
g_dbus_arg_info_get_type: function:TGType; cdecl;
g_dbus_arg_info_ref: function(info: PGDBusArgInfo): PGDBusArgInfo; cdecl;
g_dbus_arg_info_unref: procedure(info: PGDBusArgInfo); cdecl;
g_dbus_auth_observer_allow_mechanism: function(observer: PGDBusAuthObserver; mechanism: Pgchar): gboolean; cdecl;
g_dbus_auth_observer_authorize_authenticated_peer: function(observer: PGDBusAuthObserver; stream: PGIOStream; credentials: PGCredentials): gboolean; cdecl;
g_dbus_auth_observer_get_type: function:TGType; cdecl;
g_dbus_auth_observer_new: function: PGDBusAuthObserver; cdecl;
g_dbus_connection_add_filter: function(connection: PGDBusConnection; filter_function: TGDBusMessageFilterFunction; user_data: gpointer; user_data_free_func: TGDestroyNotify): guint; cdecl;
g_dbus_connection_call: procedure(connection: PGDBusConnection; bus_name: Pgchar; object_path: Pgchar; interface_name: Pgchar; method_name: Pgchar; parameters: PGVariant; reply_type: PGVariantType; flags: TGDBusCallFlags; timeout_msec: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_connection_call_finish: function(connection: PGDBusConnection; res: PGAsyncResult; error: PPGError): PGVariant; cdecl;
g_dbus_connection_call_sync: function(connection: PGDBusConnection; bus_name: Pgchar; object_path: Pgchar; interface_name: Pgchar; method_name: Pgchar; parameters: PGVariant; reply_type: PGVariantType; flags: TGDBusCallFlags; timeout_msec: gint; cancellable: PGCancellable; error: PPGError): PGVariant; cdecl;
g_dbus_connection_call_with_unix_fd_list: procedure(connection: PGDBusConnection; bus_name: Pgchar; object_path: Pgchar; interface_name: Pgchar; method_name: Pgchar; parameters: PGVariant; reply_type: PGVariantType; flags: TGDBusCallFlags; timeout_msec: gint; fd_list: PGUnixFDList; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_connection_call_with_unix_fd_list_finish: function(connection: PGDBusConnection; out_fd_list: PPGUnixFDList; res: PGAsyncResult; error: PPGError): PGVariant; cdecl;
g_dbus_connection_call_with_unix_fd_list_sync: function(connection: PGDBusConnection; bus_name: Pgchar; object_path: Pgchar; interface_name: Pgchar; method_name: Pgchar; parameters: PGVariant; reply_type: PGVariantType; flags: TGDBusCallFlags; timeout_msec: gint; fd_list: PGUnixFDList; out_fd_list: PPGUnixFDList; cancellable: PGCancellable; error: PPGError): PGVariant; cdecl;
g_dbus_connection_close: procedure(connection: PGDBusConnection; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_connection_close_finish: function(connection: PGDBusConnection; res: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_dbus_connection_close_sync: function(connection: PGDBusConnection; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_dbus_connection_emit_signal: function(connection: PGDBusConnection; destination_bus_name: Pgchar; object_path: Pgchar; interface_name: Pgchar; signal_name: Pgchar; parameters: PGVariant; error: PPGError): gboolean; cdecl;
g_dbus_connection_export_action_group: function(connection: PGDBusConnection; object_path: Pgchar; action_group: PGActionGroup; error: PPGError): guint; cdecl;
g_dbus_connection_export_menu_model: function(connection: PGDBusConnection; object_path: Pgchar; menu: PGMenuModel; error: PPGError): guint; cdecl;
g_dbus_connection_flush: procedure(connection: PGDBusConnection; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_connection_flush_finish: function(connection: PGDBusConnection; res: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_dbus_connection_flush_sync: function(connection: PGDBusConnection; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_dbus_connection_get_capabilities: function(connection: PGDBusConnection): TGDBusCapabilityFlags; cdecl;
g_dbus_connection_get_exit_on_close: function(connection: PGDBusConnection): gboolean; cdecl;
g_dbus_connection_get_guid: function(connection: PGDBusConnection): Pgchar; cdecl;
g_dbus_connection_get_last_serial: function(connection: PGDBusConnection): guint32; cdecl;
g_dbus_connection_get_peer_credentials: function(connection: PGDBusConnection): PGCredentials; cdecl;
g_dbus_connection_get_stream: function(connection: PGDBusConnection): PGIOStream; cdecl;
g_dbus_connection_get_type: function:TGType; cdecl;
g_dbus_connection_get_unique_name: function(connection: PGDBusConnection): Pgchar; cdecl;
g_dbus_connection_is_closed: function(connection: PGDBusConnection): gboolean; cdecl;
g_dbus_connection_new: procedure(stream: PGIOStream; guid: Pgchar; flags: TGDBusConnectionFlags; observer: PGDBusAuthObserver; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_connection_new_finish: function(res: PGAsyncResult; error: PPGError): PGDBusConnection; cdecl;
g_dbus_connection_new_for_address: procedure(address: Pgchar; flags: TGDBusConnectionFlags; observer: PGDBusAuthObserver; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_connection_new_for_address_finish: function(res: PGAsyncResult; error: PPGError): PGDBusConnection; cdecl;
g_dbus_connection_new_for_address_sync: function(address: Pgchar; flags: TGDBusConnectionFlags; observer: PGDBusAuthObserver; cancellable: PGCancellable; error: PPGError): PGDBusConnection; cdecl;
g_dbus_connection_new_sync: function(stream: PGIOStream; guid: Pgchar; flags: TGDBusConnectionFlags; observer: PGDBusAuthObserver; cancellable: PGCancellable; error: PPGError): PGDBusConnection; cdecl;
g_dbus_connection_register_object: function(connection: PGDBusConnection; object_path: Pgchar; interface_info: PGDBusInterfaceInfo; vtable: PGDBusInterfaceVTable; user_data: gpointer; user_data_free_func: TGDestroyNotify; error: PPGError): guint; cdecl;
g_dbus_connection_register_subtree: function(connection: PGDBusConnection; object_path: Pgchar; vtable: PGDBusSubtreeVTable; flags: TGDBusSubtreeFlags; user_data: gpointer; user_data_free_func: TGDestroyNotify; error: PPGError): guint; cdecl;
g_dbus_connection_remove_filter: procedure(connection: PGDBusConnection; filter_id: guint); cdecl;
g_dbus_connection_send_message: function(connection: PGDBusConnection; message: PGDBusMessage; flags: TGDBusSendMessageFlags; out_serial: Pguint32; error: PPGError): gboolean; cdecl;
g_dbus_connection_send_message_with_reply: procedure(connection: PGDBusConnection; message: PGDBusMessage; flags: TGDBusSendMessageFlags; timeout_msec: gint; out_serial: Pguint32; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_connection_send_message_with_reply_finish: function(connection: PGDBusConnection; res: PGAsyncResult; error: PPGError): PGDBusMessage; cdecl;
g_dbus_connection_send_message_with_reply_sync: function(connection: PGDBusConnection; message: PGDBusMessage; flags: TGDBusSendMessageFlags; timeout_msec: gint; out_serial: Pguint32; cancellable: PGCancellable; error: PPGError): PGDBusMessage; cdecl;
g_dbus_connection_set_exit_on_close: procedure(connection: PGDBusConnection; exit_on_close: gboolean); cdecl;
g_dbus_connection_signal_subscribe: function(connection: PGDBusConnection; sender: Pgchar; interface_name: Pgchar; member: Pgchar; object_path: Pgchar; arg0: Pgchar; flags: TGDBusSignalFlags; callback: TGDBusSignalCallback; user_data: gpointer; user_data_free_func: TGDestroyNotify): guint; cdecl;
g_dbus_connection_signal_unsubscribe: procedure(connection: PGDBusConnection; subscription_id: guint); cdecl;
g_dbus_connection_start_message_processing: procedure(connection: PGDBusConnection); cdecl;
g_dbus_connection_unexport_action_group: procedure(connection: PGDBusConnection; export_id: guint); cdecl;
g_dbus_connection_unexport_menu_model: procedure(connection: PGDBusConnection; export_id: guint); cdecl;
g_dbus_connection_unregister_object: function(connection: PGDBusConnection; registration_id: guint): gboolean; cdecl;
g_dbus_connection_unregister_subtree: function(connection: PGDBusConnection; registration_id: guint): gboolean; cdecl;
g_dbus_error_encode_gerror: function(error: PGError): Pgchar; cdecl;
g_dbus_error_get_remote_error: function(error: PGError): Pgchar; cdecl;
g_dbus_error_is_remote_error: function(error: PGError): gboolean; cdecl;
g_dbus_error_new_for_dbus_error: function(dbus_error_name: Pgchar; dbus_error_message: Pgchar): PGError; cdecl;
g_dbus_error_quark: function: TGQuark; cdecl;
g_dbus_error_register_error: function(error_domain: TGQuark; error_code: gint; dbus_error_name: Pgchar): gboolean; cdecl;
g_dbus_error_register_error_domain: procedure(error_domain_quark_name: Pgchar; quark_volatile: Pgsize; entries: PGDBusErrorEntry; num_entries: guint); cdecl;
g_dbus_error_set_dbus_error: procedure(error: PPGError; dbus_error_name: Pgchar; dbus_error_message: Pgchar; format: Pgchar; args: array of const); cdecl;
g_dbus_error_set_dbus_error_valist: procedure(error: PPGError; dbus_error_name: Pgchar; dbus_error_message: Pgchar; format: Pgchar; var_args: Tva_list); cdecl;
g_dbus_error_strip_remote_error: function(error: PGError): gboolean; cdecl;
g_dbus_error_unregister_error: function(error_domain: TGQuark; error_code: gint; dbus_error_name: Pgchar): gboolean; cdecl;
g_dbus_generate_guid: function: Pgchar; cdecl;
g_dbus_gvalue_to_gvariant: function(gvalue: PGValue; type_: PGVariantType): PGVariant; cdecl;
g_dbus_gvariant_to_gvalue: procedure(value: PGVariant; out_gvalue: PGValue); cdecl;
g_dbus_interface_dup_object: function(interface_: PGDBusInterface): PGDBusObject; cdecl;
g_dbus_interface_get_info: function(interface_: PGDBusInterface): PGDBusInterfaceInfo; cdecl;
g_dbus_interface_get_object: function(interface_: PGDBusInterface): PGDBusObject; cdecl;
g_dbus_interface_get_type: function:TGType; cdecl;
g_dbus_interface_info_cache_build: procedure(info: PGDBusInterfaceInfo); cdecl;
g_dbus_interface_info_cache_release: procedure(info: PGDBusInterfaceInfo); cdecl;
g_dbus_interface_info_generate_xml: procedure(info: PGDBusInterfaceInfo; indent: guint; string_builder: PGString); cdecl;
g_dbus_interface_info_get_type: function:TGType; cdecl;
g_dbus_interface_info_lookup_method: function(info: PGDBusInterfaceInfo; name: Pgchar): PGDBusMethodInfo; cdecl;
g_dbus_interface_info_lookup_property: function(info: PGDBusInterfaceInfo; name: Pgchar): PGDBusPropertyInfo; cdecl;
g_dbus_interface_info_lookup_signal: function(info: PGDBusInterfaceInfo; name: Pgchar): PGDBusSignalInfo; cdecl;
g_dbus_interface_info_ref: function(info: PGDBusInterfaceInfo): PGDBusInterfaceInfo; cdecl;
g_dbus_interface_info_unref: procedure(info: PGDBusInterfaceInfo); cdecl;
g_dbus_interface_set_object: procedure(interface_: PGDBusInterface; object_: PGDBusObject); cdecl;
g_dbus_interface_skeleton_export: function(interface_: PGDBusInterfaceSkeleton; connection: PGDBusConnection; object_path: Pgchar; error: PPGError): gboolean; cdecl;
g_dbus_interface_skeleton_flush: procedure(interface_: PGDBusInterfaceSkeleton); cdecl;
g_dbus_interface_skeleton_get_connection: function(interface_: PGDBusInterfaceSkeleton): PGDBusConnection; cdecl;
g_dbus_interface_skeleton_get_connections: function(interface_: PGDBusInterfaceSkeleton): PGList; cdecl;
g_dbus_interface_skeleton_get_flags: function(interface_: PGDBusInterfaceSkeleton): TGDBusInterfaceSkeletonFlags; cdecl;
g_dbus_interface_skeleton_get_info: function(interface_: PGDBusInterfaceSkeleton): PGDBusInterfaceInfo; cdecl;
g_dbus_interface_skeleton_get_object_path: function(interface_: PGDBusInterfaceSkeleton): Pgchar; cdecl;
g_dbus_interface_skeleton_get_properties: function(interface_: PGDBusInterfaceSkeleton): PGVariant; cdecl;
g_dbus_interface_skeleton_get_type: function:TGType; cdecl;
g_dbus_interface_skeleton_get_vtable: function(interface_: PGDBusInterfaceSkeleton): PGDBusInterfaceVTable; cdecl;
g_dbus_interface_skeleton_has_connection: function(interface_: PGDBusInterfaceSkeleton; connection: PGDBusConnection): gboolean; cdecl;
g_dbus_interface_skeleton_set_flags: procedure(interface_: PGDBusInterfaceSkeleton; flags: TGDBusInterfaceSkeletonFlags); cdecl;
g_dbus_interface_skeleton_unexport: procedure(interface_: PGDBusInterfaceSkeleton); cdecl;
g_dbus_interface_skeleton_unexport_from_connection: procedure(interface_: PGDBusInterfaceSkeleton; connection: PGDBusConnection); cdecl;
g_dbus_is_address: function(string_: Pgchar): gboolean; cdecl;
g_dbus_is_guid: function(string_: Pgchar): gboolean; cdecl;
g_dbus_is_interface_name: function(string_: Pgchar): gboolean; cdecl;
g_dbus_is_member_name: function(string_: Pgchar): gboolean; cdecl;
g_dbus_is_name: function(string_: Pgchar): gboolean; cdecl;
g_dbus_is_supported_address: function(string_: Pgchar; error: PPGError): gboolean; cdecl;
g_dbus_is_unique_name: function(string_: Pgchar): gboolean; cdecl;
g_dbus_menu_model_get: function(connection: PGDBusConnection; bus_name: Pgchar; object_path: Pgchar): PGDBusMenuModel; cdecl;
g_dbus_menu_model_get_type: function:TGType; cdecl;
g_dbus_message_bytes_needed: function(blob: Pguint8; blob_len: gsize; error: PPGError): gssize; cdecl;
g_dbus_message_copy: function(message: PGDBusMessage; error: PPGError): PGDBusMessage; cdecl;
g_dbus_message_get_arg0: function(message: PGDBusMessage): Pgchar; cdecl;
g_dbus_message_get_body: function(message: PGDBusMessage): PGVariant; cdecl;
g_dbus_message_get_byte_order: function(message: PGDBusMessage): TGDBusMessageByteOrder; cdecl;
g_dbus_message_get_destination: function(message: PGDBusMessage): Pgchar; cdecl;
g_dbus_message_get_error_name: function(message: PGDBusMessage): Pgchar; cdecl;
g_dbus_message_get_flags: function(message: PGDBusMessage): TGDBusMessageFlags; cdecl;
g_dbus_message_get_header: function(message: PGDBusMessage; header_field: TGDBusMessageHeaderField): PGVariant; cdecl;
g_dbus_message_get_header_fields: function(message: PGDBusMessage): Pguint8; cdecl;
g_dbus_message_get_interface: function(message: PGDBusMessage): Pgchar; cdecl;
g_dbus_message_get_locked: function(message: PGDBusMessage): gboolean; cdecl;
g_dbus_message_get_member: function(message: PGDBusMessage): Pgchar; cdecl;
g_dbus_message_get_message_type: function(message: PGDBusMessage): TGDBusMessageType; cdecl;
g_dbus_message_get_num_unix_fds: function(message: PGDBusMessage): guint32; cdecl;
g_dbus_message_get_path: function(message: PGDBusMessage): Pgchar; cdecl;
g_dbus_message_get_reply_serial: function(message: PGDBusMessage): guint32; cdecl;
g_dbus_message_get_sender: function(message: PGDBusMessage): Pgchar; cdecl;
g_dbus_message_get_serial: function(message: PGDBusMessage): guint32; cdecl;
g_dbus_message_get_signature: function(message: PGDBusMessage): Pgchar; cdecl;
g_dbus_message_get_type: function:TGType; cdecl;
g_dbus_message_get_unix_fd_list: function(message: PGDBusMessage): PGUnixFDList; cdecl;
g_dbus_message_lock: procedure(message: PGDBusMessage); cdecl;
g_dbus_message_new: function: PGDBusMessage; cdecl;
g_dbus_message_new_from_blob: function(blob: Pguint8; blob_len: gsize; capabilities: TGDBusCapabilityFlags; error: PPGError): PGDBusMessage; cdecl;
g_dbus_message_new_method_call: function(name: Pgchar; path: Pgchar; interface_: Pgchar; method: Pgchar): PGDBusMessage; cdecl;
g_dbus_message_new_method_error: function(method_call_message: PGDBusMessage; error_name: Pgchar; error_message_format: Pgchar; args: array of const): PGDBusMessage; cdecl;
g_dbus_message_new_method_error_literal: function(method_call_message: PGDBusMessage; error_name: Pgchar; error_message: Pgchar): PGDBusMessage; cdecl;
g_dbus_message_new_method_error_valist: function(method_call_message: PGDBusMessage; error_name: Pgchar; error_message_format: Pgchar; var_args: Tva_list): PGDBusMessage; cdecl;
g_dbus_message_new_method_reply: function(method_call_message: PGDBusMessage): PGDBusMessage; cdecl;
g_dbus_message_new_signal: function(path: Pgchar; interface_: Pgchar; signal: Pgchar): PGDBusMessage; cdecl;
g_dbus_message_print: function(message: PGDBusMessage; indent: guint): Pgchar; cdecl;
g_dbus_message_set_body: procedure(message: PGDBusMessage; body: PGVariant); cdecl;
g_dbus_message_set_byte_order: procedure(message: PGDBusMessage; byte_order: TGDBusMessageByteOrder); cdecl;
g_dbus_message_set_destination: procedure(message: PGDBusMessage; value: Pgchar); cdecl;
g_dbus_message_set_error_name: procedure(message: PGDBusMessage; value: Pgchar); cdecl;
g_dbus_message_set_flags: procedure(message: PGDBusMessage; flags: TGDBusMessageFlags); cdecl;
g_dbus_message_set_header: procedure(message: PGDBusMessage; header_field: TGDBusMessageHeaderField; value: PGVariant); cdecl;
g_dbus_message_set_interface: procedure(message: PGDBusMessage; value: Pgchar); cdecl;
g_dbus_message_set_member: procedure(message: PGDBusMessage; value: Pgchar); cdecl;
g_dbus_message_set_message_type: procedure(message: PGDBusMessage; type_: TGDBusMessageType); cdecl;
g_dbus_message_set_num_unix_fds: procedure(message: PGDBusMessage; value: guint32); cdecl;
g_dbus_message_set_path: procedure(message: PGDBusMessage; value: Pgchar); cdecl;
g_dbus_message_set_reply_serial: procedure(message: PGDBusMessage; value: guint32); cdecl;
g_dbus_message_set_sender: procedure(message: PGDBusMessage; value: Pgchar); cdecl;
g_dbus_message_set_serial: procedure(message: PGDBusMessage; serial: guint32); cdecl;
g_dbus_message_set_signature: procedure(message: PGDBusMessage; value: Pgchar); cdecl;
g_dbus_message_set_unix_fd_list: procedure(message: PGDBusMessage; fd_list: PGUnixFDList); cdecl;
g_dbus_message_to_blob: function(message: PGDBusMessage; out_size: Pgsize; capabilities: TGDBusCapabilityFlags; error: PPGError): Pguint8; cdecl;
g_dbus_message_to_gerror: function(message: PGDBusMessage; error: PPGError): gboolean; cdecl;
g_dbus_method_info_get_type: function:TGType; cdecl;
g_dbus_method_info_ref: function(info: PGDBusMethodInfo): PGDBusMethodInfo; cdecl;
g_dbus_method_info_unref: procedure(info: PGDBusMethodInfo); cdecl;
g_dbus_method_invocation_get_connection: function(invocation: PGDBusMethodInvocation): PGDBusConnection; cdecl;
g_dbus_method_invocation_get_interface_name: function(invocation: PGDBusMethodInvocation): Pgchar; cdecl;
g_dbus_method_invocation_get_message: function(invocation: PGDBusMethodInvocation): PGDBusMessage; cdecl;
g_dbus_method_invocation_get_method_info: function(invocation: PGDBusMethodInvocation): PGDBusMethodInfo; cdecl;
g_dbus_method_invocation_get_method_name: function(invocation: PGDBusMethodInvocation): Pgchar; cdecl;
g_dbus_method_invocation_get_object_path: function(invocation: PGDBusMethodInvocation): Pgchar; cdecl;
g_dbus_method_invocation_get_parameters: function(invocation: PGDBusMethodInvocation): PGVariant; cdecl;
g_dbus_method_invocation_get_sender: function(invocation: PGDBusMethodInvocation): Pgchar; cdecl;
g_dbus_method_invocation_get_type: function:TGType; cdecl;
g_dbus_method_invocation_get_user_data: function(invocation: PGDBusMethodInvocation): gpointer; cdecl;
g_dbus_method_invocation_return_dbus_error: procedure(invocation: PGDBusMethodInvocation; error_name: Pgchar; error_message: Pgchar); cdecl;
g_dbus_method_invocation_return_error: procedure(invocation: PGDBusMethodInvocation; domain: TGQuark; code: gint; format: Pgchar; args: array of const); cdecl;
g_dbus_method_invocation_return_error_literal: procedure(invocation: PGDBusMethodInvocation; domain: TGQuark; code: gint; message: Pgchar); cdecl;
g_dbus_method_invocation_return_error_valist: procedure(invocation: PGDBusMethodInvocation; domain: TGQuark; code: gint; format: Pgchar; var_args: Tva_list); cdecl;
g_dbus_method_invocation_return_gerror: procedure(invocation: PGDBusMethodInvocation; error: PGError); cdecl;
g_dbus_method_invocation_return_value: procedure(invocation: PGDBusMethodInvocation; parameters: PGVariant); cdecl;
g_dbus_method_invocation_return_value_with_unix_fd_list: procedure(invocation: PGDBusMethodInvocation; parameters: PGVariant; fd_list: PGUnixFDList); cdecl;
g_dbus_method_invocation_take_error: procedure(invocation: PGDBusMethodInvocation; error: PGError); cdecl;
g_dbus_node_info_generate_xml: procedure(info: PGDBusNodeInfo; indent: guint; string_builder: PGString); cdecl;
g_dbus_node_info_get_type: function:TGType; cdecl;
g_dbus_node_info_lookup_interface: function(info: PGDBusNodeInfo; name: Pgchar): PGDBusInterfaceInfo; cdecl;
g_dbus_node_info_new_for_xml: function(xml_data: Pgchar; error: PPGError): PGDBusNodeInfo; cdecl;
g_dbus_node_info_ref: function(info: PGDBusNodeInfo): PGDBusNodeInfo; cdecl;
g_dbus_node_info_unref: procedure(info: PGDBusNodeInfo); cdecl;
g_dbus_object_get_interface: function(object_: PGDBusObject; interface_name: Pgchar): PGDBusInterface; cdecl;
g_dbus_object_get_interfaces: function(object_: PGDBusObject): PGList; cdecl;
g_dbus_object_get_object_path: function(object_: PGDBusObject): Pgchar; cdecl;
g_dbus_object_get_type: function:TGType; cdecl;
g_dbus_object_manager_client_get_connection: function(manager: PGDBusObjectManagerClient): PGDBusConnection; cdecl;
g_dbus_object_manager_client_get_flags: function(manager: PGDBusObjectManagerClient): TGDBusObjectManagerClientFlags; cdecl;
g_dbus_object_manager_client_get_name: function(manager: PGDBusObjectManagerClient): Pgchar; cdecl;
g_dbus_object_manager_client_get_name_owner: function(manager: PGDBusObjectManagerClient): Pgchar; cdecl;
g_dbus_object_manager_client_get_type: function:TGType; cdecl;
g_dbus_object_manager_client_new: procedure(connection: PGDBusConnection; flags: TGDBusObjectManagerClientFlags; name: Pgchar; object_path: Pgchar; get_proxy_type_func: TGDBusProxyTypeFunc; get_proxy_type_user_data: gpointer; get_proxy_type_destroy_notify: TGDestroyNotify; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_object_manager_client_new_finish: function(res: PGAsyncResult; error: PPGError): PGDBusObjectManagerClient; cdecl;
g_dbus_object_manager_client_new_for_bus: procedure(bus_type: TGBusType; flags: TGDBusObjectManagerClientFlags; name: Pgchar; object_path: Pgchar; get_proxy_type_func: TGDBusProxyTypeFunc; get_proxy_type_user_data: gpointer; get_proxy_type_destroy_notify: TGDestroyNotify; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_object_manager_client_new_for_bus_finish: function(res: PGAsyncResult; error: PPGError): PGDBusObjectManagerClient; cdecl;
g_dbus_object_manager_client_new_for_bus_sync: function(bus_type: TGBusType; flags: TGDBusObjectManagerClientFlags; name: Pgchar; object_path: Pgchar; get_proxy_type_func: TGDBusProxyTypeFunc; get_proxy_type_user_data: gpointer; get_proxy_type_destroy_notify: TGDestroyNotify; cancellable: PGCancellable; error: PPGError): PGDBusObjectManagerClient; cdecl;
g_dbus_object_manager_client_new_sync: function(connection: PGDBusConnection; flags: TGDBusObjectManagerClientFlags; name: Pgchar; object_path: Pgchar; get_proxy_type_func: TGDBusProxyTypeFunc; get_proxy_type_user_data: gpointer; get_proxy_type_destroy_notify: TGDestroyNotify; cancellable: PGCancellable; error: PPGError): PGDBusObjectManagerClient; cdecl;
g_dbus_object_manager_get_interface: function(manager: PGDBusObjectManager; object_path: Pgchar; interface_name: Pgchar): PGDBusInterface; cdecl;
g_dbus_object_manager_get_object: function(manager: PGDBusObjectManager; object_path: Pgchar): PGDBusObject; cdecl;
g_dbus_object_manager_get_object_path: function(manager: PGDBusObjectManager): Pgchar; cdecl;
g_dbus_object_manager_get_objects: function(manager: PGDBusObjectManager): PGList; cdecl;
g_dbus_object_manager_get_type: function:TGType; cdecl;
g_dbus_object_manager_server_export: procedure(manager: PGDBusObjectManagerServer; object_: PGDBusObjectSkeleton); cdecl;
g_dbus_object_manager_server_export_uniquely: procedure(manager: PGDBusObjectManagerServer; object_: PGDBusObjectSkeleton); cdecl;
g_dbus_object_manager_server_get_connection: function(manager: PGDBusObjectManagerServer): PGDBusConnection; cdecl;
g_dbus_object_manager_server_get_type: function:TGType; cdecl;
g_dbus_object_manager_server_is_exported: function(manager: PGDBusObjectManagerServer; object_: PGDBusObjectSkeleton): gboolean; cdecl;
g_dbus_object_manager_server_new: function(object_path: Pgchar): PGDBusObjectManagerServer; cdecl;
g_dbus_object_manager_server_set_connection: procedure(manager: PGDBusObjectManagerServer; connection: PGDBusConnection); cdecl;
g_dbus_object_manager_server_unexport: function(manager: PGDBusObjectManagerServer; object_path: Pgchar): gboolean; cdecl;
g_dbus_object_proxy_get_connection: function(proxy: PGDBusObjectProxy): PGDBusConnection; cdecl;
g_dbus_object_proxy_get_type: function:TGType; cdecl;
g_dbus_object_proxy_new: function(connection: PGDBusConnection; object_path: Pgchar): PGDBusObjectProxy; cdecl;
g_dbus_object_skeleton_add_interface: procedure(object_: PGDBusObjectSkeleton; interface_: PGDBusInterfaceSkeleton); cdecl;
g_dbus_object_skeleton_flush: procedure(object_: PGDBusObjectSkeleton); cdecl;
g_dbus_object_skeleton_get_type: function:TGType; cdecl;
g_dbus_object_skeleton_new: function(object_path: Pgchar): PGDBusObjectSkeleton; cdecl;
g_dbus_object_skeleton_remove_interface: procedure(object_: PGDBusObjectSkeleton; interface_: PGDBusInterfaceSkeleton); cdecl;
g_dbus_object_skeleton_remove_interface_by_name: procedure(object_: PGDBusObjectSkeleton; interface_name: Pgchar); cdecl;
g_dbus_object_skeleton_set_object_path: procedure(object_: PGDBusObjectSkeleton; object_path: Pgchar); cdecl;
g_dbus_property_info_get_type: function:TGType; cdecl;
g_dbus_property_info_ref: function(info: PGDBusPropertyInfo): PGDBusPropertyInfo; cdecl;
g_dbus_property_info_unref: procedure(info: PGDBusPropertyInfo); cdecl;
g_dbus_proxy_call: procedure(proxy: PGDBusProxy; method_name: Pgchar; parameters: PGVariant; flags: TGDBusCallFlags; timeout_msec: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_proxy_call_finish: function(proxy: PGDBusProxy; res: PGAsyncResult; error: PPGError): PGVariant; cdecl;
g_dbus_proxy_call_sync: function(proxy: PGDBusProxy; method_name: Pgchar; parameters: PGVariant; flags: TGDBusCallFlags; timeout_msec: gint; cancellable: PGCancellable; error: PPGError): PGVariant; cdecl;
g_dbus_proxy_call_with_unix_fd_list: procedure(proxy: PGDBusProxy; method_name: Pgchar; parameters: PGVariant; flags: TGDBusCallFlags; timeout_msec: gint; fd_list: PGUnixFDList; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_proxy_call_with_unix_fd_list_finish: function(proxy: PGDBusProxy; out_fd_list: PPGUnixFDList; res: PGAsyncResult; error: PPGError): PGVariant; cdecl;
g_dbus_proxy_call_with_unix_fd_list_sync: function(proxy: PGDBusProxy; method_name: Pgchar; parameters: PGVariant; flags: TGDBusCallFlags; timeout_msec: gint; fd_list: PGUnixFDList; out_fd_list: PPGUnixFDList; cancellable: PGCancellable; error: PPGError): PGVariant; cdecl;
g_dbus_proxy_get_cached_property: function(proxy: PGDBusProxy; property_name: Pgchar): PGVariant; cdecl;
g_dbus_proxy_get_cached_property_names: function(proxy: PGDBusProxy): PPgchar; cdecl;
g_dbus_proxy_get_connection: function(proxy: PGDBusProxy): PGDBusConnection; cdecl;
g_dbus_proxy_get_default_timeout: function(proxy: PGDBusProxy): gint; cdecl;
g_dbus_proxy_get_flags: function(proxy: PGDBusProxy): TGDBusProxyFlags; cdecl;
g_dbus_proxy_get_interface_info: function(proxy: PGDBusProxy): PGDBusInterfaceInfo; cdecl;
g_dbus_proxy_get_interface_name: function(proxy: PGDBusProxy): Pgchar; cdecl;
g_dbus_proxy_get_name: function(proxy: PGDBusProxy): Pgchar; cdecl;
g_dbus_proxy_get_name_owner: function(proxy: PGDBusProxy): Pgchar; cdecl;
g_dbus_proxy_get_object_path: function(proxy: PGDBusProxy): Pgchar; cdecl;
g_dbus_proxy_get_type: function:TGType; cdecl;
g_dbus_proxy_new: procedure(connection: PGDBusConnection; flags: TGDBusProxyFlags; info: PGDBusInterfaceInfo; name: Pgchar; object_path: Pgchar; interface_name: Pgchar; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_proxy_new_finish: function(res: PGAsyncResult; error: PPGError): PGDBusProxy; cdecl;
g_dbus_proxy_new_for_bus: procedure(bus_type: TGBusType; flags: TGDBusProxyFlags; info: PGDBusInterfaceInfo; name: Pgchar; object_path: Pgchar; interface_name: Pgchar; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_dbus_proxy_new_for_bus_finish: function(res: PGAsyncResult; error: PPGError): PGDBusProxy; cdecl;
g_dbus_proxy_new_for_bus_sync: function(bus_type: TGBusType; flags: TGDBusProxyFlags; info: PGDBusInterfaceInfo; name: Pgchar; object_path: Pgchar; interface_name: Pgchar; cancellable: PGCancellable; error: PPGError): PGDBusProxy; cdecl;
g_dbus_proxy_new_sync: function(connection: PGDBusConnection; flags: TGDBusProxyFlags; info: PGDBusInterfaceInfo; name: Pgchar; object_path: Pgchar; interface_name: Pgchar; cancellable: PGCancellable; error: PPGError): PGDBusProxy; cdecl;
g_dbus_proxy_set_cached_property: procedure(proxy: PGDBusProxy; property_name: Pgchar; value: PGVariant); cdecl;
g_dbus_proxy_set_default_timeout: procedure(proxy: PGDBusProxy; timeout_msec: gint); cdecl;
g_dbus_proxy_set_interface_info: procedure(proxy: PGDBusProxy; info: PGDBusInterfaceInfo); cdecl;
g_dbus_server_get_client_address: function(server: PGDBusServer): Pgchar; cdecl;
g_dbus_server_get_flags: function(server: PGDBusServer): TGDBusServerFlags; cdecl;
g_dbus_server_get_guid: function(server: PGDBusServer): Pgchar; cdecl;
g_dbus_server_get_type: function:TGType; cdecl;
g_dbus_server_is_active: function(server: PGDBusServer): gboolean; cdecl;
g_dbus_server_new_sync: function(address: Pgchar; flags: TGDBusServerFlags; guid: Pgchar; observer: PGDBusAuthObserver; cancellable: PGCancellable; error: PPGError): PGDBusServer; cdecl;
g_dbus_server_start: procedure(server: PGDBusServer); cdecl;
g_dbus_server_stop: procedure(server: PGDBusServer); cdecl;
g_dbus_signal_info_get_type: function:TGType; cdecl;
g_dbus_signal_info_ref: function(info: PGDBusSignalInfo): PGDBusSignalInfo; cdecl;
g_dbus_signal_info_unref: procedure(info: PGDBusSignalInfo); cdecl;
g_desktop_app_info_get_boolean: function(info: PGDesktopAppInfo; key: Pgchar): gboolean; cdecl;
g_desktop_app_info_get_categories: function(info: PGDesktopAppInfo): Pgchar; cdecl;
g_desktop_app_info_get_filename: function(info: PGDesktopAppInfo): Pgchar; cdecl;
g_desktop_app_info_get_generic_name: function(info: PGDesktopAppInfo): Pgchar; cdecl;
g_desktop_app_info_get_is_hidden: function(info: PGDesktopAppInfo): gboolean; cdecl;
g_desktop_app_info_get_keywords: function(info: PGDesktopAppInfo): PPgchar; cdecl;
g_desktop_app_info_get_nodisplay: function(info: PGDesktopAppInfo): gboolean; cdecl;
g_desktop_app_info_get_show_in: function(info: PGDesktopAppInfo; desktop_env: Pgchar): gboolean; cdecl;
g_desktop_app_info_get_startup_wm_class: function(info: PGDesktopAppInfo): Pgchar; cdecl;
g_desktop_app_info_get_string: function(info: PGDesktopAppInfo; key: Pgchar): Pgchar; cdecl;
g_desktop_app_info_get_type: function:TGType; cdecl;
g_desktop_app_info_has_key: function(info: PGDesktopAppInfo; key: Pgchar): gboolean; cdecl;
g_desktop_app_info_launch_uris_as_manager: function(appinfo: PGDesktopAppInfo; uris: PGList; launch_context: PGAppLaunchContext; spawn_flags: TGSpawnFlags; user_setup: TGSpawnChildSetupFunc; user_setup_data: gpointer; pid_callback: TGDesktopAppLaunchCallback; pid_callback_data: gpointer; error: PPGError): gboolean; cdecl;
g_desktop_app_info_lookup_get_type: function:TGType; cdecl;
g_desktop_app_info_new: function(desktop_id: Pgchar): PGDesktopAppInfo; cdecl;
g_desktop_app_info_new_from_filename: function(filename: Pgchar): PGDesktopAppInfo; cdecl;
g_desktop_app_info_new_from_keyfile: function(key_file: PGKeyFile): PGDesktopAppInfo; cdecl;
g_desktop_app_info_set_desktop_env: procedure(desktop_env: Pgchar); cdecl;
g_drive_can_eject: function(drive: PGDrive): gboolean; cdecl;
g_drive_can_poll_for_media: function(drive: PGDrive): gboolean; cdecl;
g_drive_can_start: function(drive: PGDrive): gboolean; cdecl;
g_drive_can_start_degraded: function(drive: PGDrive): gboolean; cdecl;
g_drive_can_stop: function(drive: PGDrive): gboolean; cdecl;
g_drive_eject_with_operation: procedure(drive: PGDrive; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_drive_eject_with_operation_finish: function(drive: PGDrive; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_drive_enumerate_identifiers: function(drive: PGDrive): PPgchar; cdecl;
g_drive_get_icon: function(drive: PGDrive): PGIcon; cdecl;
g_drive_get_identifier: function(drive: PGDrive; kind: Pgchar): Pgchar; cdecl;
g_drive_get_name: function(drive: PGDrive): Pgchar; cdecl;
g_drive_get_sort_key: function(drive: PGDrive): Pgchar; cdecl;
g_drive_get_start_stop_type: function(drive: PGDrive): TGDriveStartStopType; cdecl;
g_drive_get_symbolic_icon: function(drive: PGDrive): PGIcon; cdecl;
g_drive_get_type: function:TGType; cdecl;
g_drive_get_volumes: function(drive: PGDrive): PGList; cdecl;
g_drive_has_media: function(drive: PGDrive): gboolean; cdecl;
g_drive_has_volumes: function(drive: PGDrive): gboolean; cdecl;
g_drive_is_media_check_automatic: function(drive: PGDrive): gboolean; cdecl;
g_drive_is_media_removable: function(drive: PGDrive): gboolean; cdecl;
g_drive_poll_for_media: procedure(drive: PGDrive; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_drive_poll_for_media_finish: function(drive: PGDrive; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_drive_start: procedure(drive: PGDrive; flags: TGDriveStartFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_drive_start_finish: function(drive: PGDrive; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_drive_stop: procedure(drive: PGDrive; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_drive_stop_finish: function(drive: PGDrive; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_emblem_get_icon: function(emblem: PGEmblem): PGIcon; cdecl;
g_emblem_get_origin: function(emblem: PGEmblem): TGEmblemOrigin; cdecl;
g_emblem_get_type: function:TGType; cdecl;
g_emblem_new: function(icon: PGIcon): PGEmblem; cdecl;
g_emblem_new_with_origin: function(icon: PGIcon; origin: TGEmblemOrigin): PGEmblem; cdecl;
g_emblemed_icon_add_emblem: procedure(emblemed: PGEmblemedIcon; emblem: PGEmblem); cdecl;
g_emblemed_icon_clear_emblems: procedure(emblemed: PGEmblemedIcon); cdecl;
g_emblemed_icon_get_emblems: function(emblemed: PGEmblemedIcon): PGList; cdecl;
g_emblemed_icon_get_icon: function(emblemed: PGEmblemedIcon): PGIcon; cdecl;
g_emblemed_icon_get_type: function:TGType; cdecl;
g_emblemed_icon_new: function(icon: PGIcon; emblem: PGEmblem): PGEmblemedIcon; cdecl;
g_file_append_to: function(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileOutputStream; cdecl;
g_file_append_to_async: procedure(file_: PGFile; flags: TGFileCreateFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_append_to_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl;
g_file_attribute_info_list_add: procedure(list: PGFileAttributeInfoList; name: Pgchar; type_: TGFileAttributeType; flags: TGFileAttributeInfoFlags); cdecl;
g_file_attribute_info_list_dup: function(list: PGFileAttributeInfoList): PGFileAttributeInfoList; cdecl;
g_file_attribute_info_list_get_type: function:TGType; cdecl;
g_file_attribute_info_list_lookup: function(list: PGFileAttributeInfoList; name: Pgchar): PGFileAttributeInfo; cdecl;
g_file_attribute_info_list_new: function: PGFileAttributeInfoList; cdecl;
g_file_attribute_info_list_ref: function(list: PGFileAttributeInfoList): PGFileAttributeInfoList; cdecl;
g_file_attribute_info_list_unref: procedure(list: PGFileAttributeInfoList); cdecl;
g_file_attribute_matcher_enumerate_namespace: function(matcher: PGFileAttributeMatcher; ns: Pgchar): gboolean; cdecl;
g_file_attribute_matcher_enumerate_next: function(matcher: PGFileAttributeMatcher): Pgchar; cdecl;
g_file_attribute_matcher_get_type: function:TGType; cdecl;
g_file_attribute_matcher_matches: function(matcher: PGFileAttributeMatcher; attribute: Pgchar): gboolean; cdecl;
g_file_attribute_matcher_matches_only: function(matcher: PGFileAttributeMatcher; attribute: Pgchar): gboolean; cdecl;
g_file_attribute_matcher_new: function(attributes: Pgchar): PGFileAttributeMatcher; cdecl;
g_file_attribute_matcher_ref: function(matcher: PGFileAttributeMatcher): PGFileAttributeMatcher; cdecl;
g_file_attribute_matcher_subtract: function(matcher: PGFileAttributeMatcher; subtract: PGFileAttributeMatcher): PGFileAttributeMatcher; cdecl;
g_file_attribute_matcher_to_string: function(matcher: PGFileAttributeMatcher): Pgchar; cdecl;
g_file_attribute_matcher_unref: procedure(matcher: PGFileAttributeMatcher); cdecl;
g_file_copy: function(source: PGFile; destination: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; progress_callback: TGFileProgressCallback; progress_callback_data: gpointer; error: PPGError): gboolean; cdecl;
g_file_copy_async: procedure(source: PGFile; destination: PGFile; flags: TGFileCopyFlags; io_priority: gint; cancellable: PGCancellable; progress_callback: TGFileProgressCallback; progress_callback_data: gpointer; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_copy_attributes: function(source: PGFile; destination: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_copy_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_file_create: function(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileOutputStream; cdecl;
g_file_create_async: procedure(file_: PGFile; flags: TGFileCreateFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_create_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl;
g_file_create_readwrite: function(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileIOStream; cdecl;
g_file_create_readwrite_async: procedure(file_: PGFile; flags: TGFileCreateFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_create_readwrite_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl;
g_file_delete: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_delete_async: procedure(file_: PGFile; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_delete_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_file_descriptor_based_get_fd: function(fd_based: PGFileDescriptorBased): gint; cdecl;
g_file_descriptor_based_get_type: function:TGType; cdecl;
g_file_dup: function(file_: PGFile): PGFile; cdecl;
g_file_eject_mountable_with_operation: procedure(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_eject_mountable_with_operation_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_file_enumerate_children: function(file_: PGFile; attributes: Pgchar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): PGFileEnumerator; cdecl;
g_file_enumerate_children_async: procedure(file_: PGFile; attributes: Pgchar; flags: TGFileQueryInfoFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_enumerate_children_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileEnumerator; cdecl;
g_file_enumerator_close: function(enumerator: PGFileEnumerator; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_enumerator_close_async: procedure(enumerator: PGFileEnumerator; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_enumerator_close_finish: function(enumerator: PGFileEnumerator; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_file_enumerator_get_child: function(enumerator: PGFileEnumerator; info: PGFileInfo): PGFile; cdecl;
g_file_enumerator_get_container: function(enumerator: PGFileEnumerator): PGFile; cdecl;
g_file_enumerator_get_type: function:TGType; cdecl;
g_file_enumerator_has_pending: function(enumerator: PGFileEnumerator): gboolean; cdecl;
g_file_enumerator_is_closed: function(enumerator: PGFileEnumerator): gboolean; cdecl;
g_file_enumerator_next_file: function(enumerator: PGFileEnumerator; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
g_file_enumerator_next_files_async: procedure(enumerator: PGFileEnumerator; num_files: gint; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_enumerator_next_files_finish: function(enumerator: PGFileEnumerator; result_: PGAsyncResult; error: PPGError): PGList; cdecl;
g_file_enumerator_set_pending: procedure(enumerator: PGFileEnumerator; pending: gboolean); cdecl;
g_file_equal: function(file1: PGFile; file2: PGFile): gboolean; cdecl;
g_file_find_enclosing_mount: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGMount; cdecl;
g_file_find_enclosing_mount_async: procedure(file_: PGFile; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_find_enclosing_mount_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGMount; cdecl;
g_file_get_basename: function(file_: PGFile): Pgchar; cdecl;
g_file_get_child: function(file_: PGFile; name: Pgchar): PGFile; cdecl;
g_file_get_child_for_display_name: function(file_: PGFile; display_name: Pgchar; error: PPGError): PGFile; cdecl;
g_file_get_parent: function(file_: PGFile): PGFile; cdecl;
g_file_get_parse_name: function(file_: PGFile): Pgchar; cdecl;
g_file_get_path: function(file_: PGFile): Pgchar; cdecl;
g_file_get_relative_path: function(parent: PGFile; descendant: PGFile): Pgchar; cdecl;
g_file_get_type: function:TGType; cdecl;
g_file_get_uri: function(file_: PGFile): Pgchar; cdecl;
g_file_get_uri_scheme: function(file_: PGFile): Pgchar; cdecl;
g_file_has_parent: function(file_: PGFile; parent: PGFile): gboolean; cdecl;
g_file_has_prefix: function(file_: PGFile; prefix: PGFile): gboolean; cdecl;
g_file_has_uri_scheme: function(file_: PGFile; uri_scheme: Pgchar): gboolean; cdecl;
g_file_hash: function(file_: PGFile): guint; cdecl;
g_file_icon_get_file: function(icon: PGFileIcon): PGFile; cdecl;
g_file_icon_get_type: function:TGType; cdecl;
g_file_icon_new: function(file_: PGFile): PGFileIcon; cdecl;
g_file_info_clear_status: procedure(info: PGFileInfo); cdecl;
g_file_info_copy_into: procedure(src_info: PGFileInfo; dest_info: PGFileInfo); cdecl;
g_file_info_dup: function(other: PGFileInfo): PGFileInfo; cdecl;
g_file_info_get_attribute_as_string: function(info: PGFileInfo; attribute: Pgchar): Pgchar; cdecl;
g_file_info_get_attribute_boolean: function(info: PGFileInfo; attribute: Pgchar): gboolean; cdecl;
g_file_info_get_attribute_byte_string: function(info: PGFileInfo; attribute: Pgchar): Pgchar; cdecl;
g_file_info_get_attribute_data: function(info: PGFileInfo; attribute: Pgchar; type_: PGFileAttributeType; value_pp: Pgpointer; status: PGFileAttributeStatus): gboolean; cdecl;
g_file_info_get_attribute_int32: function(info: PGFileInfo; attribute: Pgchar): gint32; cdecl;
g_file_info_get_attribute_int64: function(info: PGFileInfo; attribute: Pgchar): gint64; cdecl;
g_file_info_get_attribute_object: function(info: PGFileInfo; attribute: Pgchar): PGObject; cdecl;
g_file_info_get_attribute_status: function(info: PGFileInfo; attribute: Pgchar): TGFileAttributeStatus; cdecl;
g_file_info_get_attribute_string: function(info: PGFileInfo; attribute: Pgchar): Pgchar; cdecl;
g_file_info_get_attribute_stringv: function(info: PGFileInfo; attribute: Pgchar): PPgchar; cdecl;
g_file_info_get_attribute_type: function(info: PGFileInfo; attribute: Pgchar): TGFileAttributeType; cdecl;
g_file_info_get_attribute_uint32: function(info: PGFileInfo; attribute: Pgchar): guint32; cdecl;
g_file_info_get_attribute_uint64: function(info: PGFileInfo; attribute: Pgchar): guint64; cdecl;
g_file_info_get_content_type: function(info: PGFileInfo): Pgchar; cdecl;
g_file_info_get_deletion_date: function(info: PGFileInfo): PGDateTime; cdecl;
g_file_info_get_display_name: function(info: PGFileInfo): Pgchar; cdecl;
g_file_info_get_edit_name: function(info: PGFileInfo): Pgchar; cdecl;
g_file_info_get_etag: function(info: PGFileInfo): Pgchar; cdecl;
g_file_info_get_file_type: function(info: PGFileInfo): TGFileType; cdecl;
g_file_info_get_icon: function(info: PGFileInfo): PGIcon; cdecl;
g_file_info_get_is_backup: function(info: PGFileInfo): gboolean; cdecl;
g_file_info_get_is_hidden: function(info: PGFileInfo): gboolean; cdecl;
g_file_info_get_is_symlink: function(info: PGFileInfo): gboolean; cdecl;
g_file_info_get_modification_time: procedure(info: PGFileInfo; result_: PGTimeVal); cdecl;
g_file_info_get_name: function(info: PGFileInfo): Pgchar; cdecl;
g_file_info_get_size: function(info: PGFileInfo): gint64; cdecl;
g_file_info_get_sort_order: function(info: PGFileInfo): gint32; cdecl;
g_file_info_get_symbolic_icon: function(info: PGFileInfo): PGIcon; cdecl;
g_file_info_get_symlink_target: function(info: PGFileInfo): Pgchar; cdecl;
g_file_info_get_type: function:TGType; cdecl;
g_file_info_has_attribute: function(info: PGFileInfo; attribute: Pgchar): gboolean; cdecl;
g_file_info_has_namespace: function(info: PGFileInfo; name_space: Pgchar): gboolean; cdecl;
g_file_info_list_attributes: function(info: PGFileInfo; name_space: Pgchar): PPgchar; cdecl;
g_file_info_new: function: PGFileInfo; cdecl;
g_file_info_remove_attribute: procedure(info: PGFileInfo; attribute: Pgchar); cdecl;
g_file_info_set_attribute: procedure(info: PGFileInfo; attribute: Pgchar; type_: TGFileAttributeType; value_p: gpointer); cdecl;
g_file_info_set_attribute_boolean: procedure(info: PGFileInfo; attribute: Pgchar; attr_value: gboolean); cdecl;
g_file_info_set_attribute_byte_string: procedure(info: PGFileInfo; attribute: Pgchar; attr_value: Pgchar); cdecl;
g_file_info_set_attribute_int32: procedure(info: PGFileInfo; attribute: Pgchar; attr_value: gint32); cdecl;
g_file_info_set_attribute_int64: procedure(info: PGFileInfo; attribute: Pgchar; attr_value: gint64); cdecl;
g_file_info_set_attribute_mask: procedure(info: PGFileInfo; mask: PGFileAttributeMatcher); cdecl;
g_file_info_set_attribute_object: procedure(info: PGFileInfo; attribute: Pgchar; attr_value: PGObject); cdecl;
g_file_info_set_attribute_status: function(info: PGFileInfo; attribute: Pgchar; status: TGFileAttributeStatus): gboolean; cdecl;
g_file_info_set_attribute_string: procedure(info: PGFileInfo; attribute: Pgchar; attr_value: Pgchar); cdecl;
g_file_info_set_attribute_stringv: procedure(info: PGFileInfo; attribute: Pgchar; attr_value: PPgchar); cdecl;
g_file_info_set_attribute_uint32: procedure(info: PGFileInfo; attribute: Pgchar; attr_value: guint32); cdecl;
g_file_info_set_attribute_uint64: procedure(info: PGFileInfo; attribute: Pgchar; attr_value: guint64); cdecl;
g_file_info_set_content_type: procedure(info: PGFileInfo; content_type: Pgchar); cdecl;
g_file_info_set_display_name: procedure(info: PGFileInfo; display_name: Pgchar); cdecl;
g_file_info_set_edit_name: procedure(info: PGFileInfo; edit_name: Pgchar); cdecl;
g_file_info_set_file_type: procedure(info: PGFileInfo; type_: TGFileType); cdecl;
g_file_info_set_icon: procedure(info: PGFileInfo; icon: PGIcon); cdecl;
g_file_info_set_is_hidden: procedure(info: PGFileInfo; is_hidden: gboolean); cdecl;
g_file_info_set_is_symlink: procedure(info: PGFileInfo; is_symlink: gboolean); cdecl;
g_file_info_set_modification_time: procedure(info: PGFileInfo; mtime: PGTimeVal); cdecl;
g_file_info_set_name: procedure(info: PGFileInfo; name: Pgchar); cdecl;
g_file_info_set_size: procedure(info: PGFileInfo; size: gint64); cdecl;
g_file_info_set_sort_order: procedure(info: PGFileInfo; sort_order: gint32); cdecl;
g_file_info_set_symbolic_icon: procedure(info: PGFileInfo; icon: PGIcon); cdecl;
g_file_info_set_symlink_target: procedure(info: PGFileInfo; symlink_target: Pgchar); cdecl;
g_file_info_unset_attribute_mask: procedure(info: PGFileInfo); cdecl;
g_file_input_stream_get_type: function:TGType; cdecl;
g_file_input_stream_query_info: function(stream: PGFileInputStream; attributes: Pgchar; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
g_file_input_stream_query_info_async: procedure(stream: PGFileInputStream; attributes: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_input_stream_query_info_finish: function(stream: PGFileInputStream; result_: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
g_file_io_stream_get_etag: function(stream: PGFileIOStream): Pgchar; cdecl;
g_file_io_stream_get_type: function:TGType; cdecl;
g_file_io_stream_query_info: function(stream: PGFileIOStream; attributes: Pgchar; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
g_file_io_stream_query_info_async: procedure(stream: PGFileIOStream; attributes: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_io_stream_query_info_finish: function(stream: PGFileIOStream; result_: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
g_file_is_native: function(file_: PGFile): gboolean; cdecl;
g_file_load_contents: function(file_: PGFile; cancellable: PGCancellable; contents: PPgchar; length: Pgsize; etag_out: PPgchar; error: PPGError): gboolean; cdecl;
g_file_load_contents_async: procedure(file_: PGFile; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_load_contents_finish: function(file_: PGFile; res: PGAsyncResult; contents: PPgchar; length: Pgsize; etag_out: PPgchar; error: PPGError): gboolean; cdecl;
g_file_load_partial_contents_async: procedure(file_: PGFile; cancellable: PGCancellable; read_more_callback: TGFileReadMoreCallback; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_load_partial_contents_finish: function(file_: PGFile; res: PGAsyncResult; contents: PPgchar; length: Pgsize; etag_out: PPgchar; error: PPGError): gboolean; cdecl;
g_file_make_directory: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_make_directory_with_parents: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_make_symbolic_link: function(file_: PGFile; symlink_value: Pgchar; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_monitor: function(file_: PGFile; flags: TGFileMonitorFlags; cancellable: PGCancellable; error: PPGError): PGFileMonitor; cdecl;
g_file_monitor_cancel: function(monitor: PGFileMonitor): gboolean; cdecl;
g_file_monitor_directory: function(file_: PGFile; flags: TGFileMonitorFlags; cancellable: PGCancellable; error: PPGError): PGFileMonitor; cdecl;
g_file_monitor_emit_event: procedure(monitor: PGFileMonitor; child: PGFile; other_file: PGFile; event_type: TGFileMonitorEvent); cdecl;
g_file_monitor_file: function(file_: PGFile; flags: TGFileMonitorFlags; cancellable: PGCancellable; error: PPGError): PGFileMonitor; cdecl;
g_file_monitor_get_type: function:TGType; cdecl;
g_file_monitor_is_cancelled: function(monitor: PGFileMonitor): gboolean; cdecl;
g_file_monitor_set_rate_limit: procedure(monitor: PGFileMonitor; limit_msecs: gint); cdecl;
g_file_mount_enclosing_volume: procedure(location: PGFile; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_mount_enclosing_volume_finish: function(location: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_file_mount_mountable: procedure(file_: PGFile; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_mount_mountable_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): PGFile; cdecl;
g_file_move: function(source: PGFile; destination: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; progress_callback: TGFileProgressCallback; progress_callback_data: gpointer; error: PPGError): gboolean; cdecl;
g_file_new_for_commandline_arg: function(arg: Pgchar): PGFile; cdecl;
g_file_new_for_commandline_arg_and_cwd: function(arg: Pgchar; cwd: Pgchar): PGFile; cdecl;
g_file_new_for_path: function(path: Pgchar): PGFile; cdecl;
g_file_new_for_uri: function(uri: Pgchar): PGFile; cdecl;
g_file_new_tmp: function(tmpl: Pgchar; iostream: PPGFileIOStream; error: PPGError): PGFile; cdecl;
g_file_open_readwrite: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileIOStream; cdecl;
g_file_open_readwrite_async: procedure(file_: PGFile; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_open_readwrite_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl;
g_file_output_stream_get_etag: function(stream: PGFileOutputStream): Pgchar; cdecl;
g_file_output_stream_get_type: function:TGType; cdecl;
g_file_output_stream_query_info: function(stream: PGFileOutputStream; attributes: Pgchar; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
g_file_output_stream_query_info_async: procedure(stream: PGFileOutputStream; attributes: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_output_stream_query_info_finish: function(stream: PGFileOutputStream; result_: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
g_file_parse_name: function(parse_name: Pgchar): PGFile; cdecl;
g_file_poll_mountable: procedure(file_: PGFile; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_poll_mountable_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_file_query_default_handler: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGAppInfo; cdecl;
g_file_query_exists: function(file_: PGFile; cancellable: PGCancellable): gboolean; cdecl;
g_file_query_file_type: function(file_: PGFile; flags: TGFileQueryInfoFlags; cancellable: PGCancellable): TGFileType; cdecl;
g_file_query_filesystem_info: function(file_: PGFile; attributes: Pgchar; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
g_file_query_filesystem_info_async: procedure(file_: PGFile; attributes: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_query_filesystem_info_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
g_file_query_info: function(file_: PGFile; attributes: Pgchar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
g_file_query_info_async: procedure(file_: PGFile; attributes: Pgchar; flags: TGFileQueryInfoFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_query_info_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
g_file_query_settable_attributes: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileAttributeInfoList; cdecl;
g_file_query_writable_namespaces: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileAttributeInfoList; cdecl;
g_file_read: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileInputStream; cdecl;
g_file_read_async: procedure(file_: PGFile; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_read_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInputStream; cdecl;
g_file_replace: function(file_: PGFile; etag: Pgchar; make_backup: gboolean; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileOutputStream; cdecl;
g_file_replace_async: procedure(file_: PGFile; etag: Pgchar; make_backup: gboolean; flags: TGFileCreateFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_replace_contents: function(file_: PGFile; contents: Pgchar; length: gsize; etag: Pgchar; make_backup: gboolean; flags: TGFileCreateFlags; new_etag: PPgchar; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_replace_contents_async: procedure(file_: PGFile; contents: Pgchar; length: gsize; etag: Pgchar; make_backup: gboolean; flags: TGFileCreateFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_replace_contents_finish: function(file_: PGFile; res: PGAsyncResult; new_etag: PPgchar; error: PPGError): gboolean; cdecl;
g_file_replace_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl;
g_file_replace_readwrite: function(file_: PGFile; etag: Pgchar; make_backup: gboolean; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileIOStream; cdecl;
g_file_replace_readwrite_async: procedure(file_: PGFile; etag: Pgchar; make_backup: gboolean; flags: TGFileCreateFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_replace_readwrite_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl;
g_file_resolve_relative_path: function(file_: PGFile; relative_path: Pgchar): PGFile; cdecl;
g_file_set_attribute: function(file_: PGFile; attribute: Pgchar; type_: TGFileAttributeType; value_p: gpointer; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_set_attribute_byte_string: function(file_: PGFile; attribute: Pgchar; value: Pgchar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_set_attribute_int32: function(file_: PGFile; attribute: Pgchar; value: gint32; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_set_attribute_int64: function(file_: PGFile; attribute: Pgchar; value: gint64; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_set_attribute_string: function(file_: PGFile; attribute: Pgchar; value: Pgchar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_set_attribute_uint32: function(file_: PGFile; attribute: Pgchar; value: guint32; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_set_attribute_uint64: function(file_: PGFile; attribute: Pgchar; value: guint64; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_set_attributes_async: procedure(file_: PGFile; info: PGFileInfo; flags: TGFileQueryInfoFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_set_attributes_finish: function(file_: PGFile; result_: PGAsyncResult; info: PPGFileInfo; error: PPGError): gboolean; cdecl;
g_file_set_attributes_from_info: function(file_: PGFile; info: PGFileInfo; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_set_display_name: function(file_: PGFile; display_name: Pgchar; cancellable: PGCancellable; error: PPGError): PGFile; cdecl;
g_file_set_display_name_async: procedure(file_: PGFile; display_name: Pgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_set_display_name_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFile; cdecl;
g_file_start_mountable: procedure(file_: PGFile; flags: TGDriveStartFlags; start_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_start_mountable_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_file_stop_mountable: procedure(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_stop_mountable_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_file_supports_thread_contexts: function(file_: PGFile): gboolean; cdecl;
g_file_trash: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_file_unmount_mountable_with_operation: procedure(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_file_unmount_mountable_with_operation_finish: function(file_: PGFile; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_filename_completer_get_completion_suffix: function(completer: PGFilenameCompleter; initial_text: Pgchar): Pgchar; cdecl;
g_filename_completer_get_completions: function(completer: PGFilenameCompleter; initial_text: Pgchar): PPgchar; cdecl;
g_filename_completer_get_type: function:TGType; cdecl;
g_filename_completer_new: function: PGFilenameCompleter; cdecl;
g_filename_completer_set_dirs_only: procedure(completer: PGFilenameCompleter; dirs_only: gboolean); cdecl;
g_filter_input_stream_get_base_stream: function(stream: PGFilterInputStream): PGInputStream; cdecl;
g_filter_input_stream_get_close_base_stream: function(stream: PGFilterInputStream): gboolean; cdecl;
g_filter_input_stream_get_type: function:TGType; cdecl;
g_filter_input_stream_set_close_base_stream: procedure(stream: PGFilterInputStream; close_base: gboolean); cdecl;
g_filter_output_stream_get_base_stream: function(stream: PGFilterOutputStream): PGOutputStream; cdecl;
g_filter_output_stream_get_close_base_stream: function(stream: PGFilterOutputStream): gboolean; cdecl;
g_filter_output_stream_get_type: function:TGType; cdecl;
g_filter_output_stream_set_close_base_stream: procedure(stream: PGFilterOutputStream; close_base: gboolean); cdecl;
g_icon_equal: function(icon1: PGIcon; icon2: PGIcon): gboolean; cdecl;
g_icon_get_type: function:TGType; cdecl;
g_icon_hash: function(icon: Pgpointer): guint; cdecl;
g_icon_new_for_string: function(str: Pgchar; error: PPGError): PGIcon; cdecl;
g_icon_to_string: function(icon: PGIcon): Pgchar; cdecl;
g_inet_address_equal: function(address: PGInetAddress; other_address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_family: function(address: PGInetAddress): TGSocketFamily; cdecl;
g_inet_address_get_is_any: function(address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_is_link_local: function(address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_is_loopback: function(address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_is_mc_global: function(address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_is_mc_link_local: function(address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_is_mc_node_local: function(address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_is_mc_org_local: function(address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_is_mc_site_local: function(address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_is_multicast: function(address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_is_site_local: function(address: PGInetAddress): gboolean; cdecl;
g_inet_address_get_native_size: function(address: PGInetAddress): gsize; cdecl;
g_inet_address_get_type: function:TGType; cdecl;
g_inet_address_mask_equal: function(mask: PGInetAddressMask; mask2: PGInetAddressMask): gboolean; cdecl;
g_inet_address_mask_get_address: function(mask: PGInetAddressMask): PGInetAddress; cdecl;
g_inet_address_mask_get_family: function(mask: PGInetAddressMask): TGSocketFamily; cdecl;
g_inet_address_mask_get_length: function(mask: PGInetAddressMask): guint; cdecl;
g_inet_address_mask_get_type: function:TGType; cdecl;
g_inet_address_mask_matches: function(mask: PGInetAddressMask; address: PGInetAddress): gboolean; cdecl;
g_inet_address_mask_new: function(addr: PGInetAddress; length: guint; error: PPGError): PGInetAddressMask; cdecl;
g_inet_address_mask_new_from_string: function(mask_string: Pgchar; error: PPGError): PGInetAddressMask; cdecl;
g_inet_address_mask_to_string: function(mask: PGInetAddressMask): Pgchar; cdecl;
g_inet_address_new_any: function(family: TGSocketFamily): PGInetAddress; cdecl;
g_inet_address_new_from_bytes: function(bytes: Pguint8; family: TGSocketFamily): PGInetAddress; cdecl;
g_inet_address_new_from_string: function(string_: Pgchar): PGInetAddress; cdecl;
g_inet_address_new_loopback: function(family: TGSocketFamily): PGInetAddress; cdecl;
g_inet_address_to_bytes: function(address: PGInetAddress): Pguint8; cdecl;
g_inet_address_to_string: function(address: PGInetAddress): Pgchar; cdecl;
g_inet_socket_address_get_address: function(address: PGInetSocketAddress): PGInetAddress; cdecl;
g_inet_socket_address_get_flowinfo: function(address: PGInetSocketAddress): guint32; cdecl;
g_inet_socket_address_get_port: function(address: PGInetSocketAddress): guint16; cdecl;
g_inet_socket_address_get_scope_id: function(address: PGInetSocketAddress): guint32; cdecl;
g_inet_socket_address_get_type: function:TGType; cdecl;
g_inet_socket_address_new: function(address: PGInetAddress; port: guint16): PGInetSocketAddress; cdecl;
g_initable_get_type: function:TGType; cdecl;
g_initable_init: function(initable: PGInitable; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_initable_new: function(object_type: TGType; cancellable: PGCancellable; error: PPGError; first_property_name: Pgchar; args: array of const): PGObject; cdecl;
g_initable_new_valist: function(object_type: TGType; first_property_name: Pgchar; var_args: Tva_list; cancellable: PGCancellable; error: PPGError): PGObject; cdecl;
g_initable_newv: function(object_type: TGType; n_parameters: guint; parameters: PGParameter; cancellable: PGCancellable; error: PPGError): PGObject; cdecl;
g_input_stream_clear_pending: procedure(stream: PGInputStream); cdecl;
g_input_stream_close: function(stream: PGInputStream; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_input_stream_close_async: procedure(stream: PGInputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_input_stream_close_finish: function(stream: PGInputStream; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_input_stream_get_type: function:TGType; cdecl;
g_input_stream_has_pending: function(stream: PGInputStream): gboolean; cdecl;
g_input_stream_is_closed: function(stream: PGInputStream): gboolean; cdecl;
g_input_stream_read: function(stream: PGInputStream; buffer: Pguint8; count: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_input_stream_read_all: function(stream: PGInputStream; buffer: Pguint8; count: gsize; bytes_read: Pgsize; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_input_stream_read_async: procedure(stream: PGInputStream; buffer: Pguint8; count: gsize; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_input_stream_read_bytes: function(stream: PGInputStream; count: gsize; cancellable: PGCancellable; error: PPGError): PGBytes; cdecl;
g_input_stream_read_bytes_async: procedure(stream: PGInputStream; count: gsize; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_input_stream_read_bytes_finish: function(stream: PGInputStream; result_: PGAsyncResult; error: PPGError): PGBytes; cdecl;
g_input_stream_read_finish: function(stream: PGInputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
g_input_stream_set_pending: function(stream: PGInputStream; error: PPGError): gboolean; cdecl;
g_input_stream_skip: function(stream: PGInputStream; count: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_input_stream_skip_async: procedure(stream: PGInputStream; count: gsize; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_input_stream_skip_finish: function(stream: PGInputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
g_io_error_from_errno: function(err_no: gint): TGIOErrorEnum; cdecl;
g_io_error_quark: function: TGQuark; cdecl;
g_io_extension_get_name: function(extension: PGIOExtension): Pgchar; cdecl;
g_io_extension_get_priority: function(extension: PGIOExtension): gint; cdecl;
g_io_extension_get_type: function(extension: PGIOExtension): TGType; cdecl;
g_io_extension_point_get_extension_by_name: function(extension_point: PGIOExtensionPoint; name: Pgchar): PGIOExtension; cdecl;
g_io_extension_point_get_extensions: function(extension_point: PGIOExtensionPoint): PGList; cdecl;
g_io_extension_point_get_required_type: function(extension_point: PGIOExtensionPoint): TGType; cdecl;
g_io_extension_point_implement: function(extension_point_name: Pgchar; type_: TGType; extension_name: Pgchar; priority: gint): PGIOExtension; cdecl;
g_io_extension_point_lookup: function(name: Pgchar): PGIOExtensionPoint; cdecl;
g_io_extension_point_register: function(name: Pgchar): PGIOExtensionPoint; cdecl;
g_io_extension_point_set_required_type: procedure(extension_point: PGIOExtensionPoint; type_: TGType); cdecl;
g_io_extension_ref_class: function(extension: PGIOExtension): PGTypeClass; cdecl;
g_io_module_get_type: function:TGType; cdecl;
g_io_module_new: function(filename: Pgchar): PGIOModule; cdecl;
g_io_module_scope_block: procedure(scope: PGIOModuleScope; basename: Pgchar); cdecl;
g_io_module_scope_free: procedure(scope: PGIOModuleScope); cdecl;
g_io_module_scope_new: function(flags: TGIOModuleScopeFlags): PGIOModuleScope; cdecl;
g_io_modules_load_all_in_directory: function(dirname: Pgchar): PGList; cdecl;
g_io_modules_load_all_in_directory_with_scope: function(dirname: Pgchar; scope: PGIOModuleScope): PGList; cdecl;
g_io_modules_scan_all_in_directory: procedure(dirname: Pgchar); cdecl;
g_io_modules_scan_all_in_directory_with_scope: procedure(dirname: Pgchar; scope: PGIOModuleScope); cdecl;
g_io_scheduler_cancel_all_jobs: procedure; cdecl;
g_io_scheduler_push_job: procedure(job_func: TGIOSchedulerJobFunc; user_data: gpointer; notify: TGDestroyNotify; io_priority: gint; cancellable: PGCancellable); cdecl;
g_io_stream_clear_pending: procedure(stream: PGIOStream); cdecl;
g_io_stream_close: function(stream: PGIOStream; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_io_stream_close_async: procedure(stream: PGIOStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_io_stream_close_finish: function(stream: PGIOStream; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_io_stream_get_input_stream: function(stream: PGIOStream): PGInputStream; cdecl;
g_io_stream_get_output_stream: function(stream: PGIOStream): PGOutputStream; cdecl;
g_io_stream_get_type: function:TGType; cdecl;
g_io_stream_has_pending: function(stream: PGIOStream): gboolean; cdecl;
g_io_stream_is_closed: function(stream: PGIOStream): gboolean; cdecl;
g_io_stream_set_pending: function(stream: PGIOStream; error: PPGError): gboolean; cdecl;
g_io_stream_splice_async: procedure(stream1: PGIOStream; stream2: PGIOStream; flags: TGIOStreamSpliceFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_io_stream_splice_finish: function(result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_loadable_icon_get_type: function:TGType; cdecl;
g_loadable_icon_load: function(icon: PGLoadableIcon; size: gint; type_: PPgchar; cancellable: PGCancellable; error: PPGError): PGInputStream; cdecl;
g_loadable_icon_load_async: procedure(icon: PGLoadableIcon; size: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_loadable_icon_load_finish: function(icon: PGLoadableIcon; res: PGAsyncResult; type_: PPgchar; error: PPGError): PGInputStream; cdecl;
g_memory_input_stream_add_bytes: procedure(stream: PGMemoryInputStream; bytes: PGBytes); cdecl;
g_memory_input_stream_add_data: procedure(stream: PGMemoryInputStream; data: Pguint8; len: gssize; destroy_: TGDestroyNotify); cdecl;
g_memory_input_stream_get_type: function:TGType; cdecl;
g_memory_input_stream_new: function: PGMemoryInputStream; cdecl;
g_memory_input_stream_new_from_bytes: function(bytes: PGBytes): PGMemoryInputStream; cdecl;
g_memory_input_stream_new_from_data: function(data: Pguint8; len: gssize; destroy_: TGDestroyNotify): PGMemoryInputStream; cdecl;
g_memory_output_stream_get_data: function(ostream: PGMemoryOutputStream): gpointer; cdecl;
g_memory_output_stream_get_data_size: function(ostream: PGMemoryOutputStream): gsize; cdecl;
g_memory_output_stream_get_size: function(ostream: PGMemoryOutputStream): gsize; cdecl;
g_memory_output_stream_get_type: function:TGType; cdecl;
g_memory_output_stream_new: function(data: gpointer; size: gsize; realloc_function: TGReallocFunc; destroy_function: TGDestroyNotify): PGMemoryOutputStream; cdecl;
g_memory_output_stream_new_resizable: function: PGMemoryOutputStream; cdecl;
g_memory_output_stream_steal_as_bytes: function(ostream: PGMemoryOutputStream): PGBytes; cdecl;
g_memory_output_stream_steal_data: function(ostream: PGMemoryOutputStream): gpointer; cdecl;
g_menu_append: procedure(menu: PGMenu; label_: Pgchar; detailed_action: Pgchar); cdecl;
g_menu_append_item: procedure(menu: PGMenu; item: PGMenuItem); cdecl;
g_menu_append_section: procedure(menu: PGMenu; label_: Pgchar; section: PGMenuModel); cdecl;
g_menu_append_submenu: procedure(menu: PGMenu; label_: Pgchar; submenu: PGMenuModel); cdecl;
g_menu_attribute_iter_get_name: function(iter: PGMenuAttributeIter): Pgchar; cdecl;
g_menu_attribute_iter_get_next: function(iter: PGMenuAttributeIter; out_name: PPgchar; value: PPGVariant): gboolean; cdecl;
g_menu_attribute_iter_get_type: function:TGType; cdecl;
g_menu_attribute_iter_get_value: function(iter: PGMenuAttributeIter): PGVariant; cdecl;
g_menu_attribute_iter_next: function(iter: PGMenuAttributeIter): gboolean; cdecl;
g_menu_freeze: procedure(menu: PGMenu); cdecl;
g_menu_get_type: function:TGType; cdecl;
g_menu_insert: procedure(menu: PGMenu; position: gint; label_: Pgchar; detailed_action: Pgchar); cdecl;
g_menu_insert_item: procedure(menu: PGMenu; position: gint; item: PGMenuItem); cdecl;
g_menu_insert_section: procedure(menu: PGMenu; position: gint; label_: Pgchar; section: PGMenuModel); cdecl;
g_menu_insert_submenu: procedure(menu: PGMenu; position: gint; label_: Pgchar; submenu: PGMenuModel); cdecl;
g_menu_item_get_attribute: function(menu_item: PGMenuItem; attribute: Pgchar; format_string: Pgchar; args: array of const): gboolean; cdecl;
g_menu_item_get_attribute_value: function(menu_item: PGMenuItem; attribute: Pgchar; expected_type: PGVariantType): PGVariant; cdecl;
g_menu_item_get_link: function(menu_item: PGMenuItem; link: Pgchar): PGMenuModel; cdecl;
g_menu_item_get_type: function:TGType; cdecl;
g_menu_item_new: function(label_: Pgchar; detailed_action: Pgchar): PGMenuItem; cdecl;
g_menu_item_new_from_model: function(model: PGMenuModel; item_index: gint): PGMenuItem; cdecl;
g_menu_item_new_section: function(label_: Pgchar; section: PGMenuModel): PGMenuItem; cdecl;
g_menu_item_new_submenu: function(label_: Pgchar; submenu: PGMenuModel): PGMenuItem; cdecl;
g_menu_item_set_action_and_target: procedure(menu_item: PGMenuItem; action: Pgchar; format_string: Pgchar; args: array of const); cdecl;
g_menu_item_set_action_and_target_value: procedure(menu_item: PGMenuItem; action: Pgchar; target_value: PGVariant); cdecl;
g_menu_item_set_attribute: procedure(menu_item: PGMenuItem; attribute: Pgchar; format_string: Pgchar; args: array of const); cdecl;
g_menu_item_set_attribute_value: procedure(menu_item: PGMenuItem; attribute: Pgchar; value: PGVariant); cdecl;
g_menu_item_set_detailed_action: procedure(menu_item: PGMenuItem; detailed_action: Pgchar); cdecl;
g_menu_item_set_label: procedure(menu_item: PGMenuItem; label_: Pgchar); cdecl;
g_menu_item_set_link: procedure(menu_item: PGMenuItem; link: Pgchar; model: PGMenuModel); cdecl;
g_menu_item_set_section: procedure(menu_item: PGMenuItem; section: PGMenuModel); cdecl;
g_menu_item_set_submenu: procedure(menu_item: PGMenuItem; submenu: PGMenuModel); cdecl;
g_menu_link_iter_get_name: function(iter: PGMenuLinkIter): Pgchar; cdecl;
g_menu_link_iter_get_next: function(iter: PGMenuLinkIter; out_link: PPgchar; value: PPGMenuModel): gboolean; cdecl;
g_menu_link_iter_get_type: function:TGType; cdecl;
g_menu_link_iter_get_value: function(iter: PGMenuLinkIter): PGMenuModel; cdecl;
g_menu_link_iter_next: function(iter: PGMenuLinkIter): gboolean; cdecl;
g_menu_model_get_item_attribute: function(model: PGMenuModel; item_index: gint; attribute: Pgchar; format_string: Pgchar; args: array of const): gboolean; cdecl;
g_menu_model_get_item_attribute_value: function(model: PGMenuModel; item_index: gint; attribute: Pgchar; expected_type: PGVariantType): PGVariant; cdecl;
g_menu_model_get_item_link: function(model: PGMenuModel; item_index: gint; link: Pgchar): PGMenuModel; cdecl;
g_menu_model_get_n_items: function(model: PGMenuModel): gint; cdecl;
g_menu_model_get_type: function:TGType; cdecl;
g_menu_model_is_mutable: function(model: PGMenuModel): gboolean; cdecl;
g_menu_model_items_changed: procedure(model: PGMenuModel; position: gint; removed: gint; added: gint); cdecl;
g_menu_model_iterate_item_attributes: function(model: PGMenuModel; item_index: gint): PGMenuAttributeIter; cdecl;
g_menu_model_iterate_item_links: function(model: PGMenuModel; item_index: gint): PGMenuLinkIter; cdecl;
g_menu_new: function: PGMenu; cdecl;
g_menu_prepend: procedure(menu: PGMenu; label_: Pgchar; detailed_action: Pgchar); cdecl;
g_menu_prepend_item: procedure(menu: PGMenu; item: PGMenuItem); cdecl;
g_menu_prepend_section: procedure(menu: PGMenu; label_: Pgchar; section: PGMenuModel); cdecl;
g_menu_prepend_submenu: procedure(menu: PGMenu; label_: Pgchar; submenu: PGMenuModel); cdecl;
g_menu_remove: procedure(menu: PGMenu; position: gint); cdecl;
g_mount_can_eject: function(mount: PGMount): gboolean; cdecl;
g_mount_can_unmount: function(mount: PGMount): gboolean; cdecl;
g_mount_eject_with_operation: procedure(mount: PGMount; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_mount_eject_with_operation_finish: function(mount: PGMount; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_mount_get_default_location: function(mount: PGMount): PGFile; cdecl;
g_mount_get_drive: function(mount: PGMount): PGDrive; cdecl;
g_mount_get_icon: function(mount: PGMount): PGIcon; cdecl;
g_mount_get_name: function(mount: PGMount): Pgchar; cdecl;
g_mount_get_root: function(mount: PGMount): PGFile; cdecl;
g_mount_get_sort_key: function(mount: PGMount): Pgchar; cdecl;
g_mount_get_symbolic_icon: function(mount: PGMount): PGIcon; cdecl;
g_mount_get_type: function:TGType; cdecl;
g_mount_get_uuid: function(mount: PGMount): Pgchar; cdecl;
g_mount_get_volume: function(mount: PGMount): PGVolume; cdecl;
g_mount_guess_content_type: procedure(mount: PGMount; force_rescan: gboolean; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_mount_guess_content_type_finish: function(mount: PGMount; result_: PGAsyncResult; error: PPGError): PPgchar; cdecl;
g_mount_guess_content_type_sync: function(mount: PGMount; force_rescan: gboolean; cancellable: PGCancellable; error: PPGError): PPgchar; cdecl;
g_mount_is_shadowed: function(mount: PGMount): gboolean; cdecl;
g_mount_operation_get_anonymous: function(op: PGMountOperation): gboolean; cdecl;
g_mount_operation_get_choice: function(op: PGMountOperation): gint; cdecl;
g_mount_operation_get_domain: function(op: PGMountOperation): Pgchar; cdecl;
g_mount_operation_get_password: function(op: PGMountOperation): Pgchar; cdecl;
g_mount_operation_get_password_save: function(op: PGMountOperation): TGPasswordSave; cdecl;
g_mount_operation_get_type: function:TGType; cdecl;
g_mount_operation_get_username: function(op: PGMountOperation): Pgchar; cdecl;
g_mount_operation_new: function: PGMountOperation; cdecl;
g_mount_operation_reply: procedure(op: PGMountOperation; result_: TGMountOperationResult); cdecl;
g_mount_operation_set_anonymous: procedure(op: PGMountOperation; anonymous: gboolean); cdecl;
g_mount_operation_set_choice: procedure(op: PGMountOperation; choice: gint); cdecl;
g_mount_operation_set_domain: procedure(op: PGMountOperation; domain: Pgchar); cdecl;
g_mount_operation_set_password: procedure(op: PGMountOperation; password: Pgchar); cdecl;
g_mount_operation_set_password_save: procedure(op: PGMountOperation; save: TGPasswordSave); cdecl;
g_mount_operation_set_username: procedure(op: PGMountOperation; username: Pgchar); cdecl;
g_mount_remount: procedure(mount: PGMount; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_mount_remount_finish: function(mount: PGMount; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_mount_shadow: procedure(mount: PGMount); cdecl;
g_mount_unmount_with_operation: procedure(mount: PGMount; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_mount_unmount_with_operation_finish: function(mount: PGMount; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_mount_unshadow: procedure(mount: PGMount); cdecl;
g_native_volume_monitor_get_type: function:TGType; cdecl;
g_network_address_get_hostname: function(addr: PGNetworkAddress): Pgchar; cdecl;
g_network_address_get_port: function(addr: PGNetworkAddress): guint16; cdecl;
g_network_address_get_scheme: function(addr: PGNetworkAddress): Pgchar; cdecl;
g_network_address_get_type: function:TGType; cdecl;
g_network_address_new: function(hostname: Pgchar; port: guint16): PGNetworkAddress; cdecl;
g_network_address_parse: function(host_and_port: Pgchar; default_port: guint16; error: PPGError): PGSocketConnectable; cdecl;
g_network_address_parse_uri: function(uri: Pgchar; default_port: guint16; error: PPGError): PGSocketConnectable; cdecl;
g_network_monitor_can_reach: function(monitor: PGNetworkMonitor; connectable: PGSocketConnectable; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_network_monitor_can_reach_async: procedure(monitor: PGNetworkMonitor; connectable: PGSocketConnectable; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_network_monitor_can_reach_finish: function(monitor: PGNetworkMonitor; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_network_monitor_get_default: function: PGNetworkMonitor; cdecl;
g_network_monitor_get_network_available: function(monitor: PGNetworkMonitor): gboolean; cdecl;
g_network_monitor_get_type: function:TGType; cdecl;
g_network_service_get_domain: function(srv: PGNetworkService): Pgchar; cdecl;
g_network_service_get_protocol: function(srv: PGNetworkService): Pgchar; cdecl;
g_network_service_get_scheme: function(srv: PGNetworkService): Pgchar; cdecl;
g_network_service_get_service: function(srv: PGNetworkService): Pgchar; cdecl;
g_network_service_get_type: function:TGType; cdecl;
g_network_service_new: function(service: Pgchar; protocol: Pgchar; domain: Pgchar): PGNetworkService; cdecl;
g_network_service_set_scheme: procedure(srv: PGNetworkService; scheme: Pgchar); cdecl;
g_networking_init: procedure; cdecl;
g_output_stream_clear_pending: procedure(stream: PGOutputStream); cdecl;
g_output_stream_close: function(stream: PGOutputStream; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_output_stream_close_async: procedure(stream: PGOutputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_output_stream_close_finish: function(stream: PGOutputStream; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_output_stream_flush: function(stream: PGOutputStream; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_output_stream_flush_async: procedure(stream: PGOutputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_output_stream_flush_finish: function(stream: PGOutputStream; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_output_stream_get_type: function:TGType; cdecl;
g_output_stream_has_pending: function(stream: PGOutputStream): gboolean; cdecl;
g_output_stream_is_closed: function(stream: PGOutputStream): gboolean; cdecl;
g_output_stream_is_closing: function(stream: PGOutputStream): gboolean; cdecl;
g_output_stream_set_pending: function(stream: PGOutputStream; error: PPGError): gboolean; cdecl;
g_output_stream_splice: function(stream: PGOutputStream; source: PGInputStream; flags: TGOutputStreamSpliceFlags; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_output_stream_splice_async: procedure(stream: PGOutputStream; source: PGInputStream; flags: TGOutputStreamSpliceFlags; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_output_stream_splice_finish: function(stream: PGOutputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
g_output_stream_write: function(stream: PGOutputStream; buffer: Pguint8; count: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_output_stream_write_all: function(stream: PGOutputStream; buffer: Pguint8; count: gsize; bytes_written: Pgsize; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_output_stream_write_async: procedure(stream: PGOutputStream; buffer: Pguint8; count: gsize; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_output_stream_write_bytes: function(stream: PGOutputStream; bytes: PGBytes; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_output_stream_write_bytes_async: procedure(stream: PGOutputStream; bytes: PGBytes; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_output_stream_write_bytes_finish: function(stream: PGOutputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
g_output_stream_write_finish: function(stream: PGOutputStream; result_: PGAsyncResult; error: PPGError): gssize; cdecl;
g_permission_acquire: function(permission: PGPermission; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_permission_acquire_async: procedure(permission: PGPermission; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_permission_acquire_finish: function(permission: PGPermission; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_permission_get_allowed: function(permission: PGPermission): gboolean; cdecl;
g_permission_get_can_acquire: function(permission: PGPermission): gboolean; cdecl;
g_permission_get_can_release: function(permission: PGPermission): gboolean; cdecl;
g_permission_get_type: function:TGType; cdecl;
g_permission_impl_update: procedure(permission: PGPermission; allowed: gboolean; can_acquire: gboolean; can_release: gboolean); cdecl;
g_permission_release: function(permission: PGPermission; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_permission_release_async: procedure(permission: PGPermission; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_permission_release_finish: function(permission: PGPermission; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_pollable_input_stream_can_poll: function(stream: PGPollableInputStream): gboolean; cdecl;
g_pollable_input_stream_create_source: function(stream: PGPollableInputStream; cancellable: PGCancellable): PGSource; cdecl;
g_pollable_input_stream_get_type: function:TGType; cdecl;
g_pollable_input_stream_is_readable: function(stream: PGPollableInputStream): gboolean; cdecl;
g_pollable_input_stream_read_nonblocking: function(stream: PGPollableInputStream; buffer: Pgpointer; count: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_pollable_output_stream_can_poll: function(stream: PGPollableOutputStream): gboolean; cdecl;
g_pollable_output_stream_create_source: function(stream: PGPollableOutputStream; cancellable: PGCancellable): PGSource; cdecl;
g_pollable_output_stream_get_type: function:TGType; cdecl;
g_pollable_output_stream_is_writable: function(stream: PGPollableOutputStream): gboolean; cdecl;
g_pollable_output_stream_write_nonblocking: function(stream: PGPollableOutputStream; buffer: Pguint8; count: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_pollable_source_new: function(pollable_stream: PGObject): PGSource; cdecl;
g_pollable_source_new_full: function(pollable_stream: PGObject; child_source: PGSource; cancellable: PGCancellable): PGSource; cdecl;
g_pollable_stream_read: function(stream: PGInputStream; buffer: Pgpointer; count: gsize; blocking: gboolean; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_pollable_stream_write: function(stream: PGOutputStream; buffer: Pguint8; count: gsize; blocking: gboolean; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_pollable_stream_write_all: function(stream: PGOutputStream; buffer: Pguint8; count: gsize; blocking: gboolean; bytes_written: Pgsize; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_proxy_address_enumerator_get_type: function:TGType; cdecl;
g_proxy_address_get_destination_hostname: function(proxy: PGProxyAddress): Pgchar; cdecl;
g_proxy_address_get_destination_port: function(proxy: PGProxyAddress): guint16; cdecl;
g_proxy_address_get_destination_protocol: function(proxy: PGProxyAddress): Pgchar; cdecl;
g_proxy_address_get_password: function(proxy: PGProxyAddress): Pgchar; cdecl;
g_proxy_address_get_protocol: function(proxy: PGProxyAddress): Pgchar; cdecl;
g_proxy_address_get_type: function:TGType; cdecl;
g_proxy_address_get_uri: function(proxy: PGProxyAddress): Pgchar; cdecl;
g_proxy_address_get_username: function(proxy: PGProxyAddress): Pgchar; cdecl;
g_proxy_address_new: function(inetaddr: PGInetAddress; port: guint16; protocol: Pgchar; dest_hostname: Pgchar; dest_port: guint16; username: Pgchar; password: Pgchar): PGProxyAddress; cdecl;
g_proxy_connect: function(proxy: PGProxy; connection: PGIOStream; proxy_address: PGProxyAddress; cancellable: PGCancellable; error: PPGError): PGIOStream; cdecl;
g_proxy_connect_async: procedure(proxy: PGProxy; connection: PGIOStream; proxy_address: PGProxyAddress; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_proxy_connect_finish: function(proxy: PGProxy; result_: PGAsyncResult; error: PPGError): PGIOStream; cdecl;
g_proxy_get_default_for_protocol: function(protocol: Pgchar): PGProxy; cdecl;
g_proxy_get_type: function:TGType; cdecl;
g_proxy_resolver_get_default: function: PGProxyResolver; cdecl;
g_proxy_resolver_get_type: function:TGType; cdecl;
g_proxy_resolver_is_supported: function(resolver: PGProxyResolver): gboolean; cdecl;
g_proxy_resolver_lookup: function(resolver: PGProxyResolver; uri: Pgchar; cancellable: PGCancellable; error: PPGError): PPgchar; cdecl;
g_proxy_resolver_lookup_async: procedure(resolver: PGProxyResolver; uri: Pgchar; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_proxy_resolver_lookup_finish: function(resolver: PGProxyResolver; result_: PGAsyncResult; error: PPGError): PPgchar; cdecl;
g_proxy_supports_hostname: function(proxy: PGProxy): gboolean; cdecl;
g_remote_action_group_activate_action_full: procedure(remote: PGRemoteActionGroup; action_name: Pgchar; parameter: PGVariant; platform_data: PGVariant); cdecl;
g_remote_action_group_change_action_state_full: procedure(remote: PGRemoteActionGroup; action_name: Pgchar; value: PGVariant; platform_data: PGVariant); cdecl;
g_remote_action_group_get_type: function:TGType; cdecl;
g_resolver_error_quark: function: TGQuark; cdecl;
g_resolver_free_addresses: procedure(addresses: PGList); cdecl;
g_resolver_free_targets: procedure(targets: PGList); cdecl;
g_resolver_get_default: function: PGResolver; cdecl;
g_resolver_get_type: function:TGType; cdecl;
g_resolver_lookup_by_address: function(resolver: PGResolver; address: PGInetAddress; cancellable: PGCancellable; error: PPGError): Pgchar; cdecl;
g_resolver_lookup_by_address_async: procedure(resolver: PGResolver; address: PGInetAddress; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_resolver_lookup_by_address_finish: function(resolver: PGResolver; result_: PGAsyncResult; error: PPGError): Pgchar; cdecl;
g_resolver_lookup_by_name: function(resolver: PGResolver; hostname: Pgchar; cancellable: PGCancellable; error: PPGError): PGList; cdecl;
g_resolver_lookup_by_name_async: procedure(resolver: PGResolver; hostname: Pgchar; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_resolver_lookup_by_name_finish: function(resolver: PGResolver; result_: PGAsyncResult; error: PPGError): PGList; cdecl;
g_resolver_lookup_records: function(resolver: PGResolver; rrname: Pgchar; record_type: TGResolverRecordType; cancellable: PGCancellable; error: PPGError): PGList; cdecl;
g_resolver_lookup_records_async: procedure(resolver: PGResolver; rrname: Pgchar; record_type: TGResolverRecordType; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_resolver_lookup_records_finish: function(resolver: PGResolver; result_: PGAsyncResult; error: PPGError): PGList; cdecl;
g_resolver_lookup_service: function(resolver: PGResolver; service: Pgchar; protocol: Pgchar; domain: Pgchar; cancellable: PGCancellable; error: PPGError): PGList; cdecl;
g_resolver_lookup_service_async: procedure(resolver: PGResolver; service: Pgchar; protocol: Pgchar; domain: Pgchar; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_resolver_lookup_service_finish: function(resolver: PGResolver; result_: PGAsyncResult; error: PPGError): PGList; cdecl;
g_resolver_set_default: procedure(resolver: PGResolver); cdecl;
g_resource_enumerate_children: function(resource: PGResource; path: Pgchar; lookup_flags: TGResourceLookupFlags; error: PPGError): PPgchar; cdecl;
g_resource_error_quark: function: TGQuark; cdecl;
g_resource_get_info: function(resource: PGResource; path: Pgchar; lookup_flags: TGResourceLookupFlags; size: Pgsize; flags: Pguint32; error: PPGError): gboolean; cdecl;
g_resource_get_type: function:TGType; cdecl;
g_resource_load: function(filename: Pgchar; error: PPGError): PGResource; cdecl;
g_resource_lookup_data: function(resource: PGResource; path: Pgchar; lookup_flags: TGResourceLookupFlags; error: PPGError): PGBytes; cdecl;
g_resource_new_from_data: function(data: PGBytes; error: PPGError): PGResource; cdecl;
g_resource_open_stream: function(resource: PGResource; path: Pgchar; lookup_flags: TGResourceLookupFlags; error: PPGError): PGInputStream; cdecl;
g_resource_ref: function(resource: PGResource): PGResource; cdecl;
g_resource_unref: procedure(resource: PGResource); cdecl;
g_resources_enumerate_children: function(path: Pgchar; lookup_flags: TGResourceLookupFlags; error: PPGError): PPgchar; cdecl;
g_resources_get_info: function(path: Pgchar; lookup_flags: TGResourceLookupFlags; size: Pgsize; flags: Pguint32; error: PPGError): gboolean; cdecl;
g_resources_lookup_data: function(path: Pgchar; lookup_flags: TGResourceLookupFlags; error: PPGError): PGBytes; cdecl;
g_resources_open_stream: function(path: Pgchar; lookup_flags: TGResourceLookupFlags; error: PPGError): PGInputStream; cdecl;
g_resources_register: procedure(resource: PGResource); cdecl;
g_resources_unregister: procedure(resource: PGResource); cdecl;
g_seekable_can_seek: function(seekable: PGSeekable): gboolean; cdecl;
g_seekable_can_truncate: function(seekable: PGSeekable): gboolean; cdecl;
g_seekable_get_type: function:TGType; cdecl;
g_seekable_seek: function(seekable: PGSeekable; offset: gint64; type_: TGSeekType; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_seekable_tell: function(seekable: PGSeekable): gint64; cdecl;
g_seekable_truncate: function(seekable: PGSeekable; offset: gint64; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_settings_apply: procedure(settings: PGSettings); cdecl;
g_settings_bind: procedure(settings: PGSettings; key: Pgchar; object_: PGObject; property_: Pgchar; flags: TGSettingsBindFlags); cdecl;
g_settings_bind_with_mapping: procedure(settings: PGSettings; key: Pgchar; object_: PGObject; property_: Pgchar; flags: TGSettingsBindFlags; get_mapping: TGSettingsBindGetMapping; set_mapping: TGSettingsBindSetMapping; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
g_settings_bind_writable: procedure(settings: PGSettings; key: Pgchar; object_: PGObject; property_: Pgchar; inverted: gboolean); cdecl;
g_settings_create_action: function(settings: PGSettings; key: Pgchar): PGAction; cdecl;
g_settings_delay: procedure(settings: PGSettings); cdecl;
g_settings_get: procedure(settings: PGSettings; key: Pgchar; format: Pgchar; args: array of const); cdecl;
g_settings_get_boolean: function(settings: PGSettings; key: Pgchar): gboolean; cdecl;
g_settings_get_child: function(settings: PGSettings; name: Pgchar): PGSettings; cdecl;
g_settings_get_double: function(settings: PGSettings; key: Pgchar): gdouble; cdecl;
g_settings_get_enum: function(settings: PGSettings; key: Pgchar): gint; cdecl;
g_settings_get_flags: function(settings: PGSettings; key: Pgchar): guint; cdecl;
g_settings_get_has_unapplied: function(settings: PGSettings): gboolean; cdecl;
g_settings_get_int: function(settings: PGSettings; key: Pgchar): gint; cdecl;
g_settings_get_mapped: function(settings: PGSettings; key: Pgchar; mapping: TGSettingsGetMapping; user_data: gpointer): gpointer; cdecl;
g_settings_get_range: function(settings: PGSettings; key: Pgchar): PGVariant; cdecl;
g_settings_get_string: function(settings: PGSettings; key: Pgchar): Pgchar; cdecl;
g_settings_get_strv: function(settings: PGSettings; key: Pgchar): PPgchar; cdecl;
g_settings_get_type: function:TGType; cdecl;
g_settings_get_uint: function(settings: PGSettings; key: Pgchar): guint; cdecl;
g_settings_get_value: function(settings: PGSettings; key: Pgchar): PGVariant; cdecl;
g_settings_is_writable: function(settings: PGSettings; name: Pgchar): gboolean; cdecl;
g_settings_list_children: function(settings: PGSettings): PPgchar; cdecl;
g_settings_list_keys: function(settings: PGSettings): PPgchar; cdecl;
g_settings_list_relocatable_schemas: function: PPgchar; cdecl;
g_settings_list_schemas: function: PPgchar; cdecl;
g_settings_new: function(schema_id: Pgchar): PGSettings; cdecl;
g_settings_new_full: function(schema: PGSettingsSchema; backend: PGSettingsBackend; path: Pgchar): PGSettings; cdecl;
g_settings_new_with_backend: function(schema_id: Pgchar; backend: PGSettingsBackend): PGSettings; cdecl;
g_settings_new_with_backend_and_path: function(schema_id: Pgchar; backend: PGSettingsBackend; path: Pgchar): PGSettings; cdecl;
g_settings_new_with_path: function(schema_id: Pgchar; path: Pgchar): PGSettings; cdecl;
g_settings_range_check: function(settings: PGSettings; key: Pgchar; value: PGVariant): gboolean; cdecl;
g_settings_reset: procedure(settings: PGSettings; key: Pgchar); cdecl;
g_settings_revert: procedure(settings: PGSettings); cdecl;
g_settings_schema_get_id: function(schema: PGSettingsSchema): Pgchar; cdecl;
g_settings_schema_get_path: function(schema: PGSettingsSchema): Pgchar; cdecl;
g_settings_schema_get_type: function:TGType; cdecl;
g_settings_schema_ref: function(schema: PGSettingsSchema): PGSettingsSchema; cdecl;
g_settings_schema_source_get_default: function: PGSettingsSchemaSource; cdecl;
g_settings_schema_source_get_type: function:TGType; cdecl;
g_settings_schema_source_lookup: function(source: PGSettingsSchemaSource; schema_id: Pgchar; recursive: gboolean): PGSettingsSchema; cdecl;
g_settings_schema_source_new_from_directory: function(directory: Pgchar; parent: PGSettingsSchemaSource; trusted: gboolean; error: PPGError): PGSettingsSchemaSource; cdecl;
g_settings_schema_source_ref: function(source: PGSettingsSchemaSource): PGSettingsSchemaSource; cdecl;
g_settings_schema_source_unref: procedure(source: PGSettingsSchemaSource); cdecl;
g_settings_schema_unref: procedure(schema: PGSettingsSchema); cdecl;
g_settings_set: function(settings: PGSettings; key: Pgchar; format: Pgchar; args: array of const): gboolean; cdecl;
g_settings_set_boolean: function(settings: PGSettings; key: Pgchar; value: gboolean): gboolean; cdecl;
g_settings_set_double: function(settings: PGSettings; key: Pgchar; value: gdouble): gboolean; cdecl;
g_settings_set_enum: function(settings: PGSettings; key: Pgchar; value: gint): gboolean; cdecl;
g_settings_set_flags: function(settings: PGSettings; key: Pgchar; value: guint): gboolean; cdecl;
g_settings_set_int: function(settings: PGSettings; key: Pgchar; value: gint): gboolean; cdecl;
g_settings_set_string: function(settings: PGSettings; key: Pgchar; value: Pgchar): gboolean; cdecl;
g_settings_set_strv: function(settings: PGSettings; key: Pgchar; value: PPgchar): gboolean; cdecl;
g_settings_set_uint: function(settings: PGSettings; key: Pgchar; value: guint): gboolean; cdecl;
g_settings_set_value: function(settings: PGSettings; key: Pgchar; value: PGVariant): gboolean; cdecl;
g_settings_sync: procedure; cdecl;
g_settings_unbind: procedure(object_: gpointer; property_: Pgchar); cdecl;
g_simple_action_get_type: function:TGType; cdecl;
g_simple_action_group_add_entries: procedure(simple: PGSimpleActionGroup; entries: PGActionEntry; n_entries: gint; user_data: gpointer); cdecl;
g_simple_action_group_get_type: function:TGType; cdecl;
g_simple_action_group_insert: procedure(simple: PGSimpleActionGroup; action: PGAction); cdecl;
g_simple_action_group_lookup: function(simple: PGSimpleActionGroup; action_name: Pgchar): PGAction; cdecl;
g_simple_action_group_new: function: PGSimpleActionGroup; cdecl;
g_simple_action_group_remove: procedure(simple: PGSimpleActionGroup; action_name: Pgchar); cdecl;
g_simple_action_new: function(name: Pgchar; parameter_type: PGVariantType): PGSimpleAction; cdecl;
g_simple_action_new_stateful: function(name: Pgchar; parameter_type: PGVariantType; state: PGVariant): PGSimpleAction; cdecl;
g_simple_action_set_enabled: procedure(simple: PGSimpleAction; enabled: gboolean); cdecl;
g_simple_action_set_state: procedure(simple: PGSimpleAction; value: PGVariant); cdecl;
g_simple_async_report_error_in_idle: procedure(object_: PGObject; callback: TGAsyncReadyCallback; user_data: gpointer; domain: TGQuark; code: gint; format: Pgchar; args: array of const); cdecl;
g_simple_async_report_gerror_in_idle: procedure(object_: PGObject; callback: TGAsyncReadyCallback; user_data: gpointer; error: PGError); cdecl;
g_simple_async_report_take_gerror_in_idle: procedure(object_: PGObject; callback: TGAsyncReadyCallback; user_data: gpointer; error: PGError); cdecl;
g_simple_async_result_complete: procedure(simple: PGSimpleAsyncResult); cdecl;
g_simple_async_result_complete_in_idle: procedure(simple: PGSimpleAsyncResult); cdecl;
g_simple_async_result_get_op_res_gboolean: function(simple: PGSimpleAsyncResult): gboolean; cdecl;
g_simple_async_result_get_op_res_gpointer: function(simple: PGSimpleAsyncResult): gpointer; cdecl;
g_simple_async_result_get_op_res_gssize: function(simple: PGSimpleAsyncResult): gssize; cdecl;
g_simple_async_result_get_source_tag: function(simple: PGSimpleAsyncResult): gpointer; cdecl;
g_simple_async_result_get_type: function:TGType; cdecl;
g_simple_async_result_is_valid: function(result_: PGAsyncResult; source: PGObject; source_tag: gpointer): gboolean; cdecl;
g_simple_async_result_new: function(source_object: PGObject; callback: TGAsyncReadyCallback; user_data: gpointer; source_tag: gpointer): PGSimpleAsyncResult; cdecl;
g_simple_async_result_new_error: function(source_object: PGObject; callback: TGAsyncReadyCallback; user_data: gpointer; domain: TGQuark; code: gint; format: Pgchar; args: array of const): PGSimpleAsyncResult; cdecl;
g_simple_async_result_new_from_error: function(source_object: PGObject; callback: TGAsyncReadyCallback; user_data: gpointer; error: PGError): PGSimpleAsyncResult; cdecl;
g_simple_async_result_new_take_error: function(source_object: PGObject; callback: TGAsyncReadyCallback; user_data: gpointer; error: PGError): PGSimpleAsyncResult; cdecl;
g_simple_async_result_propagate_error: function(simple: PGSimpleAsyncResult; error: PPGError): gboolean; cdecl;
g_simple_async_result_run_in_thread: procedure(simple: PGSimpleAsyncResult; func: TGSimpleAsyncThreadFunc; io_priority: gint; cancellable: PGCancellable); cdecl;
g_simple_async_result_set_check_cancellable: procedure(simple: PGSimpleAsyncResult; check_cancellable: PGCancellable); cdecl;
g_simple_async_result_set_error: procedure(simple: PGSimpleAsyncResult; domain: TGQuark; code: gint; format: Pgchar; args: array of const); cdecl;
g_simple_async_result_set_error_va: procedure(simple: PGSimpleAsyncResult; domain: TGQuark; code: gint; format: Pgchar; args: Tva_list); cdecl;
g_simple_async_result_set_from_error: procedure(simple: PGSimpleAsyncResult; error: PGError); cdecl;
g_simple_async_result_set_handle_cancellation: procedure(simple: PGSimpleAsyncResult; handle_cancellation: gboolean); cdecl;
g_simple_async_result_set_op_res_gboolean: procedure(simple: PGSimpleAsyncResult; op_res: gboolean); cdecl;
g_simple_async_result_set_op_res_gpointer: procedure(simple: PGSimpleAsyncResult; op_res: gpointer; destroy_op_res: TGDestroyNotify); cdecl;
g_simple_async_result_set_op_res_gssize: procedure(simple: PGSimpleAsyncResult; op_res: gssize); cdecl;
g_simple_async_result_take_error: procedure(simple: PGSimpleAsyncResult; error: PGError); cdecl;
g_simple_permission_get_type: function:TGType; cdecl;
g_simple_permission_new: function(allowed: gboolean): PGSimplePermission; cdecl;
g_simple_proxy_resolver_get_type: function:TGType; cdecl;
g_simple_proxy_resolver_new: function(default_proxy: Pgchar; ignore_hosts: PPgchar): PGProxyResolver; cdecl;
g_simple_proxy_resolver_set_default_proxy: procedure(resolver: PGSimpleProxyResolver; default_proxy: Pgchar); cdecl;
g_simple_proxy_resolver_set_ignore_hosts: procedure(resolver: PGSimpleProxyResolver; ignore_hosts: PPgchar); cdecl;
g_simple_proxy_resolver_set_uri_proxy: procedure(resolver: PGSimpleProxyResolver; uri_scheme: Pgchar; proxy: Pgchar); cdecl;
g_socket_accept: function(socket: PGSocket; cancellable: PGCancellable; error: PPGError): PGSocket; cdecl;
g_socket_address_enumerator_get_type: function:TGType; cdecl;
g_socket_address_enumerator_next: function(enumerator: PGSocketAddressEnumerator; cancellable: PGCancellable; error: PPGError): PGSocketAddress; cdecl;
g_socket_address_enumerator_next_async: procedure(enumerator: PGSocketAddressEnumerator; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_socket_address_enumerator_next_finish: function(enumerator: PGSocketAddressEnumerator; result_: PGAsyncResult; error: PPGError): PGSocketAddress; cdecl;
g_socket_address_get_family: function(address: PGSocketAddress): TGSocketFamily; cdecl;
g_socket_address_get_native_size: function(address: PGSocketAddress): gssize; cdecl;
g_socket_address_get_type: function:TGType; cdecl;
g_socket_address_new_from_native: function(native: gpointer; len: gsize): PGSocketAddress; cdecl;
g_socket_address_to_native: function(address: PGSocketAddress; dest: gpointer; destlen: gsize; error: PPGError): gboolean; cdecl;
g_socket_bind: function(socket: PGSocket; address: PGSocketAddress; allow_reuse: gboolean; error: PPGError): gboolean; cdecl;
g_socket_check_connect_result: function(socket: PGSocket; error: PPGError): gboolean; cdecl;
g_socket_client_add_application_proxy: procedure(client: PGSocketClient; protocol: Pgchar); cdecl;
g_socket_client_connect: function(client: PGSocketClient; connectable: PGSocketConnectable; cancellable: PGCancellable; error: PPGError): PGSocketConnection; cdecl;
g_socket_client_connect_async: procedure(client: PGSocketClient; connectable: PGSocketConnectable; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_socket_client_connect_finish: function(client: PGSocketClient; result_: PGAsyncResult; error: PPGError): PGSocketConnection; cdecl;
g_socket_client_connect_to_host: function(client: PGSocketClient; host_and_port: Pgchar; default_port: guint16; cancellable: PGCancellable; error: PPGError): PGSocketConnection; cdecl;
g_socket_client_connect_to_host_async: procedure(client: PGSocketClient; host_and_port: Pgchar; default_port: guint16; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_socket_client_connect_to_host_finish: function(client: PGSocketClient; result_: PGAsyncResult; error: PPGError): PGSocketConnection; cdecl;
g_socket_client_connect_to_service: function(client: PGSocketClient; domain: Pgchar; service: Pgchar; cancellable: PGCancellable; error: PPGError): PGSocketConnection; cdecl;
g_socket_client_connect_to_service_async: procedure(client: PGSocketClient; domain: Pgchar; service: Pgchar; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_socket_client_connect_to_service_finish: function(client: PGSocketClient; result_: PGAsyncResult; error: PPGError): PGSocketConnection; cdecl;
g_socket_client_connect_to_uri: function(client: PGSocketClient; uri: Pgchar; default_port: guint16; cancellable: PGCancellable; error: PPGError): PGSocketConnection; cdecl;
g_socket_client_connect_to_uri_async: procedure(client: PGSocketClient; uri: Pgchar; default_port: guint16; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_socket_client_connect_to_uri_finish: function(client: PGSocketClient; result_: PGAsyncResult; error: PPGError): PGSocketConnection; cdecl;
g_socket_client_get_enable_proxy: function(client: PGSocketClient): gboolean; cdecl;
g_socket_client_get_family: function(client: PGSocketClient): TGSocketFamily; cdecl;
g_socket_client_get_local_address: function(client: PGSocketClient): PGSocketAddress; cdecl;
g_socket_client_get_protocol: function(client: PGSocketClient): TGSocketProtocol; cdecl;
g_socket_client_get_proxy_resolver: function(client: PGSocketClient): PGProxyResolver; cdecl;
g_socket_client_get_socket_type: function(client: PGSocketClient): TGSocketType; cdecl;
g_socket_client_get_timeout: function(client: PGSocketClient): guint; cdecl;
g_socket_client_get_tls: function(client: PGSocketClient): gboolean; cdecl;
g_socket_client_get_tls_validation_flags: function(client: PGSocketClient): TGTlsCertificateFlags; cdecl;
g_socket_client_get_type: function:TGType; cdecl;
g_socket_client_new: function: PGSocketClient; cdecl;
g_socket_client_set_enable_proxy: procedure(client: PGSocketClient; enable: gboolean); cdecl;
g_socket_client_set_family: procedure(client: PGSocketClient; family: TGSocketFamily); cdecl;
g_socket_client_set_local_address: procedure(client: PGSocketClient; address: PGSocketAddress); cdecl;
g_socket_client_set_protocol: procedure(client: PGSocketClient; protocol: TGSocketProtocol); cdecl;
g_socket_client_set_proxy_resolver: procedure(client: PGSocketClient; proxy_resolver: PGProxyResolver); cdecl;
g_socket_client_set_socket_type: procedure(client: PGSocketClient; type_: TGSocketType); cdecl;
g_socket_client_set_timeout: procedure(client: PGSocketClient; timeout: guint); cdecl;
g_socket_client_set_tls: procedure(client: PGSocketClient; tls: gboolean); cdecl;
g_socket_client_set_tls_validation_flags: procedure(client: PGSocketClient; flags: TGTlsCertificateFlags); cdecl;
g_socket_close: function(socket: PGSocket; error: PPGError): gboolean; cdecl;
g_socket_condition_check: function(socket: PGSocket; condition: TGIOCondition): TGIOCondition; cdecl;
g_socket_condition_timed_wait: function(socket: PGSocket; condition: TGIOCondition; timeout: gint64; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_socket_condition_wait: function(socket: PGSocket; condition: TGIOCondition; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_socket_connect: function(socket: PGSocket; address: PGSocketAddress; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_socket_connectable_enumerate: function(connectable: PGSocketConnectable): PGSocketAddressEnumerator; cdecl;
g_socket_connectable_get_type: function:TGType; cdecl;
g_socket_connectable_proxy_enumerate: function(connectable: PGSocketConnectable): PGSocketAddressEnumerator; cdecl;
g_socket_connection_connect: function(connection: PGSocketConnection; address: PGSocketAddress; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_socket_connection_connect_async: procedure(connection: PGSocketConnection; address: PGSocketAddress; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_socket_connection_connect_finish: function(connection: PGSocketConnection; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_socket_connection_factory_create_connection: function(socket: PGSocket): PGSocketConnection; cdecl;
g_socket_connection_factory_lookup_type: function(family: TGSocketFamily; type_: TGSocketType; protocol_id: gint): TGType; cdecl;
g_socket_connection_factory_register_type: procedure(g_type: TGType; family: TGSocketFamily; type_: TGSocketType; protocol: gint); cdecl;
g_socket_connection_get_local_address: function(connection: PGSocketConnection; error: PPGError): PGSocketAddress; cdecl;
g_socket_connection_get_remote_address: function(connection: PGSocketConnection; error: PPGError): PGSocketAddress; cdecl;
g_socket_connection_get_socket: function(connection: PGSocketConnection): PGSocket; cdecl;
g_socket_connection_get_type: function:TGType; cdecl;
g_socket_connection_is_connected: function(connection: PGSocketConnection): gboolean; cdecl;
g_socket_control_message_deserialize: function(level: gint; type_: gint; size: gsize; data: guint8): PGSocketControlMessage; cdecl;
g_socket_control_message_get_level: function(message: PGSocketControlMessage): gint; cdecl;
g_socket_control_message_get_msg_type: function(message: PGSocketControlMessage): gint; cdecl;
g_socket_control_message_get_size: function(message: PGSocketControlMessage): gsize; cdecl;
g_socket_control_message_get_type: function:TGType; cdecl;
g_socket_control_message_serialize: procedure(message: PGSocketControlMessage; data: gpointer); cdecl;
g_socket_create_source: function(socket: PGSocket; condition: TGIOCondition; cancellable: PGCancellable): PGSource; cdecl;
g_socket_get_available_bytes: function(socket: PGSocket): gssize; cdecl;
g_socket_get_blocking: function(socket: PGSocket): gboolean; cdecl;
g_socket_get_broadcast: function(socket: PGSocket): gboolean; cdecl;
g_socket_get_credentials: function(socket: PGSocket; error: PPGError): PGCredentials; cdecl;
g_socket_get_family: function(socket: PGSocket): TGSocketFamily; cdecl;
g_socket_get_fd: function(socket: PGSocket): gint; cdecl;
g_socket_get_keepalive: function(socket: PGSocket): gboolean; cdecl;
g_socket_get_listen_backlog: function(socket: PGSocket): gint; cdecl;
g_socket_get_local_address: function(socket: PGSocket; error: PPGError): PGSocketAddress; cdecl;
g_socket_get_multicast_loopback: function(socket: PGSocket): gboolean; cdecl;
g_socket_get_multicast_ttl: function(socket: PGSocket): guint; cdecl;
g_socket_get_option: function(socket: PGSocket; level: gint; optname: gint; value: Pgint; error: PPGError): gboolean; cdecl;
g_socket_get_protocol: function(socket: PGSocket): TGSocketProtocol; cdecl;
g_socket_get_remote_address: function(socket: PGSocket; error: PPGError): PGSocketAddress; cdecl;
g_socket_get_socket_type: function(socket: PGSocket): TGSocketType; cdecl;
g_socket_get_timeout: function(socket: PGSocket): guint; cdecl;
g_socket_get_ttl: function(socket: PGSocket): guint; cdecl;
g_socket_get_type: function:TGType; cdecl;
g_socket_is_closed: function(socket: PGSocket): gboolean; cdecl;
g_socket_is_connected: function(socket: PGSocket): gboolean; cdecl;
g_socket_join_multicast_group: function(socket: PGSocket; group: PGInetAddress; source_specific: gboolean; iface: Pgchar; error: PPGError): gboolean; cdecl;
g_socket_leave_multicast_group: function(socket: PGSocket; group: PGInetAddress; source_specific: gboolean; iface: Pgchar; error: PPGError): gboolean; cdecl;
g_socket_listen: function(socket: PGSocket; error: PPGError): gboolean; cdecl;
g_socket_listener_accept: function(listener: PGSocketListener; source_object: PPGObject; cancellable: PGCancellable; error: PPGError): PGSocketConnection; cdecl;
g_socket_listener_accept_async: procedure(listener: PGSocketListener; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_socket_listener_accept_finish: function(listener: PGSocketListener; result_: PGAsyncResult; source_object: PPGObject; error: PPGError): PGSocketConnection; cdecl;
g_socket_listener_accept_socket: function(listener: PGSocketListener; source_object: PPGObject; cancellable: PGCancellable; error: PPGError): PGSocket; cdecl;
g_socket_listener_accept_socket_async: procedure(listener: PGSocketListener; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_socket_listener_accept_socket_finish: function(listener: PGSocketListener; result_: PGAsyncResult; source_object: PPGObject; error: PPGError): PGSocket; cdecl;
g_socket_listener_add_address: function(listener: PGSocketListener; address: PGSocketAddress; type_: TGSocketType; protocol: TGSocketProtocol; source_object: PGObject; effective_address: PPGSocketAddress; error: PPGError): gboolean; cdecl;
g_socket_listener_add_any_inet_port: function(listener: PGSocketListener; source_object: PGObject; error: PPGError): guint16; cdecl;
g_socket_listener_add_inet_port: function(listener: PGSocketListener; port: guint16; source_object: PGObject; error: PPGError): gboolean; cdecl;
g_socket_listener_add_socket: function(listener: PGSocketListener; socket: PGSocket; source_object: PGObject; error: PPGError): gboolean; cdecl;
g_socket_listener_close: procedure(listener: PGSocketListener); cdecl;
g_socket_listener_get_type: function:TGType; cdecl;
g_socket_listener_new: function: PGSocketListener; cdecl;
g_socket_listener_set_backlog: procedure(listener: PGSocketListener; listen_backlog: gint); cdecl;
g_socket_new: function(family: TGSocketFamily; type_: TGSocketType; protocol: TGSocketProtocol; error: PPGError): PGSocket; cdecl;
g_socket_new_from_fd: function(fd: gint; error: PPGError): PGSocket; cdecl;
g_socket_receive: function(socket: PGSocket; buffer: Pgchar; size: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_socket_receive_from: function(socket: PGSocket; address: PPGSocketAddress; buffer: Pgchar; size: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_socket_receive_message: function(socket: PGSocket; address: PPGSocketAddress; vectors: PGInputVector; num_vectors: gint; messages: PPPGSocketControlMessage; num_messages: Pgint; flags: Pgint; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_socket_receive_with_blocking: function(socket: PGSocket; buffer: Pgchar; size: gsize; blocking: gboolean; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_socket_send: function(socket: PGSocket; buffer: Pgchar; size: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_socket_send_message: function(socket: PGSocket; address: PGSocketAddress; vectors: PGOutputVector; num_vectors: gint; messages: PPGSocketControlMessage; num_messages: gint; flags: gint; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_socket_send_to: function(socket: PGSocket; address: PGSocketAddress; buffer: Pgchar; size: gsize; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_socket_send_with_blocking: function(socket: PGSocket; buffer: Pgchar; size: gsize; blocking: gboolean; cancellable: PGCancellable; error: PPGError): gssize; cdecl;
g_socket_service_get_type: function:TGType; cdecl;
g_socket_service_is_active: function(service: PGSocketService): gboolean; cdecl;
g_socket_service_new: function: PGSocketService; cdecl;
g_socket_service_start: procedure(service: PGSocketService); cdecl;
g_socket_service_stop: procedure(service: PGSocketService); cdecl;
g_socket_set_blocking: procedure(socket: PGSocket; blocking: gboolean); cdecl;
g_socket_set_broadcast: procedure(socket: PGSocket; broadcast: gboolean); cdecl;
g_socket_set_keepalive: procedure(socket: PGSocket; keepalive: gboolean); cdecl;
g_socket_set_listen_backlog: procedure(socket: PGSocket; backlog: gint); cdecl;
g_socket_set_multicast_loopback: procedure(socket: PGSocket; loopback: gboolean); cdecl;
g_socket_set_multicast_ttl: procedure(socket: PGSocket; ttl: guint); cdecl;
g_socket_set_option: function(socket: PGSocket; level: gint; optname: gint; value: gint; error: PPGError): gboolean; cdecl;
g_socket_set_timeout: procedure(socket: PGSocket; timeout: guint); cdecl;
g_socket_set_ttl: procedure(socket: PGSocket; ttl: guint); cdecl;
g_socket_shutdown: function(socket: PGSocket; shutdown_read: gboolean; shutdown_write: gboolean; error: PPGError): gboolean; cdecl;
g_socket_speaks_ipv4: function(socket: PGSocket): gboolean; cdecl;
g_srv_target_copy: function(target: PGSrvTarget): PGSrvTarget; cdecl;
g_srv_target_free: procedure(target: PGSrvTarget); cdecl;
g_srv_target_get_hostname: function(target: PGSrvTarget): Pgchar; cdecl;
g_srv_target_get_port: function(target: PGSrvTarget): guint16; cdecl;
g_srv_target_get_priority: function(target: PGSrvTarget): guint16; cdecl;
g_srv_target_get_type: function:TGType; cdecl;
g_srv_target_get_weight: function(target: PGSrvTarget): guint16; cdecl;
g_srv_target_list_sort: function(targets: PGList): PGList; cdecl;
g_srv_target_new: function(hostname: Pgchar; port: guint16; priority: guint16; weight: guint16): PGSrvTarget; cdecl;
g_static_resource_fini: procedure(static_resource: PGStaticResource); cdecl;
g_static_resource_get_resource: function(static_resource: PGStaticResource): PGResource; cdecl;
g_static_resource_init: procedure(static_resource: PGStaticResource); cdecl;
g_task_attach_source: procedure(task: PGTask; source: PGSource; callback: TGSourceFunc); cdecl;
g_task_get_cancellable: function(task: PGTask): PGCancellable; cdecl;
g_task_get_check_cancellable: function(task: PGTask): gboolean; cdecl;
g_task_get_context: function(task: PGTask): PGMainContext; cdecl;
g_task_get_priority: function(task: PGTask): gint; cdecl;
g_task_get_return_on_cancel: function(task: PGTask): gboolean; cdecl;
g_task_get_source_object: function(task: PGTask): PGObject; cdecl;
g_task_get_source_tag: function(task: PGTask): gpointer; cdecl;
g_task_get_task_data: function(task: PGTask): gpointer; cdecl;
g_task_get_type: function:TGType; cdecl;
g_task_had_error: function(task: PGTask): gboolean; cdecl;
g_task_is_valid: function(result_: PGAsyncResult; source_object: PGObject): gboolean; cdecl;
g_task_new: function(source_object: PGObject; cancellable: PGCancellable; callback: TGAsyncReadyCallback; callback_data: gpointer): PGTask; cdecl;
g_task_propagate_boolean: function(task: PGTask; error: PPGError): gboolean; cdecl;
g_task_propagate_int: function(task: PGTask; error: PPGError): gssize; cdecl;
g_task_propagate_pointer: function(task: PGTask; error: PPGError): gpointer; cdecl;
g_task_report_error: procedure(source_object: PGObject; callback: TGAsyncReadyCallback; callback_data: gpointer; source_tag: gpointer; error: PGError); cdecl;
g_task_report_new_error: procedure(source_object: PGObject; callback: TGAsyncReadyCallback; callback_data: gpointer; source_tag: gpointer; domain: TGQuark; code: gint; format: Pgchar; args: array of const); cdecl;
g_task_return_boolean: procedure(task: PGTask; result_: gboolean); cdecl;
g_task_return_error: procedure(task: PGTask; error: PGError); cdecl;
g_task_return_error_if_cancelled: function(task: PGTask): gboolean; cdecl;
g_task_return_int: procedure(task: PGTask; result_: gssize); cdecl;
g_task_return_new_error: procedure(task: PGTask; domain: TGQuark; code: gint; format: Pgchar; args: array of const); cdecl;
g_task_return_pointer: procedure(task: PGTask; result_: gpointer; result_destroy: TGDestroyNotify); cdecl;
g_task_run_in_thread: procedure(task: PGTask; task_func: TGTaskThreadFunc); cdecl;
g_task_run_in_thread_sync: procedure(task: PGTask; task_func: TGTaskThreadFunc); cdecl;
g_task_set_check_cancellable: procedure(task: PGTask; check_cancellable: gboolean); cdecl;
g_task_set_priority: procedure(task: PGTask; priority: gint); cdecl;
g_task_set_return_on_cancel: function(task: PGTask; return_on_cancel: gboolean): gboolean; cdecl;
g_task_set_source_tag: procedure(task: PGTask; source_tag: gpointer); cdecl;
g_task_set_task_data: procedure(task: PGTask; task_data: gpointer; task_data_destroy: TGDestroyNotify); cdecl;
g_tcp_connection_get_graceful_disconnect: function(connection: PGTcpConnection): gboolean; cdecl;
g_tcp_connection_get_type: function:TGType; cdecl;
g_tcp_connection_set_graceful_disconnect: procedure(connection: PGTcpConnection; graceful_disconnect: gboolean); cdecl;
g_tcp_wrapper_connection_get_base_io_stream: function(conn: PGTcpWrapperConnection): PGIOStream; cdecl;
g_tcp_wrapper_connection_get_type: function:TGType; cdecl;
g_tcp_wrapper_connection_new: function(base_io_stream: PGIOStream; socket: PGSocket): PGTcpWrapperConnection; cdecl;
g_test_dbus_add_service_dir: procedure(self: PGTestDBus; path: Pgchar); cdecl;
g_test_dbus_down: procedure(self: PGTestDBus); cdecl;
g_test_dbus_get_bus_address: function(self: PGTestDBus): Pgchar; cdecl;
g_test_dbus_get_flags: function(self: PGTestDBus): TGTestDBusFlags; cdecl;
g_test_dbus_get_type: function:TGType; cdecl;
g_test_dbus_new: function(flags: TGTestDBusFlags): PGTestDBus; cdecl;
g_test_dbus_stop: procedure(self: PGTestDBus); cdecl;
g_test_dbus_unset: procedure; cdecl;
g_test_dbus_up: procedure(self: PGTestDBus); cdecl;
g_themed_icon_append_name: procedure(icon: PGThemedIcon; iconname: Pgchar); cdecl;
g_themed_icon_get_names: function(icon: PGThemedIcon): PPgchar; cdecl;
g_themed_icon_get_type: function:TGType; cdecl;
g_themed_icon_new: function(iconname: Pgchar): PGThemedIcon; cdecl;
g_themed_icon_new_from_names: function(iconnames: PPgchar; len: gint): PGThemedIcon; cdecl;
g_themed_icon_new_with_default_fallbacks: function(iconname: Pgchar): PGThemedIcon; cdecl;
g_themed_icon_prepend_name: procedure(icon: PGThemedIcon; iconname: Pgchar); cdecl;
g_threaded_socket_service_get_type: function:TGType; cdecl;
g_threaded_socket_service_new: function(max_threads: gint): PGThreadedSocketService; cdecl;
g_tls_backend_get_certificate_type: function(backend: PGTlsBackend): TGType; cdecl;
g_tls_backend_get_client_connection_type: function(backend: PGTlsBackend): TGType; cdecl;
g_tls_backend_get_default: function: PGTlsBackend; cdecl;
g_tls_backend_get_default_database: function(backend: PGTlsBackend): PGTlsDatabase; cdecl;
g_tls_backend_get_file_database_type: function(backend: PGTlsBackend): TGType; cdecl;
g_tls_backend_get_server_connection_type: function(backend: PGTlsBackend): TGType; cdecl;
g_tls_backend_get_type: function:TGType; cdecl;
g_tls_backend_supports_tls: function(backend: PGTlsBackend): gboolean; cdecl;
g_tls_certificate_get_issuer: function(cert: PGTlsCertificate): PGTlsCertificate; cdecl;
g_tls_certificate_get_type: function:TGType; cdecl;
g_tls_certificate_is_same: function(cert_one: PGTlsCertificate; cert_two: PGTlsCertificate): gboolean; cdecl;
g_tls_certificate_list_new_from_file: function(file_: Pgchar; error: PPGError): PGList; cdecl;
g_tls_certificate_new_from_file: function(file_: Pgchar; error: PPGError): PGTlsCertificate; cdecl;
g_tls_certificate_new_from_files: function(cert_file: Pgchar; key_file: Pgchar; error: PPGError): PGTlsCertificate; cdecl;
g_tls_certificate_new_from_pem: function(data: Pgchar; length: gssize; error: PPGError): PGTlsCertificate; cdecl;
g_tls_certificate_verify: function(cert: PGTlsCertificate; identity: PGSocketConnectable; trusted_ca: PGTlsCertificate): TGTlsCertificateFlags; cdecl;
g_tls_client_connection_get_accepted_cas: function(conn: PGTlsClientConnection): PGList; cdecl;
g_tls_client_connection_get_server_identity: function(conn: PGTlsClientConnection): PGSocketConnectable; cdecl;
g_tls_client_connection_get_type: function:TGType; cdecl;
g_tls_client_connection_get_use_ssl3: function(conn: PGTlsClientConnection): gboolean; cdecl;
g_tls_client_connection_get_validation_flags: function(conn: PGTlsClientConnection): TGTlsCertificateFlags; cdecl;
g_tls_client_connection_new: function(base_io_stream: PGIOStream; server_identity: PGSocketConnectable; error: PPGError): PGTlsClientConnection; cdecl;
g_tls_client_connection_set_server_identity: procedure(conn: PGTlsClientConnection; identity: PGSocketConnectable); cdecl;
g_tls_client_connection_set_use_ssl3: procedure(conn: PGTlsClientConnection; use_ssl3: gboolean); cdecl;
g_tls_client_connection_set_validation_flags: procedure(conn: PGTlsClientConnection; flags: TGTlsCertificateFlags); cdecl;
g_tls_connection_emit_accept_certificate: function(conn: PGTlsConnection; peer_cert: PGTlsCertificate; errors: TGTlsCertificateFlags): gboolean; cdecl;
g_tls_connection_get_certificate: function(conn: PGTlsConnection): PGTlsCertificate; cdecl;
g_tls_connection_get_database: function(conn: PGTlsConnection): PGTlsDatabase; cdecl;
g_tls_connection_get_interaction: function(conn: PGTlsConnection): PGTlsInteraction; cdecl;
g_tls_connection_get_peer_certificate: function(conn: PGTlsConnection): PGTlsCertificate; cdecl;
g_tls_connection_get_peer_certificate_errors: function(conn: PGTlsConnection): TGTlsCertificateFlags; cdecl;
g_tls_connection_get_rehandshake_mode: function(conn: PGTlsConnection): TGTlsRehandshakeMode; cdecl;
g_tls_connection_get_require_close_notify: function(conn: PGTlsConnection): gboolean; cdecl;
g_tls_connection_get_type: function:TGType; cdecl;
g_tls_connection_handshake: function(conn: PGTlsConnection; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_tls_connection_handshake_async: procedure(conn: PGTlsConnection; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_tls_connection_handshake_finish: function(conn: PGTlsConnection; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_tls_connection_set_certificate: procedure(conn: PGTlsConnection; certificate: PGTlsCertificate); cdecl;
g_tls_connection_set_database: procedure(conn: PGTlsConnection; database: PGTlsDatabase); cdecl;
g_tls_connection_set_interaction: procedure(conn: PGTlsConnection; interaction: PGTlsInteraction); cdecl;
g_tls_connection_set_rehandshake_mode: procedure(conn: PGTlsConnection; mode: TGTlsRehandshakeMode); cdecl;
g_tls_connection_set_require_close_notify: procedure(conn: PGTlsConnection; require_close_notify: gboolean); cdecl;
g_tls_database_create_certificate_handle: function(self: PGTlsDatabase; certificate: PGTlsCertificate): Pgchar; cdecl;
g_tls_database_get_type: function:TGType; cdecl;
g_tls_database_lookup_certificate_for_handle: function(self: PGTlsDatabase; handle: Pgchar; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; error: PPGError): PGTlsCertificate; cdecl;
g_tls_database_lookup_certificate_for_handle_async: procedure(self: PGTlsDatabase; handle: Pgchar; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_tls_database_lookup_certificate_for_handle_finish: function(self: PGTlsDatabase; result_: PGAsyncResult; error: PPGError): PGTlsCertificate; cdecl;
g_tls_database_lookup_certificate_issuer: function(self: PGTlsDatabase; certificate: PGTlsCertificate; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; error: PPGError): PGTlsCertificate; cdecl;
g_tls_database_lookup_certificate_issuer_async: procedure(self: PGTlsDatabase; certificate: PGTlsCertificate; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_tls_database_lookup_certificate_issuer_finish: function(self: PGTlsDatabase; result_: PGAsyncResult; error: PPGError): PGTlsCertificate; cdecl;
g_tls_database_lookup_certificates_issued_by: function(self: PGTlsDatabase; issuer_raw_dn: Pguint8; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; error: PPGError): PGList; cdecl;
g_tls_database_lookup_certificates_issued_by_async: procedure(self: PGTlsDatabase; issuer_raw_dn: Pguint8; interaction: PGTlsInteraction; flags: TGTlsDatabaseLookupFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_tls_database_lookup_certificates_issued_by_finish: function(self: PGTlsDatabase; result_: PGAsyncResult; error: PPGError): PGList; cdecl;
g_tls_database_verify_chain: function(self: PGTlsDatabase; chain: PGTlsCertificate; purpose: Pgchar; identity: PGSocketConnectable; interaction: PGTlsInteraction; flags: TGTlsDatabaseVerifyFlags; cancellable: PGCancellable; error: PPGError): TGTlsCertificateFlags; cdecl;
g_tls_database_verify_chain_async: procedure(self: PGTlsDatabase; chain: PGTlsCertificate; purpose: Pgchar; identity: PGSocketConnectable; interaction: PGTlsInteraction; flags: TGTlsDatabaseVerifyFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_tls_database_verify_chain_finish: function(self: PGTlsDatabase; result_: PGAsyncResult; error: PPGError): TGTlsCertificateFlags; cdecl;
g_tls_error_quark: function: TGQuark; cdecl;
g_tls_file_database_get_type: function:TGType; cdecl;
g_tls_file_database_new: function(anchors: Pgchar; error: PPGError): PGTlsFileDatabase; cdecl;
g_tls_interaction_ask_password: function(interaction: PGTlsInteraction; password: PGTlsPassword; cancellable: PGCancellable; error: PPGError): TGTlsInteractionResult; cdecl;
g_tls_interaction_ask_password_async: procedure(interaction: PGTlsInteraction; password: PGTlsPassword; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_tls_interaction_ask_password_finish: function(interaction: PGTlsInteraction; result_: PGAsyncResult; error: PPGError): TGTlsInteractionResult; cdecl;
g_tls_interaction_get_type: function:TGType; cdecl;
g_tls_interaction_invoke_ask_password: function(interaction: PGTlsInteraction; password: PGTlsPassword; cancellable: PGCancellable; error: PPGError): TGTlsInteractionResult; cdecl;
g_tls_password_get_description: function(password: PGTlsPassword): Pgchar; cdecl;
g_tls_password_get_flags: function(password: PGTlsPassword): TGTlsPasswordFlags; cdecl;
g_tls_password_get_type: function:TGType; cdecl;
g_tls_password_get_value: function(password: PGTlsPassword; length: Pgsize): Pguint8; cdecl;
g_tls_password_get_warning: function(password: PGTlsPassword): Pgchar; cdecl;
g_tls_password_new: function(flags: TGTlsPasswordFlags; description: Pgchar): PGTlsPassword; cdecl;
g_tls_password_set_description: procedure(password: PGTlsPassword; description: Pgchar); cdecl;
g_tls_password_set_flags: procedure(password: PGTlsPassword; flags: TGTlsPasswordFlags); cdecl;
g_tls_password_set_value: procedure(password: PGTlsPassword; value: Pguint8; length: gssize); cdecl;
g_tls_password_set_value_full: procedure(password: PGTlsPassword; value: Pguint8; length: gssize; destroy_: TGDestroyNotify); cdecl;
g_tls_password_set_warning: procedure(password: PGTlsPassword; warning: Pgchar); cdecl;
g_tls_server_connection_get_type: function:TGType; cdecl;
g_tls_server_connection_new: function(base_io_stream: PGIOStream; certificate: PGTlsCertificate; error: PPGError): PGTlsServerConnection; cdecl;
g_unix_connection_get_type: function:TGType; cdecl;
g_unix_connection_receive_credentials: function(connection: PGUnixConnection; cancellable: PGCancellable; error: PPGError): PGCredentials; cdecl;
g_unix_connection_receive_credentials_async: procedure(connection: PGUnixConnection; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_unix_connection_receive_credentials_finish: function(connection: PGUnixConnection; result_: PGAsyncResult; error: PPGError): PGCredentials; cdecl;
g_unix_connection_receive_fd: function(connection: PGUnixConnection; cancellable: PGCancellable; error: PPGError): gint; cdecl;
g_unix_connection_send_credentials: function(connection: PGUnixConnection; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_unix_connection_send_credentials_async: procedure(connection: PGUnixConnection; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_unix_connection_send_credentials_finish: function(connection: PGUnixConnection; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_unix_connection_send_fd: function(connection: PGUnixConnection; fd: gint; cancellable: PGCancellable; error: PPGError): gboolean; cdecl;
g_unix_credentials_message_get_credentials: function(message: PGUnixCredentialsMessage): PGCredentials; cdecl;
g_unix_credentials_message_get_type: function:TGType; cdecl;
g_unix_credentials_message_is_supported: function: gboolean; cdecl;
g_unix_credentials_message_new: function: PGUnixCredentialsMessage; cdecl;
g_unix_credentials_message_new_with_credentials: function(credentials: PGCredentials): PGUnixCredentialsMessage; cdecl;
g_unix_fd_list_append: function(list: PGUnixFDList; fd: gint; error: PPGError): gint; cdecl;
g_unix_fd_list_get: function(list: PGUnixFDList; index_: gint; error: PPGError): gint; cdecl;
g_unix_fd_list_get_length: function(list: PGUnixFDList): gint; cdecl;
g_unix_fd_list_get_type: function:TGType; cdecl;
g_unix_fd_list_new: function: PGUnixFDList; cdecl;
g_unix_fd_list_new_from_array: function(fds: Pgint; n_fds: gint): PGUnixFDList; cdecl;
g_unix_fd_list_peek_fds: function(list: PGUnixFDList; length: Pgint): Pgint; cdecl;
g_unix_fd_list_steal_fds: function(list: PGUnixFDList; length: Pgint): Pgint; cdecl;
g_unix_fd_message_append_fd: function(message: PGUnixFDMessage; fd: gint; error: PPGError): gboolean; cdecl;
g_unix_fd_message_get_fd_list: function(message: PGUnixFDMessage): PGUnixFDList; cdecl;
g_unix_fd_message_get_type: function:TGType; cdecl;
g_unix_fd_message_new: function: PGUnixFDMessage; cdecl;
g_unix_fd_message_new_with_fd_list: function(fd_list: PGUnixFDList): PGUnixFDMessage; cdecl;
g_unix_fd_message_steal_fds: function(message: PGUnixFDMessage; length: Pgint): Pgint; cdecl;
g_unix_input_stream_get_close_fd: function(stream: PGUnixInputStream): gboolean; cdecl;
g_unix_input_stream_get_fd: function(stream: PGUnixInputStream): gint; cdecl;
g_unix_input_stream_get_type: function:TGType; cdecl;
g_unix_input_stream_new: function(fd: gint; close_fd: gboolean): PGUnixInputStream; cdecl;
g_unix_input_stream_set_close_fd: procedure(stream: PGUnixInputStream; close_fd: gboolean); cdecl;
g_unix_is_mount_path_system_internal: function(mount_path: Pgchar): gboolean; cdecl;
g_unix_mount_at: function(mount_path: Pgchar; time_read: Pguint64): PGUnixMountEntry; cdecl;
g_unix_mount_compare: function(mount1: PGUnixMountEntry; mount2: PGUnixMountEntry): gint; cdecl;
g_unix_mount_free: procedure(mount_entry: PGUnixMountEntry); cdecl;
g_unix_mount_get_device_path: function(mount_entry: PGUnixMountEntry): Pgchar; cdecl;
g_unix_mount_get_fs_type: function(mount_entry: PGUnixMountEntry): Pgchar; cdecl;
g_unix_mount_get_mount_path: function(mount_entry: PGUnixMountEntry): Pgchar; cdecl;
g_unix_mount_guess_can_eject: function(mount_entry: PGUnixMountEntry): gboolean; cdecl;
g_unix_mount_guess_icon: function(mount_entry: PGUnixMountEntry): PGIcon; cdecl;
g_unix_mount_guess_name: function(mount_entry: PGUnixMountEntry): Pgchar; cdecl;
g_unix_mount_guess_should_display: function(mount_entry: PGUnixMountEntry): gboolean; cdecl;
g_unix_mount_guess_symbolic_icon: function(mount_entry: PGUnixMountEntry): PGIcon; cdecl;
g_unix_mount_is_readonly: function(mount_entry: PGUnixMountEntry): gboolean; cdecl;
g_unix_mount_is_system_internal: function(mount_entry: PGUnixMountEntry): gboolean; cdecl;
g_unix_mount_monitor_get_type: function:TGType; cdecl;
g_unix_mount_monitor_new: function: PGUnixMountMonitor; cdecl;
g_unix_mount_monitor_set_rate_limit: procedure(mount_monitor: PGUnixMountMonitor; limit_msec: gint); cdecl;
g_unix_mount_point_compare: function(mount1: PGUnixMountPoint; mount2: PGUnixMountPoint): gint; cdecl;
g_unix_mount_point_free: procedure(mount_point: PGUnixMountPoint); cdecl;
g_unix_mount_point_get_device_path: function(mount_point: PGUnixMountPoint): Pgchar; cdecl;
g_unix_mount_point_get_fs_type: function(mount_point: PGUnixMountPoint): Pgchar; cdecl;
g_unix_mount_point_get_mount_path: function(mount_point: PGUnixMountPoint): Pgchar; cdecl;
g_unix_mount_point_get_options: function(mount_point: PGUnixMountPoint): Pgchar; cdecl;
g_unix_mount_point_guess_can_eject: function(mount_point: PGUnixMountPoint): gboolean; cdecl;
g_unix_mount_point_guess_icon: function(mount_point: PGUnixMountPoint): PGIcon; cdecl;
g_unix_mount_point_guess_name: function(mount_point: PGUnixMountPoint): Pgchar; cdecl;
g_unix_mount_point_guess_symbolic_icon: function(mount_point: PGUnixMountPoint): PGIcon; cdecl;
g_unix_mount_point_is_loopback: function(mount_point: PGUnixMountPoint): gboolean; cdecl;
g_unix_mount_point_is_readonly: function(mount_point: PGUnixMountPoint): gboolean; cdecl;
g_unix_mount_point_is_user_mountable: function(mount_point: PGUnixMountPoint): gboolean; cdecl;
g_unix_mount_points_changed_since: function(time: guint64): gboolean; cdecl;
g_unix_mount_points_get: function(time_read: Pguint64): PGList; cdecl;
g_unix_mounts_changed_since: function(time: guint64): gboolean; cdecl;
g_unix_mounts_get: function(time_read: Pguint64): PGList; cdecl;
g_unix_output_stream_get_close_fd: function(stream: PGUnixOutputStream): gboolean; cdecl;
g_unix_output_stream_get_fd: function(stream: PGUnixOutputStream): gint; cdecl;
g_unix_output_stream_get_type: function:TGType; cdecl;
g_unix_output_stream_new: function(fd: gint; close_fd: gboolean): PGUnixOutputStream; cdecl;
g_unix_output_stream_set_close_fd: procedure(stream: PGUnixOutputStream; close_fd: gboolean); cdecl;
g_unix_socket_address_abstract_names_supported: function: gboolean; cdecl;
g_unix_socket_address_get_address_type: function(address: PGUnixSocketAddress): TGUnixSocketAddressType; cdecl;
g_unix_socket_address_get_path: function(address: PGUnixSocketAddress): Pgchar; cdecl;
g_unix_socket_address_get_path_len: function(address: PGUnixSocketAddress): gsize; cdecl;
g_unix_socket_address_get_type: function:TGType; cdecl;
g_unix_socket_address_new: function(path: Pgchar): PGUnixSocketAddress; cdecl;
g_unix_socket_address_new_with_type: function(path: Pgchar; path_len: gint; type_: TGUnixSocketAddressType): PGUnixSocketAddress; cdecl;
g_vfs_get_default: function: PGVfs; cdecl;
g_vfs_get_file_for_path: function(vfs: PGVfs; path: Pgchar): PGFile; cdecl;
g_vfs_get_file_for_uri: function(vfs: PGVfs; uri: Pgchar): PGFile; cdecl;
g_vfs_get_local: function: PGVfs; cdecl;
g_vfs_get_supported_uri_schemes: function(vfs: PGVfs): PPgchar; cdecl;
g_vfs_get_type: function:TGType; cdecl;
g_vfs_is_active: function(vfs: PGVfs): gboolean; cdecl;
g_vfs_parse_name: function(vfs: PGVfs; parse_name: Pgchar): PGFile; cdecl;
g_volume_can_eject: function(volume: PGVolume): gboolean; cdecl;
g_volume_can_mount: function(volume: PGVolume): gboolean; cdecl;
g_volume_eject_with_operation: procedure(volume: PGVolume; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_volume_eject_with_operation_finish: function(volume: PGVolume; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_volume_enumerate_identifiers: function(volume: PGVolume): PPgchar; cdecl;
g_volume_get_activation_root: function(volume: PGVolume): PGFile; cdecl;
g_volume_get_drive: function(volume: PGVolume): PGDrive; cdecl;
g_volume_get_icon: function(volume: PGVolume): PGIcon; cdecl;
g_volume_get_identifier: function(volume: PGVolume; kind: Pgchar): Pgchar; cdecl;
g_volume_get_mount: function(volume: PGVolume): PGMount; cdecl;
g_volume_get_name: function(volume: PGVolume): Pgchar; cdecl;
g_volume_get_sort_key: function(volume: PGVolume): Pgchar; cdecl;
g_volume_get_symbolic_icon: function(volume: PGVolume): PGIcon; cdecl;
g_volume_get_type: function:TGType; cdecl;
g_volume_get_uuid: function(volume: PGVolume): Pgchar; cdecl;
g_volume_monitor_get: function: PGVolumeMonitor; cdecl;
g_volume_monitor_get_connected_drives: function(volume_monitor: PGVolumeMonitor): PGList; cdecl;
g_volume_monitor_get_mount_for_uuid: function(volume_monitor: PGVolumeMonitor; uuid: Pgchar): PGMount; cdecl;
g_volume_monitor_get_mounts: function(volume_monitor: PGVolumeMonitor): PGList; cdecl;
g_volume_monitor_get_type: function:TGType; cdecl;
g_volume_monitor_get_volume_for_uuid: function(volume_monitor: PGVolumeMonitor; uuid: Pgchar): PGVolume; cdecl;
g_volume_monitor_get_volumes: function(volume_monitor: PGVolumeMonitor): PGList; cdecl;
g_volume_mount: procedure(volume: PGVolume; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
g_volume_mount_finish: function(volume: PGVolume; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
g_volume_should_automount: function(volume: PGVolume): gboolean; cdecl;
g_zlib_compressor_get_file_info: function(compressor: PGZlibCompressor): PGFileInfo; cdecl;
g_zlib_compressor_get_type: function:TGType; cdecl;
g_zlib_compressor_new: function(format: TGZlibCompressorFormat; level: gint): PGZlibCompressor; cdecl;
g_zlib_compressor_set_file_info: procedure(compressor: PGZlibCompressor; file_info: PGFileInfo); cdecl;
g_zlib_decompressor_get_file_info: function(decompressor: PGZlibDecompressor): PGFileInfo; cdecl;
g_zlib_decompressor_get_type: function:TGType; cdecl;
g_zlib_decompressor_new: function(format: TGZlibCompressorFormat): PGZlibDecompressor; cdecl;
implementation
uses
  DynLibs;


var
  libgio_2_0_so_0: TLibHandle;
procedure LoadLibraries;
begin
  libgio_2_0_so_0 := SafeLoadLibrary('libgio-2.0.so.0');
end;

procedure LoadProcs;
  procedure LoadProc(var AProc: Pointer; AName: String);
  var
    ProcPtr: Pointer;
  begin
    ProcPtr := GetProcedureAddress(libgio_2_0_so_0, AName);
    AProc := ProcPtr;
  end;
begin
  LoadProc(Pointer(g_action_activate), 'g_action_activate');
  LoadProc(Pointer(g_action_change_state), 'g_action_change_state');
  LoadProc(Pointer(g_action_get_enabled), 'g_action_get_enabled');
  LoadProc(Pointer(g_action_get_name), 'g_action_get_name');
  LoadProc(Pointer(g_action_get_parameter_type), 'g_action_get_parameter_type');
  LoadProc(Pointer(g_action_get_state), 'g_action_get_state');
  LoadProc(Pointer(g_action_get_state_hint), 'g_action_get_state_hint');
  LoadProc(Pointer(g_action_get_state_type), 'g_action_get_state_type');
  LoadProc(Pointer(g_action_get_type), 'g_action_get_type');
  LoadProc(Pointer(g_action_group_action_added), 'g_action_group_action_added');
  LoadProc(Pointer(g_action_group_action_enabled_changed), 'g_action_group_action_enabled_changed');
  LoadProc(Pointer(g_action_group_action_removed), 'g_action_group_action_removed');
  LoadProc(Pointer(g_action_group_action_state_changed), 'g_action_group_action_state_changed');
  LoadProc(Pointer(g_action_group_activate_action), 'g_action_group_activate_action');
  LoadProc(Pointer(g_action_group_change_action_state), 'g_action_group_change_action_state');
  LoadProc(Pointer(g_action_group_get_action_enabled), 'g_action_group_get_action_enabled');
  LoadProc(Pointer(g_action_group_get_action_parameter_type), 'g_action_group_get_action_parameter_type');
  LoadProc(Pointer(g_action_group_get_action_state), 'g_action_group_get_action_state');
  LoadProc(Pointer(g_action_group_get_action_state_hint), 'g_action_group_get_action_state_hint');
  LoadProc(Pointer(g_action_group_get_action_state_type), 'g_action_group_get_action_state_type');
  LoadProc(Pointer(g_action_group_get_type), 'g_action_group_get_type');
  LoadProc(Pointer(g_action_group_has_action), 'g_action_group_has_action');
  LoadProc(Pointer(g_action_group_list_actions), 'g_action_group_list_actions');
  LoadProc(Pointer(g_action_group_query_action), 'g_action_group_query_action');
  LoadProc(Pointer(g_action_map_add_action), 'g_action_map_add_action');
  LoadProc(Pointer(g_action_map_add_action_entries), 'g_action_map_add_action_entries');
  LoadProc(Pointer(g_action_map_get_type), 'g_action_map_get_type');
  LoadProc(Pointer(g_action_map_lookup_action), 'g_action_map_lookup_action');
  LoadProc(Pointer(g_action_map_remove_action), 'g_action_map_remove_action');
  LoadProc(Pointer(g_app_info_add_supports_type), 'g_app_info_add_supports_type');
  LoadProc(Pointer(g_app_info_can_delete), 'g_app_info_can_delete');
  LoadProc(Pointer(g_app_info_can_remove_supports_type), 'g_app_info_can_remove_supports_type');
  LoadProc(Pointer(g_app_info_create_from_commandline), 'g_app_info_create_from_commandline');
  LoadProc(Pointer(g_app_info_delete), 'g_app_info_delete');
  LoadProc(Pointer(g_app_info_dup), 'g_app_info_dup');
  LoadProc(Pointer(g_app_info_equal), 'g_app_info_equal');
  LoadProc(Pointer(g_app_info_get_all), 'g_app_info_get_all');
  LoadProc(Pointer(g_app_info_get_all_for_type), 'g_app_info_get_all_for_type');
  LoadProc(Pointer(g_app_info_get_commandline), 'g_app_info_get_commandline');
  LoadProc(Pointer(g_app_info_get_default_for_type), 'g_app_info_get_default_for_type');
  LoadProc(Pointer(g_app_info_get_default_for_uri_scheme), 'g_app_info_get_default_for_uri_scheme');
  LoadProc(Pointer(g_app_info_get_description), 'g_app_info_get_description');
  LoadProc(Pointer(g_app_info_get_display_name), 'g_app_info_get_display_name');
  LoadProc(Pointer(g_app_info_get_executable), 'g_app_info_get_executable');
  LoadProc(Pointer(g_app_info_get_fallback_for_type), 'g_app_info_get_fallback_for_type');
  LoadProc(Pointer(g_app_info_get_icon), 'g_app_info_get_icon');
  LoadProc(Pointer(g_app_info_get_id), 'g_app_info_get_id');
  LoadProc(Pointer(g_app_info_get_name), 'g_app_info_get_name');
  LoadProc(Pointer(g_app_info_get_recommended_for_type), 'g_app_info_get_recommended_for_type');
  LoadProc(Pointer(g_app_info_get_supported_types), 'g_app_info_get_supported_types');
  LoadProc(Pointer(g_app_info_get_type), 'g_app_info_get_type');
  LoadProc(Pointer(g_app_info_launch), 'g_app_info_launch');
  LoadProc(Pointer(g_app_info_launch_default_for_uri), 'g_app_info_launch_default_for_uri');
  LoadProc(Pointer(g_app_info_launch_uris), 'g_app_info_launch_uris');
  LoadProc(Pointer(g_app_info_remove_supports_type), 'g_app_info_remove_supports_type');
  LoadProc(Pointer(g_app_info_reset_type_associations), 'g_app_info_reset_type_associations');
  LoadProc(Pointer(g_app_info_set_as_default_for_extension), 'g_app_info_set_as_default_for_extension');
  LoadProc(Pointer(g_app_info_set_as_default_for_type), 'g_app_info_set_as_default_for_type');
  LoadProc(Pointer(g_app_info_set_as_last_used_for_type), 'g_app_info_set_as_last_used_for_type');
  LoadProc(Pointer(g_app_info_should_show), 'g_app_info_should_show');
  LoadProc(Pointer(g_app_info_supports_files), 'g_app_info_supports_files');
  LoadProc(Pointer(g_app_info_supports_uris), 'g_app_info_supports_uris');
  LoadProc(Pointer(g_app_launch_context_get_display), 'g_app_launch_context_get_display');
  LoadProc(Pointer(g_app_launch_context_get_environment), 'g_app_launch_context_get_environment');
  LoadProc(Pointer(g_app_launch_context_get_startup_notify_id), 'g_app_launch_context_get_startup_notify_id');
  LoadProc(Pointer(g_app_launch_context_get_type), 'g_app_launch_context_get_type');
  LoadProc(Pointer(g_app_launch_context_launch_failed), 'g_app_launch_context_launch_failed');
  LoadProc(Pointer(g_app_launch_context_new), 'g_app_launch_context_new');
  LoadProc(Pointer(g_app_launch_context_setenv), 'g_app_launch_context_setenv');
  LoadProc(Pointer(g_app_launch_context_unsetenv), 'g_app_launch_context_unsetenv');
  LoadProc(Pointer(g_application_activate), 'g_application_activate');
  LoadProc(Pointer(g_application_command_line_create_file_for_arg), 'g_application_command_line_create_file_for_arg');
  LoadProc(Pointer(g_application_command_line_get_arguments), 'g_application_command_line_get_arguments');
  LoadProc(Pointer(g_application_command_line_get_cwd), 'g_application_command_line_get_cwd');
  LoadProc(Pointer(g_application_command_line_get_environ), 'g_application_command_line_get_environ');
  LoadProc(Pointer(g_application_command_line_get_exit_status), 'g_application_command_line_get_exit_status');
  LoadProc(Pointer(g_application_command_line_get_is_remote), 'g_application_command_line_get_is_remote');
  LoadProc(Pointer(g_application_command_line_get_platform_data), 'g_application_command_line_get_platform_data');
  LoadProc(Pointer(g_application_command_line_get_stdin), 'g_application_command_line_get_stdin');
  LoadProc(Pointer(g_application_command_line_get_type), 'g_application_command_line_get_type');
  LoadProc(Pointer(g_application_command_line_getenv), 'g_application_command_line_getenv');
  LoadProc(Pointer(g_application_command_line_print), 'g_application_command_line_print');
  LoadProc(Pointer(g_application_command_line_printerr), 'g_application_command_line_printerr');
  LoadProc(Pointer(g_application_command_line_set_exit_status), 'g_application_command_line_set_exit_status');
  LoadProc(Pointer(g_application_get_application_id), 'g_application_get_application_id');
  LoadProc(Pointer(g_application_get_dbus_connection), 'g_application_get_dbus_connection');
  LoadProc(Pointer(g_application_get_dbus_object_path), 'g_application_get_dbus_object_path');
  LoadProc(Pointer(g_application_get_default), 'g_application_get_default');
  LoadProc(Pointer(g_application_get_flags), 'g_application_get_flags');
  LoadProc(Pointer(g_application_get_inactivity_timeout), 'g_application_get_inactivity_timeout');
  LoadProc(Pointer(g_application_get_is_registered), 'g_application_get_is_registered');
  LoadProc(Pointer(g_application_get_is_remote), 'g_application_get_is_remote');
  LoadProc(Pointer(g_application_get_type), 'g_application_get_type');
  LoadProc(Pointer(g_application_hold), 'g_application_hold');
  LoadProc(Pointer(g_application_id_is_valid), 'g_application_id_is_valid');
  LoadProc(Pointer(g_application_new), 'g_application_new');
  LoadProc(Pointer(g_application_open), 'g_application_open');
  LoadProc(Pointer(g_application_quit), 'g_application_quit');
  LoadProc(Pointer(g_application_register), 'g_application_register');
  LoadProc(Pointer(g_application_release), 'g_application_release');
  LoadProc(Pointer(g_application_run), 'g_application_run');
  LoadProc(Pointer(g_application_set_application_id), 'g_application_set_application_id');
  LoadProc(Pointer(g_application_set_default), 'g_application_set_default');
  LoadProc(Pointer(g_application_set_flags), 'g_application_set_flags');
  LoadProc(Pointer(g_application_set_inactivity_timeout), 'g_application_set_inactivity_timeout');
  LoadProc(Pointer(g_async_initable_get_type), 'g_async_initable_get_type');
  LoadProc(Pointer(g_async_initable_init_async), 'g_async_initable_init_async');
  LoadProc(Pointer(g_async_initable_init_finish), 'g_async_initable_init_finish');
  LoadProc(Pointer(g_async_initable_new_async), 'g_async_initable_new_async');
  LoadProc(Pointer(g_async_initable_new_finish), 'g_async_initable_new_finish');
  LoadProc(Pointer(g_async_initable_new_valist_async), 'g_async_initable_new_valist_async');
  LoadProc(Pointer(g_async_initable_newv_async), 'g_async_initable_newv_async');
  LoadProc(Pointer(g_async_result_get_source_object), 'g_async_result_get_source_object');
  LoadProc(Pointer(g_async_result_get_type), 'g_async_result_get_type');
  LoadProc(Pointer(g_async_result_get_user_data), 'g_async_result_get_user_data');
  LoadProc(Pointer(g_async_result_is_tagged), 'g_async_result_is_tagged');
  LoadProc(Pointer(g_async_result_legacy_propagate_error), 'g_async_result_legacy_propagate_error');
  LoadProc(Pointer(g_buffered_input_stream_fill), 'g_buffered_input_stream_fill');
  LoadProc(Pointer(g_buffered_input_stream_fill_async), 'g_buffered_input_stream_fill_async');
  LoadProc(Pointer(g_buffered_input_stream_fill_finish), 'g_buffered_input_stream_fill_finish');
  LoadProc(Pointer(g_buffered_input_stream_get_available), 'g_buffered_input_stream_get_available');
  LoadProc(Pointer(g_buffered_input_stream_get_buffer_size), 'g_buffered_input_stream_get_buffer_size');
  LoadProc(Pointer(g_buffered_input_stream_get_type), 'g_buffered_input_stream_get_type');
  LoadProc(Pointer(g_buffered_input_stream_new), 'g_buffered_input_stream_new');
  LoadProc(Pointer(g_buffered_input_stream_new_sized), 'g_buffered_input_stream_new_sized');
  LoadProc(Pointer(g_buffered_input_stream_peek), 'g_buffered_input_stream_peek');
  LoadProc(Pointer(g_buffered_input_stream_peek_buffer), 'g_buffered_input_stream_peek_buffer');
  LoadProc(Pointer(g_buffered_input_stream_read_byte), 'g_buffered_input_stream_read_byte');
  LoadProc(Pointer(g_buffered_input_stream_set_buffer_size), 'g_buffered_input_stream_set_buffer_size');
  LoadProc(Pointer(g_buffered_output_stream_get_auto_grow), 'g_buffered_output_stream_get_auto_grow');
  LoadProc(Pointer(g_buffered_output_stream_get_buffer_size), 'g_buffered_output_stream_get_buffer_size');
  LoadProc(Pointer(g_buffered_output_stream_get_type), 'g_buffered_output_stream_get_type');
  LoadProc(Pointer(g_buffered_output_stream_new), 'g_buffered_output_stream_new');
  LoadProc(Pointer(g_buffered_output_stream_new_sized), 'g_buffered_output_stream_new_sized');
  LoadProc(Pointer(g_buffered_output_stream_set_auto_grow), 'g_buffered_output_stream_set_auto_grow');
  LoadProc(Pointer(g_buffered_output_stream_set_buffer_size), 'g_buffered_output_stream_set_buffer_size');
  LoadProc(Pointer(g_bus_get), 'g_bus_get');
  LoadProc(Pointer(g_bus_get_finish), 'g_bus_get_finish');
  LoadProc(Pointer(g_bus_get_sync), 'g_bus_get_sync');
  LoadProc(Pointer(g_bus_own_name), 'g_bus_own_name');
  LoadProc(Pointer(g_bus_own_name_on_connection), 'g_bus_own_name_on_connection');
  LoadProc(Pointer(g_bus_own_name_on_connection_with_closures), 'g_bus_own_name_on_connection_with_closures');
  LoadProc(Pointer(g_bus_own_name_with_closures), 'g_bus_own_name_with_closures');
  LoadProc(Pointer(g_bus_unown_name), 'g_bus_unown_name');
  LoadProc(Pointer(g_bus_unwatch_name), 'g_bus_unwatch_name');
  LoadProc(Pointer(g_bus_watch_name), 'g_bus_watch_name');
  LoadProc(Pointer(g_bus_watch_name_on_connection), 'g_bus_watch_name_on_connection');
  LoadProc(Pointer(g_bus_watch_name_on_connection_with_closures), 'g_bus_watch_name_on_connection_with_closures');
  LoadProc(Pointer(g_bus_watch_name_with_closures), 'g_bus_watch_name_with_closures');
  LoadProc(Pointer(g_cancellable_cancel), 'g_cancellable_cancel');
  LoadProc(Pointer(g_cancellable_connect), 'g_cancellable_connect');
  LoadProc(Pointer(g_cancellable_disconnect), 'g_cancellable_disconnect');
  LoadProc(Pointer(g_cancellable_get_current), 'g_cancellable_get_current');
  LoadProc(Pointer(g_cancellable_get_fd), 'g_cancellable_get_fd');
  LoadProc(Pointer(g_cancellable_get_type), 'g_cancellable_get_type');
  LoadProc(Pointer(g_cancellable_is_cancelled), 'g_cancellable_is_cancelled');
  LoadProc(Pointer(g_cancellable_make_pollfd), 'g_cancellable_make_pollfd');
  LoadProc(Pointer(g_cancellable_new), 'g_cancellable_new');
  LoadProc(Pointer(g_cancellable_pop_current), 'g_cancellable_pop_current');
  LoadProc(Pointer(g_cancellable_push_current), 'g_cancellable_push_current');
  LoadProc(Pointer(g_cancellable_release_fd), 'g_cancellable_release_fd');
  LoadProc(Pointer(g_cancellable_reset), 'g_cancellable_reset');
  LoadProc(Pointer(g_cancellable_set_error_if_cancelled), 'g_cancellable_set_error_if_cancelled');
  LoadProc(Pointer(g_cancellable_source_new), 'g_cancellable_source_new');
  LoadProc(Pointer(g_charset_converter_get_num_fallbacks), 'g_charset_converter_get_num_fallbacks');
  LoadProc(Pointer(g_charset_converter_get_type), 'g_charset_converter_get_type');
  LoadProc(Pointer(g_charset_converter_get_use_fallback), 'g_charset_converter_get_use_fallback');
  LoadProc(Pointer(g_charset_converter_new), 'g_charset_converter_new');
  LoadProc(Pointer(g_charset_converter_set_use_fallback), 'g_charset_converter_set_use_fallback');
  LoadProc(Pointer(g_content_type_can_be_executable), 'g_content_type_can_be_executable');
  LoadProc(Pointer(g_content_type_equals), 'g_content_type_equals');
  LoadProc(Pointer(g_content_type_from_mime_type), 'g_content_type_from_mime_type');
  LoadProc(Pointer(g_content_type_get_description), 'g_content_type_get_description');
  LoadProc(Pointer(g_content_type_get_generic_icon_name), 'g_content_type_get_generic_icon_name');
  LoadProc(Pointer(g_content_type_get_icon), 'g_content_type_get_icon');
  LoadProc(Pointer(g_content_type_get_mime_type), 'g_content_type_get_mime_type');
  LoadProc(Pointer(g_content_type_get_symbolic_icon), 'g_content_type_get_symbolic_icon');
  LoadProc(Pointer(g_content_type_guess), 'g_content_type_guess');
  LoadProc(Pointer(g_content_type_guess_for_tree), 'g_content_type_guess_for_tree');
  LoadProc(Pointer(g_content_type_is_a), 'g_content_type_is_a');
  LoadProc(Pointer(g_content_type_is_unknown), 'g_content_type_is_unknown');
  LoadProc(Pointer(g_content_types_get_registered), 'g_content_types_get_registered');
  LoadProc(Pointer(g_converter_convert), 'g_converter_convert');
  LoadProc(Pointer(g_converter_get_type), 'g_converter_get_type');
  LoadProc(Pointer(g_converter_input_stream_get_converter), 'g_converter_input_stream_get_converter');
  LoadProc(Pointer(g_converter_input_stream_get_type), 'g_converter_input_stream_get_type');
  LoadProc(Pointer(g_converter_input_stream_new), 'g_converter_input_stream_new');
  LoadProc(Pointer(g_converter_output_stream_get_converter), 'g_converter_output_stream_get_converter');
  LoadProc(Pointer(g_converter_output_stream_get_type), 'g_converter_output_stream_get_type');
  LoadProc(Pointer(g_converter_output_stream_new), 'g_converter_output_stream_new');
  LoadProc(Pointer(g_converter_reset), 'g_converter_reset');
  LoadProc(Pointer(g_credentials_get_native), 'g_credentials_get_native');
  LoadProc(Pointer(g_credentials_get_type), 'g_credentials_get_type');
  LoadProc(Pointer(g_credentials_get_unix_pid), 'g_credentials_get_unix_pid');
  LoadProc(Pointer(g_credentials_get_unix_user), 'g_credentials_get_unix_user');
  LoadProc(Pointer(g_credentials_is_same_user), 'g_credentials_is_same_user');
  LoadProc(Pointer(g_credentials_new), 'g_credentials_new');
  LoadProc(Pointer(g_credentials_set_native), 'g_credentials_set_native');
  LoadProc(Pointer(g_credentials_set_unix_user), 'g_credentials_set_unix_user');
  LoadProc(Pointer(g_credentials_to_string), 'g_credentials_to_string');
  LoadProc(Pointer(g_data_input_stream_get_byte_order), 'g_data_input_stream_get_byte_order');
  LoadProc(Pointer(g_data_input_stream_get_newline_type), 'g_data_input_stream_get_newline_type');
  LoadProc(Pointer(g_data_input_stream_get_type), 'g_data_input_stream_get_type');
  LoadProc(Pointer(g_data_input_stream_new), 'g_data_input_stream_new');
  LoadProc(Pointer(g_data_input_stream_read_byte), 'g_data_input_stream_read_byte');
  LoadProc(Pointer(g_data_input_stream_read_int16), 'g_data_input_stream_read_int16');
  LoadProc(Pointer(g_data_input_stream_read_int32), 'g_data_input_stream_read_int32');
  LoadProc(Pointer(g_data_input_stream_read_int64), 'g_data_input_stream_read_int64');
  LoadProc(Pointer(g_data_input_stream_read_line), 'g_data_input_stream_read_line');
  LoadProc(Pointer(g_data_input_stream_read_line_async), 'g_data_input_stream_read_line_async');
  LoadProc(Pointer(g_data_input_stream_read_line_finish), 'g_data_input_stream_read_line_finish');
  LoadProc(Pointer(g_data_input_stream_read_line_finish_utf8), 'g_data_input_stream_read_line_finish_utf8');
  LoadProc(Pointer(g_data_input_stream_read_line_utf8), 'g_data_input_stream_read_line_utf8');
  LoadProc(Pointer(g_data_input_stream_read_uint16), 'g_data_input_stream_read_uint16');
  LoadProc(Pointer(g_data_input_stream_read_uint32), 'g_data_input_stream_read_uint32');
  LoadProc(Pointer(g_data_input_stream_read_uint64), 'g_data_input_stream_read_uint64');
  LoadProc(Pointer(g_data_input_stream_read_until), 'g_data_input_stream_read_until');
  LoadProc(Pointer(g_data_input_stream_read_until_async), 'g_data_input_stream_read_until_async');
  LoadProc(Pointer(g_data_input_stream_read_until_finish), 'g_data_input_stream_read_until_finish');
  LoadProc(Pointer(g_data_input_stream_read_upto), 'g_data_input_stream_read_upto');
  LoadProc(Pointer(g_data_input_stream_read_upto_async), 'g_data_input_stream_read_upto_async');
  LoadProc(Pointer(g_data_input_stream_read_upto_finish), 'g_data_input_stream_read_upto_finish');
  LoadProc(Pointer(g_data_input_stream_set_byte_order), 'g_data_input_stream_set_byte_order');
  LoadProc(Pointer(g_data_input_stream_set_newline_type), 'g_data_input_stream_set_newline_type');
  LoadProc(Pointer(g_data_output_stream_get_byte_order), 'g_data_output_stream_get_byte_order');
  LoadProc(Pointer(g_data_output_stream_get_type), 'g_data_output_stream_get_type');
  LoadProc(Pointer(g_data_output_stream_new), 'g_data_output_stream_new');
  LoadProc(Pointer(g_data_output_stream_put_byte), 'g_data_output_stream_put_byte');
  LoadProc(Pointer(g_data_output_stream_put_int16), 'g_data_output_stream_put_int16');
  LoadProc(Pointer(g_data_output_stream_put_int32), 'g_data_output_stream_put_int32');
  LoadProc(Pointer(g_data_output_stream_put_int64), 'g_data_output_stream_put_int64');
  LoadProc(Pointer(g_data_output_stream_put_string), 'g_data_output_stream_put_string');
  LoadProc(Pointer(g_data_output_stream_put_uint16), 'g_data_output_stream_put_uint16');
  LoadProc(Pointer(g_data_output_stream_put_uint32), 'g_data_output_stream_put_uint32');
  LoadProc(Pointer(g_data_output_stream_put_uint64), 'g_data_output_stream_put_uint64');
  LoadProc(Pointer(g_data_output_stream_set_byte_order), 'g_data_output_stream_set_byte_order');
  LoadProc(Pointer(g_dbus_action_group_get), 'g_dbus_action_group_get');
  LoadProc(Pointer(g_dbus_action_group_get_type), 'g_dbus_action_group_get_type');
  LoadProc(Pointer(g_dbus_address_escape_value), 'g_dbus_address_escape_value');
  LoadProc(Pointer(g_dbus_address_get_for_bus_sync), 'g_dbus_address_get_for_bus_sync');
  LoadProc(Pointer(g_dbus_address_get_stream), 'g_dbus_address_get_stream');
  LoadProc(Pointer(g_dbus_address_get_stream_finish), 'g_dbus_address_get_stream_finish');
  LoadProc(Pointer(g_dbus_address_get_stream_sync), 'g_dbus_address_get_stream_sync');
  LoadProc(Pointer(g_dbus_annotation_info_get_type), 'g_dbus_annotation_info_get_type');
  LoadProc(Pointer(g_dbus_annotation_info_lookup), 'g_dbus_annotation_info_lookup');
  LoadProc(Pointer(g_dbus_annotation_info_ref), 'g_dbus_annotation_info_ref');
  LoadProc(Pointer(g_dbus_annotation_info_unref), 'g_dbus_annotation_info_unref');
  LoadProc(Pointer(g_dbus_arg_info_get_type), 'g_dbus_arg_info_get_type');
  LoadProc(Pointer(g_dbus_arg_info_ref), 'g_dbus_arg_info_ref');
  LoadProc(Pointer(g_dbus_arg_info_unref), 'g_dbus_arg_info_unref');
  LoadProc(Pointer(g_dbus_auth_observer_allow_mechanism), 'g_dbus_auth_observer_allow_mechanism');
  LoadProc(Pointer(g_dbus_auth_observer_authorize_authenticated_peer), 'g_dbus_auth_observer_authorize_authenticated_peer');
  LoadProc(Pointer(g_dbus_auth_observer_get_type), 'g_dbus_auth_observer_get_type');
  LoadProc(Pointer(g_dbus_auth_observer_new), 'g_dbus_auth_observer_new');
  LoadProc(Pointer(g_dbus_connection_add_filter), 'g_dbus_connection_add_filter');
  LoadProc(Pointer(g_dbus_connection_call), 'g_dbus_connection_call');
  LoadProc(Pointer(g_dbus_connection_call_finish), 'g_dbus_connection_call_finish');
  LoadProc(Pointer(g_dbus_connection_call_sync), 'g_dbus_connection_call_sync');
  LoadProc(Pointer(g_dbus_connection_call_with_unix_fd_list), 'g_dbus_connection_call_with_unix_fd_list');
  LoadProc(Pointer(g_dbus_connection_call_with_unix_fd_list_finish), 'g_dbus_connection_call_with_unix_fd_list_finish');
  LoadProc(Pointer(g_dbus_connection_call_with_unix_fd_list_sync), 'g_dbus_connection_call_with_unix_fd_list_sync');
  LoadProc(Pointer(g_dbus_connection_close), 'g_dbus_connection_close');
  LoadProc(Pointer(g_dbus_connection_close_finish), 'g_dbus_connection_close_finish');
  LoadProc(Pointer(g_dbus_connection_close_sync), 'g_dbus_connection_close_sync');
  LoadProc(Pointer(g_dbus_connection_emit_signal), 'g_dbus_connection_emit_signal');
  LoadProc(Pointer(g_dbus_connection_export_action_group), 'g_dbus_connection_export_action_group');
  LoadProc(Pointer(g_dbus_connection_export_menu_model), 'g_dbus_connection_export_menu_model');
  LoadProc(Pointer(g_dbus_connection_flush), 'g_dbus_connection_flush');
  LoadProc(Pointer(g_dbus_connection_flush_finish), 'g_dbus_connection_flush_finish');
  LoadProc(Pointer(g_dbus_connection_flush_sync), 'g_dbus_connection_flush_sync');
  LoadProc(Pointer(g_dbus_connection_get_capabilities), 'g_dbus_connection_get_capabilities');
  LoadProc(Pointer(g_dbus_connection_get_exit_on_close), 'g_dbus_connection_get_exit_on_close');
  LoadProc(Pointer(g_dbus_connection_get_guid), 'g_dbus_connection_get_guid');
  LoadProc(Pointer(g_dbus_connection_get_last_serial), 'g_dbus_connection_get_last_serial');
  LoadProc(Pointer(g_dbus_connection_get_peer_credentials), 'g_dbus_connection_get_peer_credentials');
  LoadProc(Pointer(g_dbus_connection_get_stream), 'g_dbus_connection_get_stream');
  LoadProc(Pointer(g_dbus_connection_get_type), 'g_dbus_connection_get_type');
  LoadProc(Pointer(g_dbus_connection_get_unique_name), 'g_dbus_connection_get_unique_name');
  LoadProc(Pointer(g_dbus_connection_is_closed), 'g_dbus_connection_is_closed');
  LoadProc(Pointer(g_dbus_connection_new), 'g_dbus_connection_new');
  LoadProc(Pointer(g_dbus_connection_new_finish), 'g_dbus_connection_new_finish');
  LoadProc(Pointer(g_dbus_connection_new_for_address), 'g_dbus_connection_new_for_address');
  LoadProc(Pointer(g_dbus_connection_new_for_address_finish), 'g_dbus_connection_new_for_address_finish');
  LoadProc(Pointer(g_dbus_connection_new_for_address_sync), 'g_dbus_connection_new_for_address_sync');
  LoadProc(Pointer(g_dbus_connection_new_sync), 'g_dbus_connection_new_sync');
  LoadProc(Pointer(g_dbus_connection_register_object), 'g_dbus_connection_register_object');
  LoadProc(Pointer(g_dbus_connection_register_subtree), 'g_dbus_connection_register_subtree');
  LoadProc(Pointer(g_dbus_connection_remove_filter), 'g_dbus_connection_remove_filter');
  LoadProc(Pointer(g_dbus_connection_send_message), 'g_dbus_connection_send_message');
  LoadProc(Pointer(g_dbus_connection_send_message_with_reply), 'g_dbus_connection_send_message_with_reply');
  LoadProc(Pointer(g_dbus_connection_send_message_with_reply_finish), 'g_dbus_connection_send_message_with_reply_finish');
  LoadProc(Pointer(g_dbus_connection_send_message_with_reply_sync), 'g_dbus_connection_send_message_with_reply_sync');
  LoadProc(Pointer(g_dbus_connection_set_exit_on_close), 'g_dbus_connection_set_exit_on_close');
  LoadProc(Pointer(g_dbus_connection_signal_subscribe), 'g_dbus_connection_signal_subscribe');
  LoadProc(Pointer(g_dbus_connection_signal_unsubscribe), 'g_dbus_connection_signal_unsubscribe');
  LoadProc(Pointer(g_dbus_connection_start_message_processing), 'g_dbus_connection_start_message_processing');
  LoadProc(Pointer(g_dbus_connection_unexport_action_group), 'g_dbus_connection_unexport_action_group');
  LoadProc(Pointer(g_dbus_connection_unexport_menu_model), 'g_dbus_connection_unexport_menu_model');
  LoadProc(Pointer(g_dbus_connection_unregister_object), 'g_dbus_connection_unregister_object');
  LoadProc(Pointer(g_dbus_connection_unregister_subtree), 'g_dbus_connection_unregister_subtree');
  LoadProc(Pointer(g_dbus_error_encode_gerror), 'g_dbus_error_encode_gerror');
  LoadProc(Pointer(g_dbus_error_get_remote_error), 'g_dbus_error_get_remote_error');
  LoadProc(Pointer(g_dbus_error_is_remote_error), 'g_dbus_error_is_remote_error');
  LoadProc(Pointer(g_dbus_error_new_for_dbus_error), 'g_dbus_error_new_for_dbus_error');
  LoadProc(Pointer(g_dbus_error_quark), 'g_dbus_error_quark');
  LoadProc(Pointer(g_dbus_error_register_error), 'g_dbus_error_register_error');
  LoadProc(Pointer(g_dbus_error_register_error_domain), 'g_dbus_error_register_error_domain');
  LoadProc(Pointer(g_dbus_error_set_dbus_error), 'g_dbus_error_set_dbus_error');
  LoadProc(Pointer(g_dbus_error_set_dbus_error_valist), 'g_dbus_error_set_dbus_error_valist');
  LoadProc(Pointer(g_dbus_error_strip_remote_error), 'g_dbus_error_strip_remote_error');
  LoadProc(Pointer(g_dbus_error_unregister_error), 'g_dbus_error_unregister_error');
  LoadProc(Pointer(g_dbus_generate_guid), 'g_dbus_generate_guid');
  LoadProc(Pointer(g_dbus_gvalue_to_gvariant), 'g_dbus_gvalue_to_gvariant');
  LoadProc(Pointer(g_dbus_gvariant_to_gvalue), 'g_dbus_gvariant_to_gvalue');
  LoadProc(Pointer(g_dbus_interface_dup_object), 'g_dbus_interface_dup_object');
  LoadProc(Pointer(g_dbus_interface_get_info), 'g_dbus_interface_get_info');
  LoadProc(Pointer(g_dbus_interface_get_object), 'g_dbus_interface_get_object');
  LoadProc(Pointer(g_dbus_interface_get_type), 'g_dbus_interface_get_type');
  LoadProc(Pointer(g_dbus_interface_info_cache_build), 'g_dbus_interface_info_cache_build');
  LoadProc(Pointer(g_dbus_interface_info_cache_release), 'g_dbus_interface_info_cache_release');
  LoadProc(Pointer(g_dbus_interface_info_generate_xml), 'g_dbus_interface_info_generate_xml');
  LoadProc(Pointer(g_dbus_interface_info_get_type), 'g_dbus_interface_info_get_type');
  LoadProc(Pointer(g_dbus_interface_info_lookup_method), 'g_dbus_interface_info_lookup_method');
  LoadProc(Pointer(g_dbus_interface_info_lookup_property), 'g_dbus_interface_info_lookup_property');
  LoadProc(Pointer(g_dbus_interface_info_lookup_signal), 'g_dbus_interface_info_lookup_signal');
  LoadProc(Pointer(g_dbus_interface_info_ref), 'g_dbus_interface_info_ref');
  LoadProc(Pointer(g_dbus_interface_info_unref), 'g_dbus_interface_info_unref');
  LoadProc(Pointer(g_dbus_interface_set_object), 'g_dbus_interface_set_object');
  LoadProc(Pointer(g_dbus_interface_skeleton_export), 'g_dbus_interface_skeleton_export');
  LoadProc(Pointer(g_dbus_interface_skeleton_flush), 'g_dbus_interface_skeleton_flush');
  LoadProc(Pointer(g_dbus_interface_skeleton_get_connection), 'g_dbus_interface_skeleton_get_connection');
  LoadProc(Pointer(g_dbus_interface_skeleton_get_connections), 'g_dbus_interface_skeleton_get_connections');
  LoadProc(Pointer(g_dbus_interface_skeleton_get_flags), 'g_dbus_interface_skeleton_get_flags');
  LoadProc(Pointer(g_dbus_interface_skeleton_get_info), 'g_dbus_interface_skeleton_get_info');
  LoadProc(Pointer(g_dbus_interface_skeleton_get_object_path), 'g_dbus_interface_skeleton_get_object_path');
  LoadProc(Pointer(g_dbus_interface_skeleton_get_properties), 'g_dbus_interface_skeleton_get_properties');
  LoadProc(Pointer(g_dbus_interface_skeleton_get_type), 'g_dbus_interface_skeleton_get_type');
  LoadProc(Pointer(g_dbus_interface_skeleton_get_vtable), 'g_dbus_interface_skeleton_get_vtable');
  LoadProc(Pointer(g_dbus_interface_skeleton_has_connection), 'g_dbus_interface_skeleton_has_connection');
  LoadProc(Pointer(g_dbus_interface_skeleton_set_flags), 'g_dbus_interface_skeleton_set_flags');
  LoadProc(Pointer(g_dbus_interface_skeleton_unexport), 'g_dbus_interface_skeleton_unexport');
  LoadProc(Pointer(g_dbus_interface_skeleton_unexport_from_connection), 'g_dbus_interface_skeleton_unexport_from_connection');
  LoadProc(Pointer(g_dbus_is_address), 'g_dbus_is_address');
  LoadProc(Pointer(g_dbus_is_guid), 'g_dbus_is_guid');
  LoadProc(Pointer(g_dbus_is_interface_name), 'g_dbus_is_interface_name');
  LoadProc(Pointer(g_dbus_is_member_name), 'g_dbus_is_member_name');
  LoadProc(Pointer(g_dbus_is_name), 'g_dbus_is_name');
  LoadProc(Pointer(g_dbus_is_supported_address), 'g_dbus_is_supported_address');
  LoadProc(Pointer(g_dbus_is_unique_name), 'g_dbus_is_unique_name');
  LoadProc(Pointer(g_dbus_menu_model_get), 'g_dbus_menu_model_get');
  LoadProc(Pointer(g_dbus_menu_model_get_type), 'g_dbus_menu_model_get_type');
  LoadProc(Pointer(g_dbus_message_bytes_needed), 'g_dbus_message_bytes_needed');
  LoadProc(Pointer(g_dbus_message_copy), 'g_dbus_message_copy');
  LoadProc(Pointer(g_dbus_message_get_arg0), 'g_dbus_message_get_arg0');
  LoadProc(Pointer(g_dbus_message_get_body), 'g_dbus_message_get_body');
  LoadProc(Pointer(g_dbus_message_get_byte_order), 'g_dbus_message_get_byte_order');
  LoadProc(Pointer(g_dbus_message_get_destination), 'g_dbus_message_get_destination');
  LoadProc(Pointer(g_dbus_message_get_error_name), 'g_dbus_message_get_error_name');
  LoadProc(Pointer(g_dbus_message_get_flags), 'g_dbus_message_get_flags');
  LoadProc(Pointer(g_dbus_message_get_header), 'g_dbus_message_get_header');
  LoadProc(Pointer(g_dbus_message_get_header_fields), 'g_dbus_message_get_header_fields');
  LoadProc(Pointer(g_dbus_message_get_interface), 'g_dbus_message_get_interface');
  LoadProc(Pointer(g_dbus_message_get_locked), 'g_dbus_message_get_locked');
  LoadProc(Pointer(g_dbus_message_get_member), 'g_dbus_message_get_member');
  LoadProc(Pointer(g_dbus_message_get_message_type), 'g_dbus_message_get_message_type');
  LoadProc(Pointer(g_dbus_message_get_num_unix_fds), 'g_dbus_message_get_num_unix_fds');
  LoadProc(Pointer(g_dbus_message_get_path), 'g_dbus_message_get_path');
  LoadProc(Pointer(g_dbus_message_get_reply_serial), 'g_dbus_message_get_reply_serial');
  LoadProc(Pointer(g_dbus_message_get_sender), 'g_dbus_message_get_sender');
  LoadProc(Pointer(g_dbus_message_get_serial), 'g_dbus_message_get_serial');
  LoadProc(Pointer(g_dbus_message_get_signature), 'g_dbus_message_get_signature');
  LoadProc(Pointer(g_dbus_message_get_type), 'g_dbus_message_get_type');
  LoadProc(Pointer(g_dbus_message_get_unix_fd_list), 'g_dbus_message_get_unix_fd_list');
  LoadProc(Pointer(g_dbus_message_lock), 'g_dbus_message_lock');
  LoadProc(Pointer(g_dbus_message_new), 'g_dbus_message_new');
  LoadProc(Pointer(g_dbus_message_new_from_blob), 'g_dbus_message_new_from_blob');
  LoadProc(Pointer(g_dbus_message_new_method_call), 'g_dbus_message_new_method_call');
  LoadProc(Pointer(g_dbus_message_new_method_error), 'g_dbus_message_new_method_error');
  LoadProc(Pointer(g_dbus_message_new_method_error_literal), 'g_dbus_message_new_method_error_literal');
  LoadProc(Pointer(g_dbus_message_new_method_error_valist), 'g_dbus_message_new_method_error_valist');
  LoadProc(Pointer(g_dbus_message_new_method_reply), 'g_dbus_message_new_method_reply');
  LoadProc(Pointer(g_dbus_message_new_signal), 'g_dbus_message_new_signal');
  LoadProc(Pointer(g_dbus_message_print), 'g_dbus_message_print');
  LoadProc(Pointer(g_dbus_message_set_body), 'g_dbus_message_set_body');
  LoadProc(Pointer(g_dbus_message_set_byte_order), 'g_dbus_message_set_byte_order');
  LoadProc(Pointer(g_dbus_message_set_destination), 'g_dbus_message_set_destination');
  LoadProc(Pointer(g_dbus_message_set_error_name), 'g_dbus_message_set_error_name');
  LoadProc(Pointer(g_dbus_message_set_flags), 'g_dbus_message_set_flags');
  LoadProc(Pointer(g_dbus_message_set_header), 'g_dbus_message_set_header');
  LoadProc(Pointer(g_dbus_message_set_interface), 'g_dbus_message_set_interface');
  LoadProc(Pointer(g_dbus_message_set_member), 'g_dbus_message_set_member');
  LoadProc(Pointer(g_dbus_message_set_message_type), 'g_dbus_message_set_message_type');
  LoadProc(Pointer(g_dbus_message_set_num_unix_fds), 'g_dbus_message_set_num_unix_fds');
  LoadProc(Pointer(g_dbus_message_set_path), 'g_dbus_message_set_path');
  LoadProc(Pointer(g_dbus_message_set_reply_serial), 'g_dbus_message_set_reply_serial');
  LoadProc(Pointer(g_dbus_message_set_sender), 'g_dbus_message_set_sender');
  LoadProc(Pointer(g_dbus_message_set_serial), 'g_dbus_message_set_serial');
  LoadProc(Pointer(g_dbus_message_set_signature), 'g_dbus_message_set_signature');
  LoadProc(Pointer(g_dbus_message_set_unix_fd_list), 'g_dbus_message_set_unix_fd_list');
  LoadProc(Pointer(g_dbus_message_to_blob), 'g_dbus_message_to_blob');
  LoadProc(Pointer(g_dbus_message_to_gerror), 'g_dbus_message_to_gerror');
  LoadProc(Pointer(g_dbus_method_info_get_type), 'g_dbus_method_info_get_type');
  LoadProc(Pointer(g_dbus_method_info_ref), 'g_dbus_method_info_ref');
  LoadProc(Pointer(g_dbus_method_info_unref), 'g_dbus_method_info_unref');
  LoadProc(Pointer(g_dbus_method_invocation_get_connection), 'g_dbus_method_invocation_get_connection');
  LoadProc(Pointer(g_dbus_method_invocation_get_interface_name), 'g_dbus_method_invocation_get_interface_name');
  LoadProc(Pointer(g_dbus_method_invocation_get_message), 'g_dbus_method_invocation_get_message');
  LoadProc(Pointer(g_dbus_method_invocation_get_method_info), 'g_dbus_method_invocation_get_method_info');
  LoadProc(Pointer(g_dbus_method_invocation_get_method_name), 'g_dbus_method_invocation_get_method_name');
  LoadProc(Pointer(g_dbus_method_invocation_get_object_path), 'g_dbus_method_invocation_get_object_path');
  LoadProc(Pointer(g_dbus_method_invocation_get_parameters), 'g_dbus_method_invocation_get_parameters');
  LoadProc(Pointer(g_dbus_method_invocation_get_sender), 'g_dbus_method_invocation_get_sender');
  LoadProc(Pointer(g_dbus_method_invocation_get_type), 'g_dbus_method_invocation_get_type');
  LoadProc(Pointer(g_dbus_method_invocation_get_user_data), 'g_dbus_method_invocation_get_user_data');
  LoadProc(Pointer(g_dbus_method_invocation_return_dbus_error), 'g_dbus_method_invocation_return_dbus_error');
  LoadProc(Pointer(g_dbus_method_invocation_return_error), 'g_dbus_method_invocation_return_error');
  LoadProc(Pointer(g_dbus_method_invocation_return_error_literal), 'g_dbus_method_invocation_return_error_literal');
  LoadProc(Pointer(g_dbus_method_invocation_return_error_valist), 'g_dbus_method_invocation_return_error_valist');
  LoadProc(Pointer(g_dbus_method_invocation_return_gerror), 'g_dbus_method_invocation_return_gerror');
  LoadProc(Pointer(g_dbus_method_invocation_return_value), 'g_dbus_method_invocation_return_value');
  LoadProc(Pointer(g_dbus_method_invocation_return_value_with_unix_fd_list), 'g_dbus_method_invocation_return_value_with_unix_fd_list');
  LoadProc(Pointer(g_dbus_method_invocation_take_error), 'g_dbus_method_invocation_take_error');
  LoadProc(Pointer(g_dbus_node_info_generate_xml), 'g_dbus_node_info_generate_xml');
  LoadProc(Pointer(g_dbus_node_info_get_type), 'g_dbus_node_info_get_type');
  LoadProc(Pointer(g_dbus_node_info_lookup_interface), 'g_dbus_node_info_lookup_interface');
  LoadProc(Pointer(g_dbus_node_info_new_for_xml), 'g_dbus_node_info_new_for_xml');
  LoadProc(Pointer(g_dbus_node_info_ref), 'g_dbus_node_info_ref');
  LoadProc(Pointer(g_dbus_node_info_unref), 'g_dbus_node_info_unref');
  LoadProc(Pointer(g_dbus_object_get_interface), 'g_dbus_object_get_interface');
  LoadProc(Pointer(g_dbus_object_get_interfaces), 'g_dbus_object_get_interfaces');
  LoadProc(Pointer(g_dbus_object_get_object_path), 'g_dbus_object_get_object_path');
  LoadProc(Pointer(g_dbus_object_get_type), 'g_dbus_object_get_type');
  LoadProc(Pointer(g_dbus_object_manager_client_get_connection), 'g_dbus_object_manager_client_get_connection');
  LoadProc(Pointer(g_dbus_object_manager_client_get_flags), 'g_dbus_object_manager_client_get_flags');
  LoadProc(Pointer(g_dbus_object_manager_client_get_name), 'g_dbus_object_manager_client_get_name');
  LoadProc(Pointer(g_dbus_object_manager_client_get_name_owner), 'g_dbus_object_manager_client_get_name_owner');
  LoadProc(Pointer(g_dbus_object_manager_client_get_type), 'g_dbus_object_manager_client_get_type');
  LoadProc(Pointer(g_dbus_object_manager_client_new), 'g_dbus_object_manager_client_new');
  LoadProc(Pointer(g_dbus_object_manager_client_new_finish), 'g_dbus_object_manager_client_new_finish');
  LoadProc(Pointer(g_dbus_object_manager_client_new_for_bus), 'g_dbus_object_manager_client_new_for_bus');
  LoadProc(Pointer(g_dbus_object_manager_client_new_for_bus_finish), 'g_dbus_object_manager_client_new_for_bus_finish');
  LoadProc(Pointer(g_dbus_object_manager_client_new_for_bus_sync), 'g_dbus_object_manager_client_new_for_bus_sync');
  LoadProc(Pointer(g_dbus_object_manager_client_new_sync), 'g_dbus_object_manager_client_new_sync');
  LoadProc(Pointer(g_dbus_object_manager_get_interface), 'g_dbus_object_manager_get_interface');
  LoadProc(Pointer(g_dbus_object_manager_get_object), 'g_dbus_object_manager_get_object');
  LoadProc(Pointer(g_dbus_object_manager_get_object_path), 'g_dbus_object_manager_get_object_path');
  LoadProc(Pointer(g_dbus_object_manager_get_objects), 'g_dbus_object_manager_get_objects');
  LoadProc(Pointer(g_dbus_object_manager_get_type), 'g_dbus_object_manager_get_type');
  LoadProc(Pointer(g_dbus_object_manager_server_export), 'g_dbus_object_manager_server_export');
  LoadProc(Pointer(g_dbus_object_manager_server_export_uniquely), 'g_dbus_object_manager_server_export_uniquely');
  LoadProc(Pointer(g_dbus_object_manager_server_get_connection), 'g_dbus_object_manager_server_get_connection');
  LoadProc(Pointer(g_dbus_object_manager_server_get_type), 'g_dbus_object_manager_server_get_type');
  LoadProc(Pointer(g_dbus_object_manager_server_is_exported), 'g_dbus_object_manager_server_is_exported');
  LoadProc(Pointer(g_dbus_object_manager_server_new), 'g_dbus_object_manager_server_new');
  LoadProc(Pointer(g_dbus_object_manager_server_set_connection), 'g_dbus_object_manager_server_set_connection');
  LoadProc(Pointer(g_dbus_object_manager_server_unexport), 'g_dbus_object_manager_server_unexport');
  LoadProc(Pointer(g_dbus_object_proxy_get_connection), 'g_dbus_object_proxy_get_connection');
  LoadProc(Pointer(g_dbus_object_proxy_get_type), 'g_dbus_object_proxy_get_type');
  LoadProc(Pointer(g_dbus_object_proxy_new), 'g_dbus_object_proxy_new');
  LoadProc(Pointer(g_dbus_object_skeleton_add_interface), 'g_dbus_object_skeleton_add_interface');
  LoadProc(Pointer(g_dbus_object_skeleton_flush), 'g_dbus_object_skeleton_flush');
  LoadProc(Pointer(g_dbus_object_skeleton_get_type), 'g_dbus_object_skeleton_get_type');
  LoadProc(Pointer(g_dbus_object_skeleton_new), 'g_dbus_object_skeleton_new');
  LoadProc(Pointer(g_dbus_object_skeleton_remove_interface), 'g_dbus_object_skeleton_remove_interface');
  LoadProc(Pointer(g_dbus_object_skeleton_remove_interface_by_name), 'g_dbus_object_skeleton_remove_interface_by_name');
  LoadProc(Pointer(g_dbus_object_skeleton_set_object_path), 'g_dbus_object_skeleton_set_object_path');
  LoadProc(Pointer(g_dbus_property_info_get_type), 'g_dbus_property_info_get_type');
  LoadProc(Pointer(g_dbus_property_info_ref), 'g_dbus_property_info_ref');
  LoadProc(Pointer(g_dbus_property_info_unref), 'g_dbus_property_info_unref');
  LoadProc(Pointer(g_dbus_proxy_call), 'g_dbus_proxy_call');
  LoadProc(Pointer(g_dbus_proxy_call_finish), 'g_dbus_proxy_call_finish');
  LoadProc(Pointer(g_dbus_proxy_call_sync), 'g_dbus_proxy_call_sync');
  LoadProc(Pointer(g_dbus_proxy_call_with_unix_fd_list), 'g_dbus_proxy_call_with_unix_fd_list');
  LoadProc(Pointer(g_dbus_proxy_call_with_unix_fd_list_finish), 'g_dbus_proxy_call_with_unix_fd_list_finish');
  LoadProc(Pointer(g_dbus_proxy_call_with_unix_fd_list_sync), 'g_dbus_proxy_call_with_unix_fd_list_sync');
  LoadProc(Pointer(g_dbus_proxy_get_cached_property), 'g_dbus_proxy_get_cached_property');
  LoadProc(Pointer(g_dbus_proxy_get_cached_property_names), 'g_dbus_proxy_get_cached_property_names');
  LoadProc(Pointer(g_dbus_proxy_get_connection), 'g_dbus_proxy_get_connection');
  LoadProc(Pointer(g_dbus_proxy_get_default_timeout), 'g_dbus_proxy_get_default_timeout');
  LoadProc(Pointer(g_dbus_proxy_get_flags), 'g_dbus_proxy_get_flags');
  LoadProc(Pointer(g_dbus_proxy_get_interface_info), 'g_dbus_proxy_get_interface_info');
  LoadProc(Pointer(g_dbus_proxy_get_interface_name), 'g_dbus_proxy_get_interface_name');
  LoadProc(Pointer(g_dbus_proxy_get_name), 'g_dbus_proxy_get_name');
  LoadProc(Pointer(g_dbus_proxy_get_name_owner), 'g_dbus_proxy_get_name_owner');
  LoadProc(Pointer(g_dbus_proxy_get_object_path), 'g_dbus_proxy_get_object_path');
  LoadProc(Pointer(g_dbus_proxy_get_type), 'g_dbus_proxy_get_type');
  LoadProc(Pointer(g_dbus_proxy_new), 'g_dbus_proxy_new');
  LoadProc(Pointer(g_dbus_proxy_new_finish), 'g_dbus_proxy_new_finish');
  LoadProc(Pointer(g_dbus_proxy_new_for_bus), 'g_dbus_proxy_new_for_bus');
  LoadProc(Pointer(g_dbus_proxy_new_for_bus_finish), 'g_dbus_proxy_new_for_bus_finish');
  LoadProc(Pointer(g_dbus_proxy_new_for_bus_sync), 'g_dbus_proxy_new_for_bus_sync');
  LoadProc(Pointer(g_dbus_proxy_new_sync), 'g_dbus_proxy_new_sync');
  LoadProc(Pointer(g_dbus_proxy_set_cached_property), 'g_dbus_proxy_set_cached_property');
  LoadProc(Pointer(g_dbus_proxy_set_default_timeout), 'g_dbus_proxy_set_default_timeout');
  LoadProc(Pointer(g_dbus_proxy_set_interface_info), 'g_dbus_proxy_set_interface_info');
  LoadProc(Pointer(g_dbus_server_get_client_address), 'g_dbus_server_get_client_address');
  LoadProc(Pointer(g_dbus_server_get_flags), 'g_dbus_server_get_flags');
  LoadProc(Pointer(g_dbus_server_get_guid), 'g_dbus_server_get_guid');
  LoadProc(Pointer(g_dbus_server_get_type), 'g_dbus_server_get_type');
  LoadProc(Pointer(g_dbus_server_is_active), 'g_dbus_server_is_active');
  LoadProc(Pointer(g_dbus_server_new_sync), 'g_dbus_server_new_sync');
  LoadProc(Pointer(g_dbus_server_start), 'g_dbus_server_start');
  LoadProc(Pointer(g_dbus_server_stop), 'g_dbus_server_stop');
  LoadProc(Pointer(g_dbus_signal_info_get_type), 'g_dbus_signal_info_get_type');
  LoadProc(Pointer(g_dbus_signal_info_ref), 'g_dbus_signal_info_ref');
  LoadProc(Pointer(g_dbus_signal_info_unref), 'g_dbus_signal_info_unref');
  LoadProc(Pointer(g_desktop_app_info_get_boolean), 'g_desktop_app_info_get_boolean');
  LoadProc(Pointer(g_desktop_app_info_get_categories), 'g_desktop_app_info_get_categories');
  LoadProc(Pointer(g_desktop_app_info_get_filename), 'g_desktop_app_info_get_filename');
  LoadProc(Pointer(g_desktop_app_info_get_generic_name), 'g_desktop_app_info_get_generic_name');
  LoadProc(Pointer(g_desktop_app_info_get_is_hidden), 'g_desktop_app_info_get_is_hidden');
  LoadProc(Pointer(g_desktop_app_info_get_keywords), 'g_desktop_app_info_get_keywords');
  LoadProc(Pointer(g_desktop_app_info_get_nodisplay), 'g_desktop_app_info_get_nodisplay');
  LoadProc(Pointer(g_desktop_app_info_get_show_in), 'g_desktop_app_info_get_show_in');
  LoadProc(Pointer(g_desktop_app_info_get_startup_wm_class), 'g_desktop_app_info_get_startup_wm_class');
  LoadProc(Pointer(g_desktop_app_info_get_string), 'g_desktop_app_info_get_string');
  LoadProc(Pointer(g_desktop_app_info_get_type), 'g_desktop_app_info_get_type');
  LoadProc(Pointer(g_desktop_app_info_has_key), 'g_desktop_app_info_has_key');
  LoadProc(Pointer(g_desktop_app_info_launch_uris_as_manager), 'g_desktop_app_info_launch_uris_as_manager');
  LoadProc(Pointer(g_desktop_app_info_lookup_get_type), 'g_desktop_app_info_lookup_get_type');
  LoadProc(Pointer(g_desktop_app_info_new), 'g_desktop_app_info_new');
  LoadProc(Pointer(g_desktop_app_info_new_from_filename), 'g_desktop_app_info_new_from_filename');
  LoadProc(Pointer(g_desktop_app_info_new_from_keyfile), 'g_desktop_app_info_new_from_keyfile');
  LoadProc(Pointer(g_desktop_app_info_set_desktop_env), 'g_desktop_app_info_set_desktop_env');
  LoadProc(Pointer(g_drive_can_eject), 'g_drive_can_eject');
  LoadProc(Pointer(g_drive_can_poll_for_media), 'g_drive_can_poll_for_media');
  LoadProc(Pointer(g_drive_can_start), 'g_drive_can_start');
  LoadProc(Pointer(g_drive_can_start_degraded), 'g_drive_can_start_degraded');
  LoadProc(Pointer(g_drive_can_stop), 'g_drive_can_stop');
  LoadProc(Pointer(g_drive_eject_with_operation), 'g_drive_eject_with_operation');
  LoadProc(Pointer(g_drive_eject_with_operation_finish), 'g_drive_eject_with_operation_finish');
  LoadProc(Pointer(g_drive_enumerate_identifiers), 'g_drive_enumerate_identifiers');
  LoadProc(Pointer(g_drive_get_icon), 'g_drive_get_icon');
  LoadProc(Pointer(g_drive_get_identifier), 'g_drive_get_identifier');
  LoadProc(Pointer(g_drive_get_name), 'g_drive_get_name');
  LoadProc(Pointer(g_drive_get_sort_key), 'g_drive_get_sort_key');
  LoadProc(Pointer(g_drive_get_start_stop_type), 'g_drive_get_start_stop_type');
  LoadProc(Pointer(g_drive_get_symbolic_icon), 'g_drive_get_symbolic_icon');
  LoadProc(Pointer(g_drive_get_type), 'g_drive_get_type');
  LoadProc(Pointer(g_drive_get_volumes), 'g_drive_get_volumes');
  LoadProc(Pointer(g_drive_has_media), 'g_drive_has_media');
  LoadProc(Pointer(g_drive_has_volumes), 'g_drive_has_volumes');
  LoadProc(Pointer(g_drive_is_media_check_automatic), 'g_drive_is_media_check_automatic');
  LoadProc(Pointer(g_drive_is_media_removable), 'g_drive_is_media_removable');
  LoadProc(Pointer(g_drive_poll_for_media), 'g_drive_poll_for_media');
  LoadProc(Pointer(g_drive_poll_for_media_finish), 'g_drive_poll_for_media_finish');
  LoadProc(Pointer(g_drive_start), 'g_drive_start');
  LoadProc(Pointer(g_drive_start_finish), 'g_drive_start_finish');
  LoadProc(Pointer(g_drive_stop), 'g_drive_stop');
  LoadProc(Pointer(g_drive_stop_finish), 'g_drive_stop_finish');
  LoadProc(Pointer(g_emblem_get_icon), 'g_emblem_get_icon');
  LoadProc(Pointer(g_emblem_get_origin), 'g_emblem_get_origin');
  LoadProc(Pointer(g_emblem_get_type), 'g_emblem_get_type');
  LoadProc(Pointer(g_emblem_new), 'g_emblem_new');
  LoadProc(Pointer(g_emblem_new_with_origin), 'g_emblem_new_with_origin');
  LoadProc(Pointer(g_emblemed_icon_add_emblem), 'g_emblemed_icon_add_emblem');
  LoadProc(Pointer(g_emblemed_icon_clear_emblems), 'g_emblemed_icon_clear_emblems');
  LoadProc(Pointer(g_emblemed_icon_get_emblems), 'g_emblemed_icon_get_emblems');
  LoadProc(Pointer(g_emblemed_icon_get_icon), 'g_emblemed_icon_get_icon');
  LoadProc(Pointer(g_emblemed_icon_get_type), 'g_emblemed_icon_get_type');
  LoadProc(Pointer(g_emblemed_icon_new), 'g_emblemed_icon_new');
  LoadProc(Pointer(g_file_append_to), 'g_file_append_to');
  LoadProc(Pointer(g_file_append_to_async), 'g_file_append_to_async');
  LoadProc(Pointer(g_file_append_to_finish), 'g_file_append_to_finish');
  LoadProc(Pointer(g_file_attribute_info_list_add), 'g_file_attribute_info_list_add');
  LoadProc(Pointer(g_file_attribute_info_list_dup), 'g_file_attribute_info_list_dup');
  LoadProc(Pointer(g_file_attribute_info_list_get_type), 'g_file_attribute_info_list_get_type');
  LoadProc(Pointer(g_file_attribute_info_list_lookup), 'g_file_attribute_info_list_lookup');
  LoadProc(Pointer(g_file_attribute_info_list_new), 'g_file_attribute_info_list_new');
  LoadProc(Pointer(g_file_attribute_info_list_ref), 'g_file_attribute_info_list_ref');
  LoadProc(Pointer(g_file_attribute_info_list_unref), 'g_file_attribute_info_list_unref');
  LoadProc(Pointer(g_file_attribute_matcher_enumerate_namespace), 'g_file_attribute_matcher_enumerate_namespace');
  LoadProc(Pointer(g_file_attribute_matcher_enumerate_next), 'g_file_attribute_matcher_enumerate_next');
  LoadProc(Pointer(g_file_attribute_matcher_get_type), 'g_file_attribute_matcher_get_type');
  LoadProc(Pointer(g_file_attribute_matcher_matches), 'g_file_attribute_matcher_matches');
  LoadProc(Pointer(g_file_attribute_matcher_matches_only), 'g_file_attribute_matcher_matches_only');
  LoadProc(Pointer(g_file_attribute_matcher_new), 'g_file_attribute_matcher_new');
  LoadProc(Pointer(g_file_attribute_matcher_ref), 'g_file_attribute_matcher_ref');
  LoadProc(Pointer(g_file_attribute_matcher_subtract), 'g_file_attribute_matcher_subtract');
  LoadProc(Pointer(g_file_attribute_matcher_to_string), 'g_file_attribute_matcher_to_string');
  LoadProc(Pointer(g_file_attribute_matcher_unref), 'g_file_attribute_matcher_unref');
  LoadProc(Pointer(g_file_copy), 'g_file_copy');
  LoadProc(Pointer(g_file_copy_async), 'g_file_copy_async');
  LoadProc(Pointer(g_file_copy_attributes), 'g_file_copy_attributes');
  LoadProc(Pointer(g_file_copy_finish), 'g_file_copy_finish');
  LoadProc(Pointer(g_file_create), 'g_file_create');
  LoadProc(Pointer(g_file_create_async), 'g_file_create_async');
  LoadProc(Pointer(g_file_create_finish), 'g_file_create_finish');
  LoadProc(Pointer(g_file_create_readwrite), 'g_file_create_readwrite');
  LoadProc(Pointer(g_file_create_readwrite_async), 'g_file_create_readwrite_async');
  LoadProc(Pointer(g_file_create_readwrite_finish), 'g_file_create_readwrite_finish');
  LoadProc(Pointer(g_file_delete), 'g_file_delete');
  LoadProc(Pointer(g_file_delete_async), 'g_file_delete_async');
  LoadProc(Pointer(g_file_delete_finish), 'g_file_delete_finish');
  LoadProc(Pointer(g_file_descriptor_based_get_fd), 'g_file_descriptor_based_get_fd');
  LoadProc(Pointer(g_file_descriptor_based_get_type), 'g_file_descriptor_based_get_type');
  LoadProc(Pointer(g_file_dup), 'g_file_dup');
  LoadProc(Pointer(g_file_eject_mountable_with_operation), 'g_file_eject_mountable_with_operation');
  LoadProc(Pointer(g_file_eject_mountable_with_operation_finish), 'g_file_eject_mountable_with_operation_finish');
  LoadProc(Pointer(g_file_enumerate_children), 'g_file_enumerate_children');
  LoadProc(Pointer(g_file_enumerate_children_async), 'g_file_enumerate_children_async');
  LoadProc(Pointer(g_file_enumerate_children_finish), 'g_file_enumerate_children_finish');
  LoadProc(Pointer(g_file_enumerator_close), 'g_file_enumerator_close');
  LoadProc(Pointer(g_file_enumerator_close_async), 'g_file_enumerator_close_async');
  LoadProc(Pointer(g_file_enumerator_close_finish), 'g_file_enumerator_close_finish');
  LoadProc(Pointer(g_file_enumerator_get_child), 'g_file_enumerator_get_child');
  LoadProc(Pointer(g_file_enumerator_get_container), 'g_file_enumerator_get_container');
  LoadProc(Pointer(g_file_enumerator_get_type), 'g_file_enumerator_get_type');
  LoadProc(Pointer(g_file_enumerator_has_pending), 'g_file_enumerator_has_pending');
  LoadProc(Pointer(g_file_enumerator_is_closed), 'g_file_enumerator_is_closed');
  LoadProc(Pointer(g_file_enumerator_next_file), 'g_file_enumerator_next_file');
  LoadProc(Pointer(g_file_enumerator_next_files_async), 'g_file_enumerator_next_files_async');
  LoadProc(Pointer(g_file_enumerator_next_files_finish), 'g_file_enumerator_next_files_finish');
  LoadProc(Pointer(g_file_enumerator_set_pending), 'g_file_enumerator_set_pending');
  LoadProc(Pointer(g_file_equal), 'g_file_equal');
  LoadProc(Pointer(g_file_find_enclosing_mount), 'g_file_find_enclosing_mount');
  LoadProc(Pointer(g_file_find_enclosing_mount_async), 'g_file_find_enclosing_mount_async');
  LoadProc(Pointer(g_file_find_enclosing_mount_finish), 'g_file_find_enclosing_mount_finish');
  LoadProc(Pointer(g_file_get_basename), 'g_file_get_basename');
  LoadProc(Pointer(g_file_get_child), 'g_file_get_child');
  LoadProc(Pointer(g_file_get_child_for_display_name), 'g_file_get_child_for_display_name');
  LoadProc(Pointer(g_file_get_parent), 'g_file_get_parent');
  LoadProc(Pointer(g_file_get_parse_name), 'g_file_get_parse_name');
  LoadProc(Pointer(g_file_get_path), 'g_file_get_path');
  LoadProc(Pointer(g_file_get_relative_path), 'g_file_get_relative_path');
  LoadProc(Pointer(g_file_get_type), 'g_file_get_type');
  LoadProc(Pointer(g_file_get_uri), 'g_file_get_uri');
  LoadProc(Pointer(g_file_get_uri_scheme), 'g_file_get_uri_scheme');
  LoadProc(Pointer(g_file_has_parent), 'g_file_has_parent');
  LoadProc(Pointer(g_file_has_prefix), 'g_file_has_prefix');
  LoadProc(Pointer(g_file_has_uri_scheme), 'g_file_has_uri_scheme');
  LoadProc(Pointer(g_file_hash), 'g_file_hash');
  LoadProc(Pointer(g_file_icon_get_file), 'g_file_icon_get_file');
  LoadProc(Pointer(g_file_icon_get_type), 'g_file_icon_get_type');
  LoadProc(Pointer(g_file_icon_new), 'g_file_icon_new');
  LoadProc(Pointer(g_file_info_clear_status), 'g_file_info_clear_status');
  LoadProc(Pointer(g_file_info_copy_into), 'g_file_info_copy_into');
  LoadProc(Pointer(g_file_info_dup), 'g_file_info_dup');
  LoadProc(Pointer(g_file_info_get_attribute_as_string), 'g_file_info_get_attribute_as_string');
  LoadProc(Pointer(g_file_info_get_attribute_boolean), 'g_file_info_get_attribute_boolean');
  LoadProc(Pointer(g_file_info_get_attribute_byte_string), 'g_file_info_get_attribute_byte_string');
  LoadProc(Pointer(g_file_info_get_attribute_data), 'g_file_info_get_attribute_data');
  LoadProc(Pointer(g_file_info_get_attribute_int32), 'g_file_info_get_attribute_int32');
  LoadProc(Pointer(g_file_info_get_attribute_int64), 'g_file_info_get_attribute_int64');
  LoadProc(Pointer(g_file_info_get_attribute_object), 'g_file_info_get_attribute_object');
  LoadProc(Pointer(g_file_info_get_attribute_status), 'g_file_info_get_attribute_status');
  LoadProc(Pointer(g_file_info_get_attribute_string), 'g_file_info_get_attribute_string');
  LoadProc(Pointer(g_file_info_get_attribute_stringv), 'g_file_info_get_attribute_stringv');
  LoadProc(Pointer(g_file_info_get_attribute_type), 'g_file_info_get_attribute_type');
  LoadProc(Pointer(g_file_info_get_attribute_uint32), 'g_file_info_get_attribute_uint32');
  LoadProc(Pointer(g_file_info_get_attribute_uint64), 'g_file_info_get_attribute_uint64');
  LoadProc(Pointer(g_file_info_get_content_type), 'g_file_info_get_content_type');
  LoadProc(Pointer(g_file_info_get_deletion_date), 'g_file_info_get_deletion_date');
  LoadProc(Pointer(g_file_info_get_display_name), 'g_file_info_get_display_name');
  LoadProc(Pointer(g_file_info_get_edit_name), 'g_file_info_get_edit_name');
  LoadProc(Pointer(g_file_info_get_etag), 'g_file_info_get_etag');
  LoadProc(Pointer(g_file_info_get_file_type), 'g_file_info_get_file_type');
  LoadProc(Pointer(g_file_info_get_icon), 'g_file_info_get_icon');
  LoadProc(Pointer(g_file_info_get_is_backup), 'g_file_info_get_is_backup');
  LoadProc(Pointer(g_file_info_get_is_hidden), 'g_file_info_get_is_hidden');
  LoadProc(Pointer(g_file_info_get_is_symlink), 'g_file_info_get_is_symlink');
  LoadProc(Pointer(g_file_info_get_modification_time), 'g_file_info_get_modification_time');
  LoadProc(Pointer(g_file_info_get_name), 'g_file_info_get_name');
  LoadProc(Pointer(g_file_info_get_size), 'g_file_info_get_size');
  LoadProc(Pointer(g_file_info_get_sort_order), 'g_file_info_get_sort_order');
  LoadProc(Pointer(g_file_info_get_symbolic_icon), 'g_file_info_get_symbolic_icon');
  LoadProc(Pointer(g_file_info_get_symlink_target), 'g_file_info_get_symlink_target');
  LoadProc(Pointer(g_file_info_get_type), 'g_file_info_get_type');
  LoadProc(Pointer(g_file_info_has_attribute), 'g_file_info_has_attribute');
  LoadProc(Pointer(g_file_info_has_namespace), 'g_file_info_has_namespace');
  LoadProc(Pointer(g_file_info_list_attributes), 'g_file_info_list_attributes');
  LoadProc(Pointer(g_file_info_new), 'g_file_info_new');
  LoadProc(Pointer(g_file_info_remove_attribute), 'g_file_info_remove_attribute');
  LoadProc(Pointer(g_file_info_set_attribute), 'g_file_info_set_attribute');
  LoadProc(Pointer(g_file_info_set_attribute_boolean), 'g_file_info_set_attribute_boolean');
  LoadProc(Pointer(g_file_info_set_attribute_byte_string), 'g_file_info_set_attribute_byte_string');
  LoadProc(Pointer(g_file_info_set_attribute_int32), 'g_file_info_set_attribute_int32');
  LoadProc(Pointer(g_file_info_set_attribute_int64), 'g_file_info_set_attribute_int64');
  LoadProc(Pointer(g_file_info_set_attribute_mask), 'g_file_info_set_attribute_mask');
  LoadProc(Pointer(g_file_info_set_attribute_object), 'g_file_info_set_attribute_object');
  LoadProc(Pointer(g_file_info_set_attribute_status), 'g_file_info_set_attribute_status');
  LoadProc(Pointer(g_file_info_set_attribute_string), 'g_file_info_set_attribute_string');
  LoadProc(Pointer(g_file_info_set_attribute_stringv), 'g_file_info_set_attribute_stringv');
  LoadProc(Pointer(g_file_info_set_attribute_uint32), 'g_file_info_set_attribute_uint32');
  LoadProc(Pointer(g_file_info_set_attribute_uint64), 'g_file_info_set_attribute_uint64');
  LoadProc(Pointer(g_file_info_set_content_type), 'g_file_info_set_content_type');
  LoadProc(Pointer(g_file_info_set_display_name), 'g_file_info_set_display_name');
  LoadProc(Pointer(g_file_info_set_edit_name), 'g_file_info_set_edit_name');
  LoadProc(Pointer(g_file_info_set_file_type), 'g_file_info_set_file_type');
  LoadProc(Pointer(g_file_info_set_icon), 'g_file_info_set_icon');
  LoadProc(Pointer(g_file_info_set_is_hidden), 'g_file_info_set_is_hidden');
  LoadProc(Pointer(g_file_info_set_is_symlink), 'g_file_info_set_is_symlink');
  LoadProc(Pointer(g_file_info_set_modification_time), 'g_file_info_set_modification_time');
  LoadProc(Pointer(g_file_info_set_name), 'g_file_info_set_name');
  LoadProc(Pointer(g_file_info_set_size), 'g_file_info_set_size');
  LoadProc(Pointer(g_file_info_set_sort_order), 'g_file_info_set_sort_order');
  LoadProc(Pointer(g_file_info_set_symbolic_icon), 'g_file_info_set_symbolic_icon');
  LoadProc(Pointer(g_file_info_set_symlink_target), 'g_file_info_set_symlink_target');
  LoadProc(Pointer(g_file_info_unset_attribute_mask), 'g_file_info_unset_attribute_mask');
  LoadProc(Pointer(g_file_input_stream_get_type), 'g_file_input_stream_get_type');
  LoadProc(Pointer(g_file_input_stream_query_info), 'g_file_input_stream_query_info');
  LoadProc(Pointer(g_file_input_stream_query_info_async), 'g_file_input_stream_query_info_async');
  LoadProc(Pointer(g_file_input_stream_query_info_finish), 'g_file_input_stream_query_info_finish');
  LoadProc(Pointer(g_file_io_stream_get_etag), 'g_file_io_stream_get_etag');
  LoadProc(Pointer(g_file_io_stream_get_type), 'g_file_io_stream_get_type');
  LoadProc(Pointer(g_file_io_stream_query_info), 'g_file_io_stream_query_info');
  LoadProc(Pointer(g_file_io_stream_query_info_async), 'g_file_io_stream_query_info_async');
  LoadProc(Pointer(g_file_io_stream_query_info_finish), 'g_file_io_stream_query_info_finish');
  LoadProc(Pointer(g_file_is_native), 'g_file_is_native');
  LoadProc(Pointer(g_file_load_contents), 'g_file_load_contents');
  LoadProc(Pointer(g_file_load_contents_async), 'g_file_load_contents_async');
  LoadProc(Pointer(g_file_load_contents_finish), 'g_file_load_contents_finish');
  LoadProc(Pointer(g_file_load_partial_contents_async), 'g_file_load_partial_contents_async');
  LoadProc(Pointer(g_file_load_partial_contents_finish), 'g_file_load_partial_contents_finish');
  LoadProc(Pointer(g_file_make_directory), 'g_file_make_directory');
  LoadProc(Pointer(g_file_make_directory_with_parents), 'g_file_make_directory_with_parents');
  LoadProc(Pointer(g_file_make_symbolic_link), 'g_file_make_symbolic_link');
  LoadProc(Pointer(g_file_monitor), 'g_file_monitor');
  LoadProc(Pointer(g_file_monitor_cancel), 'g_file_monitor_cancel');
  LoadProc(Pointer(g_file_monitor_directory), 'g_file_monitor_directory');
  LoadProc(Pointer(g_file_monitor_emit_event), 'g_file_monitor_emit_event');
  LoadProc(Pointer(g_file_monitor_file), 'g_file_monitor_file');
  LoadProc(Pointer(g_file_monitor_get_type), 'g_file_monitor_get_type');
  LoadProc(Pointer(g_file_monitor_is_cancelled), 'g_file_monitor_is_cancelled');
  LoadProc(Pointer(g_file_monitor_set_rate_limit), 'g_file_monitor_set_rate_limit');
  LoadProc(Pointer(g_file_mount_enclosing_volume), 'g_file_mount_enclosing_volume');
  LoadProc(Pointer(g_file_mount_enclosing_volume_finish), 'g_file_mount_enclosing_volume_finish');
  LoadProc(Pointer(g_file_mount_mountable), 'g_file_mount_mountable');
  LoadProc(Pointer(g_file_mount_mountable_finish), 'g_file_mount_mountable_finish');
  LoadProc(Pointer(g_file_move), 'g_file_move');
  LoadProc(Pointer(g_file_new_for_commandline_arg), 'g_file_new_for_commandline_arg');
  LoadProc(Pointer(g_file_new_for_commandline_arg_and_cwd), 'g_file_new_for_commandline_arg_and_cwd');
  LoadProc(Pointer(g_file_new_for_path), 'g_file_new_for_path');
  LoadProc(Pointer(g_file_new_for_uri), 'g_file_new_for_uri');
  LoadProc(Pointer(g_file_new_tmp), 'g_file_new_tmp');
  LoadProc(Pointer(g_file_open_readwrite), 'g_file_open_readwrite');
  LoadProc(Pointer(g_file_open_readwrite_async), 'g_file_open_readwrite_async');
  LoadProc(Pointer(g_file_open_readwrite_finish), 'g_file_open_readwrite_finish');
  LoadProc(Pointer(g_file_output_stream_get_etag), 'g_file_output_stream_get_etag');
  LoadProc(Pointer(g_file_output_stream_get_type), 'g_file_output_stream_get_type');
  LoadProc(Pointer(g_file_output_stream_query_info), 'g_file_output_stream_query_info');
  LoadProc(Pointer(g_file_output_stream_query_info_async), 'g_file_output_stream_query_info_async');
  LoadProc(Pointer(g_file_output_stream_query_info_finish), 'g_file_output_stream_query_info_finish');
  LoadProc(Pointer(g_file_parse_name), 'g_file_parse_name');
  LoadProc(Pointer(g_file_poll_mountable), 'g_file_poll_mountable');
  LoadProc(Pointer(g_file_poll_mountable_finish), 'g_file_poll_mountable_finish');
  LoadProc(Pointer(g_file_query_default_handler), 'g_file_query_default_handler');
  LoadProc(Pointer(g_file_query_exists), 'g_file_query_exists');
  LoadProc(Pointer(g_file_query_file_type), 'g_file_query_file_type');
  LoadProc(Pointer(g_file_query_filesystem_info), 'g_file_query_filesystem_info');
  LoadProc(Pointer(g_file_query_filesystem_info_async), 'g_file_query_filesystem_info_async');
  LoadProc(Pointer(g_file_query_filesystem_info_finish), 'g_file_query_filesystem_info_finish');
  LoadProc(Pointer(g_file_query_info), 'g_file_query_info');
  LoadProc(Pointer(g_file_query_info_async), 'g_file_query_info_async');
  LoadProc(Pointer(g_file_query_info_finish), 'g_file_query_info_finish');
  LoadProc(Pointer(g_file_query_settable_attributes), 'g_file_query_settable_attributes');
  LoadProc(Pointer(g_file_query_writable_namespaces), 'g_file_query_writable_namespaces');
  LoadProc(Pointer(g_file_read), 'g_file_read');
  LoadProc(Pointer(g_file_read_async), 'g_file_read_async');
  LoadProc(Pointer(g_file_read_finish), 'g_file_read_finish');
  LoadProc(Pointer(g_file_replace), 'g_file_replace');
  LoadProc(Pointer(g_file_replace_async), 'g_file_replace_async');
  LoadProc(Pointer(g_file_replace_contents), 'g_file_replace_contents');
  LoadProc(Pointer(g_file_replace_contents_async), 'g_file_replace_contents_async');
  LoadProc(Pointer(g_file_replace_contents_finish), 'g_file_replace_contents_finish');
  LoadProc(Pointer(g_file_replace_finish), 'g_file_replace_finish');
  LoadProc(Pointer(g_file_replace_readwrite), 'g_file_replace_readwrite');
  LoadProc(Pointer(g_file_replace_readwrite_async), 'g_file_replace_readwrite_async');
  LoadProc(Pointer(g_file_replace_readwrite_finish), 'g_file_replace_readwrite_finish');
  LoadProc(Pointer(g_file_resolve_relative_path), 'g_file_resolve_relative_path');
  LoadProc(Pointer(g_file_set_attribute), 'g_file_set_attribute');
  LoadProc(Pointer(g_file_set_attribute_byte_string), 'g_file_set_attribute_byte_string');
  LoadProc(Pointer(g_file_set_attribute_int32), 'g_file_set_attribute_int32');
  LoadProc(Pointer(g_file_set_attribute_int64), 'g_file_set_attribute_int64');
  LoadProc(Pointer(g_file_set_attribute_string), 'g_file_set_attribute_string');
  LoadProc(Pointer(g_file_set_attribute_uint32), 'g_file_set_attribute_uint32');
  LoadProc(Pointer(g_file_set_attribute_uint64), 'g_file_set_attribute_uint64');
  LoadProc(Pointer(g_file_set_attributes_async), 'g_file_set_attributes_async');
  LoadProc(Pointer(g_file_set_attributes_finish), 'g_file_set_attributes_finish');
  LoadProc(Pointer(g_file_set_attributes_from_info), 'g_file_set_attributes_from_info');
  LoadProc(Pointer(g_file_set_display_name), 'g_file_set_display_name');
  LoadProc(Pointer(g_file_set_display_name_async), 'g_file_set_display_name_async');
  LoadProc(Pointer(g_file_set_display_name_finish), 'g_file_set_display_name_finish');
  LoadProc(Pointer(g_file_start_mountable), 'g_file_start_mountable');
  LoadProc(Pointer(g_file_start_mountable_finish), 'g_file_start_mountable_finish');
  LoadProc(Pointer(g_file_stop_mountable), 'g_file_stop_mountable');
  LoadProc(Pointer(g_file_stop_mountable_finish), 'g_file_stop_mountable_finish');
  LoadProc(Pointer(g_file_supports_thread_contexts), 'g_file_supports_thread_contexts');
  LoadProc(Pointer(g_file_trash), 'g_file_trash');
  LoadProc(Pointer(g_file_unmount_mountable_with_operation), 'g_file_unmount_mountable_with_operation');
  LoadProc(Pointer(g_file_unmount_mountable_with_operation_finish), 'g_file_unmount_mountable_with_operation_finish');
  LoadProc(Pointer(g_filename_completer_get_completion_suffix), 'g_filename_completer_get_completion_suffix');
  LoadProc(Pointer(g_filename_completer_get_completions), 'g_filename_completer_get_completions');
  LoadProc(Pointer(g_filename_completer_get_type), 'g_filename_completer_get_type');
  LoadProc(Pointer(g_filename_completer_new), 'g_filename_completer_new');
  LoadProc(Pointer(g_filename_completer_set_dirs_only), 'g_filename_completer_set_dirs_only');
  LoadProc(Pointer(g_filter_input_stream_get_base_stream), 'g_filter_input_stream_get_base_stream');
  LoadProc(Pointer(g_filter_input_stream_get_close_base_stream), 'g_filter_input_stream_get_close_base_stream');
  LoadProc(Pointer(g_filter_input_stream_get_type), 'g_filter_input_stream_get_type');
  LoadProc(Pointer(g_filter_input_stream_set_close_base_stream), 'g_filter_input_stream_set_close_base_stream');
  LoadProc(Pointer(g_filter_output_stream_get_base_stream), 'g_filter_output_stream_get_base_stream');
  LoadProc(Pointer(g_filter_output_stream_get_close_base_stream), 'g_filter_output_stream_get_close_base_stream');
  LoadProc(Pointer(g_filter_output_stream_get_type), 'g_filter_output_stream_get_type');
  LoadProc(Pointer(g_filter_output_stream_set_close_base_stream), 'g_filter_output_stream_set_close_base_stream');
  LoadProc(Pointer(g_icon_equal), 'g_icon_equal');
  LoadProc(Pointer(g_icon_get_type), 'g_icon_get_type');
  LoadProc(Pointer(g_icon_hash), 'g_icon_hash');
  LoadProc(Pointer(g_icon_new_for_string), 'g_icon_new_for_string');
  LoadProc(Pointer(g_icon_to_string), 'g_icon_to_string');
  LoadProc(Pointer(g_inet_address_equal), 'g_inet_address_equal');
  LoadProc(Pointer(g_inet_address_get_family), 'g_inet_address_get_family');
  LoadProc(Pointer(g_inet_address_get_is_any), 'g_inet_address_get_is_any');
  LoadProc(Pointer(g_inet_address_get_is_link_local), 'g_inet_address_get_is_link_local');
  LoadProc(Pointer(g_inet_address_get_is_loopback), 'g_inet_address_get_is_loopback');
  LoadProc(Pointer(g_inet_address_get_is_mc_global), 'g_inet_address_get_is_mc_global');
  LoadProc(Pointer(g_inet_address_get_is_mc_link_local), 'g_inet_address_get_is_mc_link_local');
  LoadProc(Pointer(g_inet_address_get_is_mc_node_local), 'g_inet_address_get_is_mc_node_local');
  LoadProc(Pointer(g_inet_address_get_is_mc_org_local), 'g_inet_address_get_is_mc_org_local');
  LoadProc(Pointer(g_inet_address_get_is_mc_site_local), 'g_inet_address_get_is_mc_site_local');
  LoadProc(Pointer(g_inet_address_get_is_multicast), 'g_inet_address_get_is_multicast');
  LoadProc(Pointer(g_inet_address_get_is_site_local), 'g_inet_address_get_is_site_local');
  LoadProc(Pointer(g_inet_address_get_native_size), 'g_inet_address_get_native_size');
  LoadProc(Pointer(g_inet_address_get_type), 'g_inet_address_get_type');
  LoadProc(Pointer(g_inet_address_mask_equal), 'g_inet_address_mask_equal');
  LoadProc(Pointer(g_inet_address_mask_get_address), 'g_inet_address_mask_get_address');
  LoadProc(Pointer(g_inet_address_mask_get_family), 'g_inet_address_mask_get_family');
  LoadProc(Pointer(g_inet_address_mask_get_length), 'g_inet_address_mask_get_length');
  LoadProc(Pointer(g_inet_address_mask_get_type), 'g_inet_address_mask_get_type');
  LoadProc(Pointer(g_inet_address_mask_matches), 'g_inet_address_mask_matches');
  LoadProc(Pointer(g_inet_address_mask_new), 'g_inet_address_mask_new');
  LoadProc(Pointer(g_inet_address_mask_new_from_string), 'g_inet_address_mask_new_from_string');
  LoadProc(Pointer(g_inet_address_mask_to_string), 'g_inet_address_mask_to_string');
  LoadProc(Pointer(g_inet_address_new_any), 'g_inet_address_new_any');
  LoadProc(Pointer(g_inet_address_new_from_bytes), 'g_inet_address_new_from_bytes');
  LoadProc(Pointer(g_inet_address_new_from_string), 'g_inet_address_new_from_string');
  LoadProc(Pointer(g_inet_address_new_loopback), 'g_inet_address_new_loopback');
  LoadProc(Pointer(g_inet_address_to_bytes), 'g_inet_address_to_bytes');
  LoadProc(Pointer(g_inet_address_to_string), 'g_inet_address_to_string');
  LoadProc(Pointer(g_inet_socket_address_get_address), 'g_inet_socket_address_get_address');
  LoadProc(Pointer(g_inet_socket_address_get_flowinfo), 'g_inet_socket_address_get_flowinfo');
  LoadProc(Pointer(g_inet_socket_address_get_port), 'g_inet_socket_address_get_port');
  LoadProc(Pointer(g_inet_socket_address_get_scope_id), 'g_inet_socket_address_get_scope_id');
  LoadProc(Pointer(g_inet_socket_address_get_type), 'g_inet_socket_address_get_type');
  LoadProc(Pointer(g_inet_socket_address_new), 'g_inet_socket_address_new');
  LoadProc(Pointer(g_initable_get_type), 'g_initable_get_type');
  LoadProc(Pointer(g_initable_init), 'g_initable_init');
  LoadProc(Pointer(g_initable_new), 'g_initable_new');
  LoadProc(Pointer(g_initable_new_valist), 'g_initable_new_valist');
  LoadProc(Pointer(g_initable_newv), 'g_initable_newv');
  LoadProc(Pointer(g_input_stream_clear_pending), 'g_input_stream_clear_pending');
  LoadProc(Pointer(g_input_stream_close), 'g_input_stream_close');
  LoadProc(Pointer(g_input_stream_close_async), 'g_input_stream_close_async');
  LoadProc(Pointer(g_input_stream_close_finish), 'g_input_stream_close_finish');
  LoadProc(Pointer(g_input_stream_get_type), 'g_input_stream_get_type');
  LoadProc(Pointer(g_input_stream_has_pending), 'g_input_stream_has_pending');
  LoadProc(Pointer(g_input_stream_is_closed), 'g_input_stream_is_closed');
  LoadProc(Pointer(g_input_stream_read), 'g_input_stream_read');
  LoadProc(Pointer(g_input_stream_read_all), 'g_input_stream_read_all');
  LoadProc(Pointer(g_input_stream_read_async), 'g_input_stream_read_async');
  LoadProc(Pointer(g_input_stream_read_bytes), 'g_input_stream_read_bytes');
  LoadProc(Pointer(g_input_stream_read_bytes_async), 'g_input_stream_read_bytes_async');
  LoadProc(Pointer(g_input_stream_read_bytes_finish), 'g_input_stream_read_bytes_finish');
  LoadProc(Pointer(g_input_stream_read_finish), 'g_input_stream_read_finish');
  LoadProc(Pointer(g_input_stream_set_pending), 'g_input_stream_set_pending');
  LoadProc(Pointer(g_input_stream_skip), 'g_input_stream_skip');
  LoadProc(Pointer(g_input_stream_skip_async), 'g_input_stream_skip_async');
  LoadProc(Pointer(g_input_stream_skip_finish), 'g_input_stream_skip_finish');
  LoadProc(Pointer(g_io_error_from_errno), 'g_io_error_from_errno');
  LoadProc(Pointer(g_io_error_quark), 'g_io_error_quark');
  LoadProc(Pointer(g_io_extension_get_name), 'g_io_extension_get_name');
  LoadProc(Pointer(g_io_extension_get_priority), 'g_io_extension_get_priority');
  LoadProc(Pointer(g_io_extension_get_type), 'g_io_extension_get_type');
  LoadProc(Pointer(g_io_extension_point_get_extension_by_name), 'g_io_extension_point_get_extension_by_name');
  LoadProc(Pointer(g_io_extension_point_get_extensions), 'g_io_extension_point_get_extensions');
  LoadProc(Pointer(g_io_extension_point_get_required_type), 'g_io_extension_point_get_required_type');
  LoadProc(Pointer(g_io_extension_point_implement), 'g_io_extension_point_implement');
  LoadProc(Pointer(g_io_extension_point_lookup), 'g_io_extension_point_lookup');
  LoadProc(Pointer(g_io_extension_point_register), 'g_io_extension_point_register');
  LoadProc(Pointer(g_io_extension_point_set_required_type), 'g_io_extension_point_set_required_type');
  LoadProc(Pointer(g_io_extension_ref_class), 'g_io_extension_ref_class');
  LoadProc(Pointer(g_io_module_get_type), 'g_io_module_get_type');
  LoadProc(Pointer(g_io_module_new), 'g_io_module_new');
  LoadProc(Pointer(g_io_module_scope_block), 'g_io_module_scope_block');
  LoadProc(Pointer(g_io_module_scope_free), 'g_io_module_scope_free');
  LoadProc(Pointer(g_io_module_scope_new), 'g_io_module_scope_new');
  LoadProc(Pointer(g_io_modules_load_all_in_directory), 'g_io_modules_load_all_in_directory');
  LoadProc(Pointer(g_io_modules_load_all_in_directory_with_scope), 'g_io_modules_load_all_in_directory_with_scope');
  LoadProc(Pointer(g_io_modules_scan_all_in_directory), 'g_io_modules_scan_all_in_directory');
  LoadProc(Pointer(g_io_modules_scan_all_in_directory_with_scope), 'g_io_modules_scan_all_in_directory_with_scope');
  LoadProc(Pointer(g_io_scheduler_cancel_all_jobs), 'g_io_scheduler_cancel_all_jobs');
  LoadProc(Pointer(g_io_scheduler_push_job), 'g_io_scheduler_push_job');
  LoadProc(Pointer(g_io_stream_clear_pending), 'g_io_stream_clear_pending');
  LoadProc(Pointer(g_io_stream_close), 'g_io_stream_close');
  LoadProc(Pointer(g_io_stream_close_async), 'g_io_stream_close_async');
  LoadProc(Pointer(g_io_stream_close_finish), 'g_io_stream_close_finish');
  LoadProc(Pointer(g_io_stream_get_input_stream), 'g_io_stream_get_input_stream');
  LoadProc(Pointer(g_io_stream_get_output_stream), 'g_io_stream_get_output_stream');
  LoadProc(Pointer(g_io_stream_get_type), 'g_io_stream_get_type');
  LoadProc(Pointer(g_io_stream_has_pending), 'g_io_stream_has_pending');
  LoadProc(Pointer(g_io_stream_is_closed), 'g_io_stream_is_closed');
  LoadProc(Pointer(g_io_stream_set_pending), 'g_io_stream_set_pending');
  LoadProc(Pointer(g_io_stream_splice_async), 'g_io_stream_splice_async');
  LoadProc(Pointer(g_io_stream_splice_finish), 'g_io_stream_splice_finish');
  LoadProc(Pointer(g_loadable_icon_get_type), 'g_loadable_icon_get_type');
  LoadProc(Pointer(g_loadable_icon_load), 'g_loadable_icon_load');
  LoadProc(Pointer(g_loadable_icon_load_async), 'g_loadable_icon_load_async');
  LoadProc(Pointer(g_loadable_icon_load_finish), 'g_loadable_icon_load_finish');
  LoadProc(Pointer(g_memory_input_stream_add_bytes), 'g_memory_input_stream_add_bytes');
  LoadProc(Pointer(g_memory_input_stream_add_data), 'g_memory_input_stream_add_data');
  LoadProc(Pointer(g_memory_input_stream_get_type), 'g_memory_input_stream_get_type');
  LoadProc(Pointer(g_memory_input_stream_new), 'g_memory_input_stream_new');
  LoadProc(Pointer(g_memory_input_stream_new_from_bytes), 'g_memory_input_stream_new_from_bytes');
  LoadProc(Pointer(g_memory_input_stream_new_from_data), 'g_memory_input_stream_new_from_data');
  LoadProc(Pointer(g_memory_output_stream_get_data), 'g_memory_output_stream_get_data');
  LoadProc(Pointer(g_memory_output_stream_get_data_size), 'g_memory_output_stream_get_data_size');
  LoadProc(Pointer(g_memory_output_stream_get_size), 'g_memory_output_stream_get_size');
  LoadProc(Pointer(g_memory_output_stream_get_type), 'g_memory_output_stream_get_type');
  LoadProc(Pointer(g_memory_output_stream_new), 'g_memory_output_stream_new');
  LoadProc(Pointer(g_memory_output_stream_new_resizable), 'g_memory_output_stream_new_resizable');
  LoadProc(Pointer(g_memory_output_stream_steal_as_bytes), 'g_memory_output_stream_steal_as_bytes');
  LoadProc(Pointer(g_memory_output_stream_steal_data), 'g_memory_output_stream_steal_data');
  LoadProc(Pointer(g_menu_append), 'g_menu_append');
  LoadProc(Pointer(g_menu_append_item), 'g_menu_append_item');
  LoadProc(Pointer(g_menu_append_section), 'g_menu_append_section');
  LoadProc(Pointer(g_menu_append_submenu), 'g_menu_append_submenu');
  LoadProc(Pointer(g_menu_attribute_iter_get_name), 'g_menu_attribute_iter_get_name');
  LoadProc(Pointer(g_menu_attribute_iter_get_next), 'g_menu_attribute_iter_get_next');
  LoadProc(Pointer(g_menu_attribute_iter_get_type), 'g_menu_attribute_iter_get_type');
  LoadProc(Pointer(g_menu_attribute_iter_get_value), 'g_menu_attribute_iter_get_value');
  LoadProc(Pointer(g_menu_attribute_iter_next), 'g_menu_attribute_iter_next');
  LoadProc(Pointer(g_menu_freeze), 'g_menu_freeze');
  LoadProc(Pointer(g_menu_get_type), 'g_menu_get_type');
  LoadProc(Pointer(g_menu_insert), 'g_menu_insert');
  LoadProc(Pointer(g_menu_insert_item), 'g_menu_insert_item');
  LoadProc(Pointer(g_menu_insert_section), 'g_menu_insert_section');
  LoadProc(Pointer(g_menu_insert_submenu), 'g_menu_insert_submenu');
  LoadProc(Pointer(g_menu_item_get_attribute), 'g_menu_item_get_attribute');
  LoadProc(Pointer(g_menu_item_get_attribute_value), 'g_menu_item_get_attribute_value');
  LoadProc(Pointer(g_menu_item_get_link), 'g_menu_item_get_link');
  LoadProc(Pointer(g_menu_item_get_type), 'g_menu_item_get_type');
  LoadProc(Pointer(g_menu_item_new), 'g_menu_item_new');
  LoadProc(Pointer(g_menu_item_new_from_model), 'g_menu_item_new_from_model');
  LoadProc(Pointer(g_menu_item_new_section), 'g_menu_item_new_section');
  LoadProc(Pointer(g_menu_item_new_submenu), 'g_menu_item_new_submenu');
  LoadProc(Pointer(g_menu_item_set_action_and_target), 'g_menu_item_set_action_and_target');
  LoadProc(Pointer(g_menu_item_set_action_and_target_value), 'g_menu_item_set_action_and_target_value');
  LoadProc(Pointer(g_menu_item_set_attribute), 'g_menu_item_set_attribute');
  LoadProc(Pointer(g_menu_item_set_attribute_value), 'g_menu_item_set_attribute_value');
  LoadProc(Pointer(g_menu_item_set_detailed_action), 'g_menu_item_set_detailed_action');
  LoadProc(Pointer(g_menu_item_set_label), 'g_menu_item_set_label');
  LoadProc(Pointer(g_menu_item_set_link), 'g_menu_item_set_link');
  LoadProc(Pointer(g_menu_item_set_section), 'g_menu_item_set_section');
  LoadProc(Pointer(g_menu_item_set_submenu), 'g_menu_item_set_submenu');
  LoadProc(Pointer(g_menu_link_iter_get_name), 'g_menu_link_iter_get_name');
  LoadProc(Pointer(g_menu_link_iter_get_next), 'g_menu_link_iter_get_next');
  LoadProc(Pointer(g_menu_link_iter_get_type), 'g_menu_link_iter_get_type');
  LoadProc(Pointer(g_menu_link_iter_get_value), 'g_menu_link_iter_get_value');
  LoadProc(Pointer(g_menu_link_iter_next), 'g_menu_link_iter_next');
  LoadProc(Pointer(g_menu_model_get_item_attribute), 'g_menu_model_get_item_attribute');
  LoadProc(Pointer(g_menu_model_get_item_attribute_value), 'g_menu_model_get_item_attribute_value');
  LoadProc(Pointer(g_menu_model_get_item_link), 'g_menu_model_get_item_link');
  LoadProc(Pointer(g_menu_model_get_n_items), 'g_menu_model_get_n_items');
  LoadProc(Pointer(g_menu_model_get_type), 'g_menu_model_get_type');
  LoadProc(Pointer(g_menu_model_is_mutable), 'g_menu_model_is_mutable');
  LoadProc(Pointer(g_menu_model_items_changed), 'g_menu_model_items_changed');
  LoadProc(Pointer(g_menu_model_iterate_item_attributes), 'g_menu_model_iterate_item_attributes');
  LoadProc(Pointer(g_menu_model_iterate_item_links), 'g_menu_model_iterate_item_links');
  LoadProc(Pointer(g_menu_new), 'g_menu_new');
  LoadProc(Pointer(g_menu_prepend), 'g_menu_prepend');
  LoadProc(Pointer(g_menu_prepend_item), 'g_menu_prepend_item');
  LoadProc(Pointer(g_menu_prepend_section), 'g_menu_prepend_section');
  LoadProc(Pointer(g_menu_prepend_submenu), 'g_menu_prepend_submenu');
  LoadProc(Pointer(g_menu_remove), 'g_menu_remove');
  LoadProc(Pointer(g_mount_can_eject), 'g_mount_can_eject');
  LoadProc(Pointer(g_mount_can_unmount), 'g_mount_can_unmount');
  LoadProc(Pointer(g_mount_eject_with_operation), 'g_mount_eject_with_operation');
  LoadProc(Pointer(g_mount_eject_with_operation_finish), 'g_mount_eject_with_operation_finish');
  LoadProc(Pointer(g_mount_get_default_location), 'g_mount_get_default_location');
  LoadProc(Pointer(g_mount_get_drive), 'g_mount_get_drive');
  LoadProc(Pointer(g_mount_get_icon), 'g_mount_get_icon');
  LoadProc(Pointer(g_mount_get_name), 'g_mount_get_name');
  LoadProc(Pointer(g_mount_get_root), 'g_mount_get_root');
  LoadProc(Pointer(g_mount_get_sort_key), 'g_mount_get_sort_key');
  LoadProc(Pointer(g_mount_get_symbolic_icon), 'g_mount_get_symbolic_icon');
  LoadProc(Pointer(g_mount_get_type), 'g_mount_get_type');
  LoadProc(Pointer(g_mount_get_uuid), 'g_mount_get_uuid');
  LoadProc(Pointer(g_mount_get_volume), 'g_mount_get_volume');
  LoadProc(Pointer(g_mount_guess_content_type), 'g_mount_guess_content_type');
  LoadProc(Pointer(g_mount_guess_content_type_finish), 'g_mount_guess_content_type_finish');
  LoadProc(Pointer(g_mount_guess_content_type_sync), 'g_mount_guess_content_type_sync');
  LoadProc(Pointer(g_mount_is_shadowed), 'g_mount_is_shadowed');
  LoadProc(Pointer(g_mount_operation_get_anonymous), 'g_mount_operation_get_anonymous');
  LoadProc(Pointer(g_mount_operation_get_choice), 'g_mount_operation_get_choice');
  LoadProc(Pointer(g_mount_operation_get_domain), 'g_mount_operation_get_domain');
  LoadProc(Pointer(g_mount_operation_get_password), 'g_mount_operation_get_password');
  LoadProc(Pointer(g_mount_operation_get_password_save), 'g_mount_operation_get_password_save');
  LoadProc(Pointer(g_mount_operation_get_type), 'g_mount_operation_get_type');
  LoadProc(Pointer(g_mount_operation_get_username), 'g_mount_operation_get_username');
  LoadProc(Pointer(g_mount_operation_new), 'g_mount_operation_new');
  LoadProc(Pointer(g_mount_operation_reply), 'g_mount_operation_reply');
  LoadProc(Pointer(g_mount_operation_set_anonymous), 'g_mount_operation_set_anonymous');
  LoadProc(Pointer(g_mount_operation_set_choice), 'g_mount_operation_set_choice');
  LoadProc(Pointer(g_mount_operation_set_domain), 'g_mount_operation_set_domain');
  LoadProc(Pointer(g_mount_operation_set_password), 'g_mount_operation_set_password');
  LoadProc(Pointer(g_mount_operation_set_password_save), 'g_mount_operation_set_password_save');
  LoadProc(Pointer(g_mount_operation_set_username), 'g_mount_operation_set_username');
  LoadProc(Pointer(g_mount_remount), 'g_mount_remount');
  LoadProc(Pointer(g_mount_remount_finish), 'g_mount_remount_finish');
  LoadProc(Pointer(g_mount_shadow), 'g_mount_shadow');
  LoadProc(Pointer(g_mount_unmount_with_operation), 'g_mount_unmount_with_operation');
  LoadProc(Pointer(g_mount_unmount_with_operation_finish), 'g_mount_unmount_with_operation_finish');
  LoadProc(Pointer(g_mount_unshadow), 'g_mount_unshadow');
  LoadProc(Pointer(g_native_volume_monitor_get_type), 'g_native_volume_monitor_get_type');
  LoadProc(Pointer(g_network_address_get_hostname), 'g_network_address_get_hostname');
  LoadProc(Pointer(g_network_address_get_port), 'g_network_address_get_port');
  LoadProc(Pointer(g_network_address_get_scheme), 'g_network_address_get_scheme');
  LoadProc(Pointer(g_network_address_get_type), 'g_network_address_get_type');
  LoadProc(Pointer(g_network_address_new), 'g_network_address_new');
  LoadProc(Pointer(g_network_address_parse), 'g_network_address_parse');
  LoadProc(Pointer(g_network_address_parse_uri), 'g_network_address_parse_uri');
  LoadProc(Pointer(g_network_monitor_can_reach), 'g_network_monitor_can_reach');
  LoadProc(Pointer(g_network_monitor_can_reach_async), 'g_network_monitor_can_reach_async');
  LoadProc(Pointer(g_network_monitor_can_reach_finish), 'g_network_monitor_can_reach_finish');
  LoadProc(Pointer(g_network_monitor_get_default), 'g_network_monitor_get_default');
  LoadProc(Pointer(g_network_monitor_get_network_available), 'g_network_monitor_get_network_available');
  LoadProc(Pointer(g_network_monitor_get_type), 'g_network_monitor_get_type');
  LoadProc(Pointer(g_network_service_get_domain), 'g_network_service_get_domain');
  LoadProc(Pointer(g_network_service_get_protocol), 'g_network_service_get_protocol');
  LoadProc(Pointer(g_network_service_get_scheme), 'g_network_service_get_scheme');
  LoadProc(Pointer(g_network_service_get_service), 'g_network_service_get_service');
  LoadProc(Pointer(g_network_service_get_type), 'g_network_service_get_type');
  LoadProc(Pointer(g_network_service_new), 'g_network_service_new');
  LoadProc(Pointer(g_network_service_set_scheme), 'g_network_service_set_scheme');
  LoadProc(Pointer(g_networking_init), 'g_networking_init');
  LoadProc(Pointer(g_output_stream_clear_pending), 'g_output_stream_clear_pending');
  LoadProc(Pointer(g_output_stream_close), 'g_output_stream_close');
  LoadProc(Pointer(g_output_stream_close_async), 'g_output_stream_close_async');
  LoadProc(Pointer(g_output_stream_close_finish), 'g_output_stream_close_finish');
  LoadProc(Pointer(g_output_stream_flush), 'g_output_stream_flush');
  LoadProc(Pointer(g_output_stream_flush_async), 'g_output_stream_flush_async');
  LoadProc(Pointer(g_output_stream_flush_finish), 'g_output_stream_flush_finish');
  LoadProc(Pointer(g_output_stream_get_type), 'g_output_stream_get_type');
  LoadProc(Pointer(g_output_stream_has_pending), 'g_output_stream_has_pending');
  LoadProc(Pointer(g_output_stream_is_closed), 'g_output_stream_is_closed');
  LoadProc(Pointer(g_output_stream_is_closing), 'g_output_stream_is_closing');
  LoadProc(Pointer(g_output_stream_set_pending), 'g_output_stream_set_pending');
  LoadProc(Pointer(g_output_stream_splice), 'g_output_stream_splice');
  LoadProc(Pointer(g_output_stream_splice_async), 'g_output_stream_splice_async');
  LoadProc(Pointer(g_output_stream_splice_finish), 'g_output_stream_splice_finish');
  LoadProc(Pointer(g_output_stream_write), 'g_output_stream_write');
  LoadProc(Pointer(g_output_stream_write_all), 'g_output_stream_write_all');
  LoadProc(Pointer(g_output_stream_write_async), 'g_output_stream_write_async');
  LoadProc(Pointer(g_output_stream_write_bytes), 'g_output_stream_write_bytes');
  LoadProc(Pointer(g_output_stream_write_bytes_async), 'g_output_stream_write_bytes_async');
  LoadProc(Pointer(g_output_stream_write_bytes_finish), 'g_output_stream_write_bytes_finish');
  LoadProc(Pointer(g_output_stream_write_finish), 'g_output_stream_write_finish');
  LoadProc(Pointer(g_permission_acquire), 'g_permission_acquire');
  LoadProc(Pointer(g_permission_acquire_async), 'g_permission_acquire_async');
  LoadProc(Pointer(g_permission_acquire_finish), 'g_permission_acquire_finish');
  LoadProc(Pointer(g_permission_get_allowed), 'g_permission_get_allowed');
  LoadProc(Pointer(g_permission_get_can_acquire), 'g_permission_get_can_acquire');
  LoadProc(Pointer(g_permission_get_can_release), 'g_permission_get_can_release');
  LoadProc(Pointer(g_permission_get_type), 'g_permission_get_type');
  LoadProc(Pointer(g_permission_impl_update), 'g_permission_impl_update');
  LoadProc(Pointer(g_permission_release), 'g_permission_release');
  LoadProc(Pointer(g_permission_release_async), 'g_permission_release_async');
  LoadProc(Pointer(g_permission_release_finish), 'g_permission_release_finish');
  LoadProc(Pointer(g_pollable_input_stream_can_poll), 'g_pollable_input_stream_can_poll');
  LoadProc(Pointer(g_pollable_input_stream_create_source), 'g_pollable_input_stream_create_source');
  LoadProc(Pointer(g_pollable_input_stream_get_type), 'g_pollable_input_stream_get_type');
  LoadProc(Pointer(g_pollable_input_stream_is_readable), 'g_pollable_input_stream_is_readable');
  LoadProc(Pointer(g_pollable_input_stream_read_nonblocking), 'g_pollable_input_stream_read_nonblocking');
  LoadProc(Pointer(g_pollable_output_stream_can_poll), 'g_pollable_output_stream_can_poll');
  LoadProc(Pointer(g_pollable_output_stream_create_source), 'g_pollable_output_stream_create_source');
  LoadProc(Pointer(g_pollable_output_stream_get_type), 'g_pollable_output_stream_get_type');
  LoadProc(Pointer(g_pollable_output_stream_is_writable), 'g_pollable_output_stream_is_writable');
  LoadProc(Pointer(g_pollable_output_stream_write_nonblocking), 'g_pollable_output_stream_write_nonblocking');
  LoadProc(Pointer(g_pollable_source_new), 'g_pollable_source_new');
  LoadProc(Pointer(g_pollable_source_new_full), 'g_pollable_source_new_full');
  LoadProc(Pointer(g_pollable_stream_read), 'g_pollable_stream_read');
  LoadProc(Pointer(g_pollable_stream_write), 'g_pollable_stream_write');
  LoadProc(Pointer(g_pollable_stream_write_all), 'g_pollable_stream_write_all');
  LoadProc(Pointer(g_proxy_address_enumerator_get_type), 'g_proxy_address_enumerator_get_type');
  LoadProc(Pointer(g_proxy_address_get_destination_hostname), 'g_proxy_address_get_destination_hostname');
  LoadProc(Pointer(g_proxy_address_get_destination_port), 'g_proxy_address_get_destination_port');
  LoadProc(Pointer(g_proxy_address_get_destination_protocol), 'g_proxy_address_get_destination_protocol');
  LoadProc(Pointer(g_proxy_address_get_password), 'g_proxy_address_get_password');
  LoadProc(Pointer(g_proxy_address_get_protocol), 'g_proxy_address_get_protocol');
  LoadProc(Pointer(g_proxy_address_get_type), 'g_proxy_address_get_type');
  LoadProc(Pointer(g_proxy_address_get_uri), 'g_proxy_address_get_uri');
  LoadProc(Pointer(g_proxy_address_get_username), 'g_proxy_address_get_username');
  LoadProc(Pointer(g_proxy_address_new), 'g_proxy_address_new');
  LoadProc(Pointer(g_proxy_connect), 'g_proxy_connect');
  LoadProc(Pointer(g_proxy_connect_async), 'g_proxy_connect_async');
  LoadProc(Pointer(g_proxy_connect_finish), 'g_proxy_connect_finish');
  LoadProc(Pointer(g_proxy_get_default_for_protocol), 'g_proxy_get_default_for_protocol');
  LoadProc(Pointer(g_proxy_get_type), 'g_proxy_get_type');
  LoadProc(Pointer(g_proxy_resolver_get_default), 'g_proxy_resolver_get_default');
  LoadProc(Pointer(g_proxy_resolver_get_type), 'g_proxy_resolver_get_type');
  LoadProc(Pointer(g_proxy_resolver_is_supported), 'g_proxy_resolver_is_supported');
  LoadProc(Pointer(g_proxy_resolver_lookup), 'g_proxy_resolver_lookup');
  LoadProc(Pointer(g_proxy_resolver_lookup_async), 'g_proxy_resolver_lookup_async');
  LoadProc(Pointer(g_proxy_resolver_lookup_finish), 'g_proxy_resolver_lookup_finish');
  LoadProc(Pointer(g_proxy_supports_hostname), 'g_proxy_supports_hostname');
  LoadProc(Pointer(g_remote_action_group_activate_action_full), 'g_remote_action_group_activate_action_full');
  LoadProc(Pointer(g_remote_action_group_change_action_state_full), 'g_remote_action_group_change_action_state_full');
  LoadProc(Pointer(g_remote_action_group_get_type), 'g_remote_action_group_get_type');
  LoadProc(Pointer(g_resolver_error_quark), 'g_resolver_error_quark');
  LoadProc(Pointer(g_resolver_free_addresses), 'g_resolver_free_addresses');
  LoadProc(Pointer(g_resolver_free_targets), 'g_resolver_free_targets');
  LoadProc(Pointer(g_resolver_get_default), 'g_resolver_get_default');
  LoadProc(Pointer(g_resolver_get_type), 'g_resolver_get_type');
  LoadProc(Pointer(g_resolver_lookup_by_address), 'g_resolver_lookup_by_address');
  LoadProc(Pointer(g_resolver_lookup_by_address_async), 'g_resolver_lookup_by_address_async');
  LoadProc(Pointer(g_resolver_lookup_by_address_finish), 'g_resolver_lookup_by_address_finish');
  LoadProc(Pointer(g_resolver_lookup_by_name), 'g_resolver_lookup_by_name');
  LoadProc(Pointer(g_resolver_lookup_by_name_async), 'g_resolver_lookup_by_name_async');
  LoadProc(Pointer(g_resolver_lookup_by_name_finish), 'g_resolver_lookup_by_name_finish');
  LoadProc(Pointer(g_resolver_lookup_records), 'g_resolver_lookup_records');
  LoadProc(Pointer(g_resolver_lookup_records_async), 'g_resolver_lookup_records_async');
  LoadProc(Pointer(g_resolver_lookup_records_finish), 'g_resolver_lookup_records_finish');
  LoadProc(Pointer(g_resolver_lookup_service), 'g_resolver_lookup_service');
  LoadProc(Pointer(g_resolver_lookup_service_async), 'g_resolver_lookup_service_async');
  LoadProc(Pointer(g_resolver_lookup_service_finish), 'g_resolver_lookup_service_finish');
  LoadProc(Pointer(g_resolver_set_default), 'g_resolver_set_default');
  LoadProc(Pointer(g_resource_enumerate_children), 'g_resource_enumerate_children');
  LoadProc(Pointer(g_resource_error_quark), 'g_resource_error_quark');
  LoadProc(Pointer(g_resource_get_info), 'g_resource_get_info');
  LoadProc(Pointer(g_resource_get_type), 'g_resource_get_type');
  LoadProc(Pointer(g_resource_load), 'g_resource_load');
  LoadProc(Pointer(g_resource_lookup_data), 'g_resource_lookup_data');
  LoadProc(Pointer(g_resource_new_from_data), 'g_resource_new_from_data');
  LoadProc(Pointer(g_resource_open_stream), 'g_resource_open_stream');
  LoadProc(Pointer(g_resource_ref), 'g_resource_ref');
  LoadProc(Pointer(g_resource_unref), 'g_resource_unref');
  LoadProc(Pointer(g_resources_enumerate_children), 'g_resources_enumerate_children');
  LoadProc(Pointer(g_resources_get_info), 'g_resources_get_info');
  LoadProc(Pointer(g_resources_lookup_data), 'g_resources_lookup_data');
  LoadProc(Pointer(g_resources_open_stream), 'g_resources_open_stream');
  LoadProc(Pointer(g_resources_register), 'g_resources_register');
  LoadProc(Pointer(g_resources_unregister), 'g_resources_unregister');
  LoadProc(Pointer(g_seekable_can_seek), 'g_seekable_can_seek');
  LoadProc(Pointer(g_seekable_can_truncate), 'g_seekable_can_truncate');
  LoadProc(Pointer(g_seekable_get_type), 'g_seekable_get_type');
  LoadProc(Pointer(g_seekable_seek), 'g_seekable_seek');
  LoadProc(Pointer(g_seekable_tell), 'g_seekable_tell');
  LoadProc(Pointer(g_seekable_truncate), 'g_seekable_truncate');
  LoadProc(Pointer(g_settings_apply), 'g_settings_apply');
  LoadProc(Pointer(g_settings_bind), 'g_settings_bind');
  LoadProc(Pointer(g_settings_bind_with_mapping), 'g_settings_bind_with_mapping');
  LoadProc(Pointer(g_settings_bind_writable), 'g_settings_bind_writable');
  LoadProc(Pointer(g_settings_create_action), 'g_settings_create_action');
  LoadProc(Pointer(g_settings_delay), 'g_settings_delay');
  LoadProc(Pointer(g_settings_get), 'g_settings_get');
  LoadProc(Pointer(g_settings_get_boolean), 'g_settings_get_boolean');
  LoadProc(Pointer(g_settings_get_child), 'g_settings_get_child');
  LoadProc(Pointer(g_settings_get_double), 'g_settings_get_double');
  LoadProc(Pointer(g_settings_get_enum), 'g_settings_get_enum');
  LoadProc(Pointer(g_settings_get_flags), 'g_settings_get_flags');
  LoadProc(Pointer(g_settings_get_has_unapplied), 'g_settings_get_has_unapplied');
  LoadProc(Pointer(g_settings_get_int), 'g_settings_get_int');
  LoadProc(Pointer(g_settings_get_mapped), 'g_settings_get_mapped');
  LoadProc(Pointer(g_settings_get_range), 'g_settings_get_range');
  LoadProc(Pointer(g_settings_get_string), 'g_settings_get_string');
  LoadProc(Pointer(g_settings_get_strv), 'g_settings_get_strv');
  LoadProc(Pointer(g_settings_get_type), 'g_settings_get_type');
  LoadProc(Pointer(g_settings_get_uint), 'g_settings_get_uint');
  LoadProc(Pointer(g_settings_get_value), 'g_settings_get_value');
  LoadProc(Pointer(g_settings_is_writable), 'g_settings_is_writable');
  LoadProc(Pointer(g_settings_list_children), 'g_settings_list_children');
  LoadProc(Pointer(g_settings_list_keys), 'g_settings_list_keys');
  LoadProc(Pointer(g_settings_list_relocatable_schemas), 'g_settings_list_relocatable_schemas');
  LoadProc(Pointer(g_settings_list_schemas), 'g_settings_list_schemas');
  LoadProc(Pointer(g_settings_new), 'g_settings_new');
  LoadProc(Pointer(g_settings_new_full), 'g_settings_new_full');
  LoadProc(Pointer(g_settings_new_with_backend), 'g_settings_new_with_backend');
  LoadProc(Pointer(g_settings_new_with_backend_and_path), 'g_settings_new_with_backend_and_path');
  LoadProc(Pointer(g_settings_new_with_path), 'g_settings_new_with_path');
  LoadProc(Pointer(g_settings_range_check), 'g_settings_range_check');
  LoadProc(Pointer(g_settings_reset), 'g_settings_reset');
  LoadProc(Pointer(g_settings_revert), 'g_settings_revert');
  LoadProc(Pointer(g_settings_schema_get_id), 'g_settings_schema_get_id');
  LoadProc(Pointer(g_settings_schema_get_path), 'g_settings_schema_get_path');
  LoadProc(Pointer(g_settings_schema_get_type), 'g_settings_schema_get_type');
  LoadProc(Pointer(g_settings_schema_ref), 'g_settings_schema_ref');
  LoadProc(Pointer(g_settings_schema_source_get_default), 'g_settings_schema_source_get_default');
  LoadProc(Pointer(g_settings_schema_source_get_type), 'g_settings_schema_source_get_type');
  LoadProc(Pointer(g_settings_schema_source_lookup), 'g_settings_schema_source_lookup');
  LoadProc(Pointer(g_settings_schema_source_new_from_directory), 'g_settings_schema_source_new_from_directory');
  LoadProc(Pointer(g_settings_schema_source_ref), 'g_settings_schema_source_ref');
  LoadProc(Pointer(g_settings_schema_source_unref), 'g_settings_schema_source_unref');
  LoadProc(Pointer(g_settings_schema_unref), 'g_settings_schema_unref');
  LoadProc(Pointer(g_settings_set), 'g_settings_set');
  LoadProc(Pointer(g_settings_set_boolean), 'g_settings_set_boolean');
  LoadProc(Pointer(g_settings_set_double), 'g_settings_set_double');
  LoadProc(Pointer(g_settings_set_enum), 'g_settings_set_enum');
  LoadProc(Pointer(g_settings_set_flags), 'g_settings_set_flags');
  LoadProc(Pointer(g_settings_set_int), 'g_settings_set_int');
  LoadProc(Pointer(g_settings_set_string), 'g_settings_set_string');
  LoadProc(Pointer(g_settings_set_strv), 'g_settings_set_strv');
  LoadProc(Pointer(g_settings_set_uint), 'g_settings_set_uint');
  LoadProc(Pointer(g_settings_set_value), 'g_settings_set_value');
  LoadProc(Pointer(g_settings_sync), 'g_settings_sync');
  LoadProc(Pointer(g_settings_unbind), 'g_settings_unbind');
  LoadProc(Pointer(g_simple_action_get_type), 'g_simple_action_get_type');
  LoadProc(Pointer(g_simple_action_group_add_entries), 'g_simple_action_group_add_entries');
  LoadProc(Pointer(g_simple_action_group_get_type), 'g_simple_action_group_get_type');
  LoadProc(Pointer(g_simple_action_group_insert), 'g_simple_action_group_insert');
  LoadProc(Pointer(g_simple_action_group_lookup), 'g_simple_action_group_lookup');
  LoadProc(Pointer(g_simple_action_group_new), 'g_simple_action_group_new');
  LoadProc(Pointer(g_simple_action_group_remove), 'g_simple_action_group_remove');
  LoadProc(Pointer(g_simple_action_new), 'g_simple_action_new');
  LoadProc(Pointer(g_simple_action_new_stateful), 'g_simple_action_new_stateful');
  LoadProc(Pointer(g_simple_action_set_enabled), 'g_simple_action_set_enabled');
  LoadProc(Pointer(g_simple_action_set_state), 'g_simple_action_set_state');
  LoadProc(Pointer(g_simple_async_report_error_in_idle), 'g_simple_async_report_error_in_idle');
  LoadProc(Pointer(g_simple_async_report_gerror_in_idle), 'g_simple_async_report_gerror_in_idle');
  LoadProc(Pointer(g_simple_async_report_take_gerror_in_idle), 'g_simple_async_report_take_gerror_in_idle');
  LoadProc(Pointer(g_simple_async_result_complete), 'g_simple_async_result_complete');
  LoadProc(Pointer(g_simple_async_result_complete_in_idle), 'g_simple_async_result_complete_in_idle');
  LoadProc(Pointer(g_simple_async_result_get_op_res_gboolean), 'g_simple_async_result_get_op_res_gboolean');
  LoadProc(Pointer(g_simple_async_result_get_op_res_gpointer), 'g_simple_async_result_get_op_res_gpointer');
  LoadProc(Pointer(g_simple_async_result_get_op_res_gssize), 'g_simple_async_result_get_op_res_gssize');
  LoadProc(Pointer(g_simple_async_result_get_source_tag), 'g_simple_async_result_get_source_tag');
  LoadProc(Pointer(g_simple_async_result_get_type), 'g_simple_async_result_get_type');
  LoadProc(Pointer(g_simple_async_result_is_valid), 'g_simple_async_result_is_valid');
  LoadProc(Pointer(g_simple_async_result_new), 'g_simple_async_result_new');
  LoadProc(Pointer(g_simple_async_result_new_error), 'g_simple_async_result_new_error');
  LoadProc(Pointer(g_simple_async_result_new_from_error), 'g_simple_async_result_new_from_error');
  LoadProc(Pointer(g_simple_async_result_new_take_error), 'g_simple_async_result_new_take_error');
  LoadProc(Pointer(g_simple_async_result_propagate_error), 'g_simple_async_result_propagate_error');
  LoadProc(Pointer(g_simple_async_result_run_in_thread), 'g_simple_async_result_run_in_thread');
  LoadProc(Pointer(g_simple_async_result_set_check_cancellable), 'g_simple_async_result_set_check_cancellable');
  LoadProc(Pointer(g_simple_async_result_set_error), 'g_simple_async_result_set_error');
  LoadProc(Pointer(g_simple_async_result_set_error_va), 'g_simple_async_result_set_error_va');
  LoadProc(Pointer(g_simple_async_result_set_from_error), 'g_simple_async_result_set_from_error');
  LoadProc(Pointer(g_simple_async_result_set_handle_cancellation), 'g_simple_async_result_set_handle_cancellation');
  LoadProc(Pointer(g_simple_async_result_set_op_res_gboolean), 'g_simple_async_result_set_op_res_gboolean');
  LoadProc(Pointer(g_simple_async_result_set_op_res_gpointer), 'g_simple_async_result_set_op_res_gpointer');
  LoadProc(Pointer(g_simple_async_result_set_op_res_gssize), 'g_simple_async_result_set_op_res_gssize');
  LoadProc(Pointer(g_simple_async_result_take_error), 'g_simple_async_result_take_error');
  LoadProc(Pointer(g_simple_permission_get_type), 'g_simple_permission_get_type');
  LoadProc(Pointer(g_simple_permission_new), 'g_simple_permission_new');
  LoadProc(Pointer(g_simple_proxy_resolver_get_type), 'g_simple_proxy_resolver_get_type');
  LoadProc(Pointer(g_simple_proxy_resolver_new), 'g_simple_proxy_resolver_new');
  LoadProc(Pointer(g_simple_proxy_resolver_set_default_proxy), 'g_simple_proxy_resolver_set_default_proxy');
  LoadProc(Pointer(g_simple_proxy_resolver_set_ignore_hosts), 'g_simple_proxy_resolver_set_ignore_hosts');
  LoadProc(Pointer(g_simple_proxy_resolver_set_uri_proxy), 'g_simple_proxy_resolver_set_uri_proxy');
  LoadProc(Pointer(g_socket_accept), 'g_socket_accept');
  LoadProc(Pointer(g_socket_address_enumerator_get_type), 'g_socket_address_enumerator_get_type');
  LoadProc(Pointer(g_socket_address_enumerator_next), 'g_socket_address_enumerator_next');
  LoadProc(Pointer(g_socket_address_enumerator_next_async), 'g_socket_address_enumerator_next_async');
  LoadProc(Pointer(g_socket_address_enumerator_next_finish), 'g_socket_address_enumerator_next_finish');
  LoadProc(Pointer(g_socket_address_get_family), 'g_socket_address_get_family');
  LoadProc(Pointer(g_socket_address_get_native_size), 'g_socket_address_get_native_size');
  LoadProc(Pointer(g_socket_address_get_type), 'g_socket_address_get_type');
  LoadProc(Pointer(g_socket_address_new_from_native), 'g_socket_address_new_from_native');
  LoadProc(Pointer(g_socket_address_to_native), 'g_socket_address_to_native');
  LoadProc(Pointer(g_socket_bind), 'g_socket_bind');
  LoadProc(Pointer(g_socket_check_connect_result), 'g_socket_check_connect_result');
  LoadProc(Pointer(g_socket_client_add_application_proxy), 'g_socket_client_add_application_proxy');
  LoadProc(Pointer(g_socket_client_connect), 'g_socket_client_connect');
  LoadProc(Pointer(g_socket_client_connect_async), 'g_socket_client_connect_async');
  LoadProc(Pointer(g_socket_client_connect_finish), 'g_socket_client_connect_finish');
  LoadProc(Pointer(g_socket_client_connect_to_host), 'g_socket_client_connect_to_host');
  LoadProc(Pointer(g_socket_client_connect_to_host_async), 'g_socket_client_connect_to_host_async');
  LoadProc(Pointer(g_socket_client_connect_to_host_finish), 'g_socket_client_connect_to_host_finish');
  LoadProc(Pointer(g_socket_client_connect_to_service), 'g_socket_client_connect_to_service');
  LoadProc(Pointer(g_socket_client_connect_to_service_async), 'g_socket_client_connect_to_service_async');
  LoadProc(Pointer(g_socket_client_connect_to_service_finish), 'g_socket_client_connect_to_service_finish');
  LoadProc(Pointer(g_socket_client_connect_to_uri), 'g_socket_client_connect_to_uri');
  LoadProc(Pointer(g_socket_client_connect_to_uri_async), 'g_socket_client_connect_to_uri_async');
  LoadProc(Pointer(g_socket_client_connect_to_uri_finish), 'g_socket_client_connect_to_uri_finish');
  LoadProc(Pointer(g_socket_client_get_enable_proxy), 'g_socket_client_get_enable_proxy');
  LoadProc(Pointer(g_socket_client_get_family), 'g_socket_client_get_family');
  LoadProc(Pointer(g_socket_client_get_local_address), 'g_socket_client_get_local_address');
  LoadProc(Pointer(g_socket_client_get_protocol), 'g_socket_client_get_protocol');
  LoadProc(Pointer(g_socket_client_get_proxy_resolver), 'g_socket_client_get_proxy_resolver');
  LoadProc(Pointer(g_socket_client_get_socket_type), 'g_socket_client_get_socket_type');
  LoadProc(Pointer(g_socket_client_get_timeout), 'g_socket_client_get_timeout');
  LoadProc(Pointer(g_socket_client_get_tls), 'g_socket_client_get_tls');
  LoadProc(Pointer(g_socket_client_get_tls_validation_flags), 'g_socket_client_get_tls_validation_flags');
  LoadProc(Pointer(g_socket_client_get_type), 'g_socket_client_get_type');
  LoadProc(Pointer(g_socket_client_new), 'g_socket_client_new');
  LoadProc(Pointer(g_socket_client_set_enable_proxy), 'g_socket_client_set_enable_proxy');
  LoadProc(Pointer(g_socket_client_set_family), 'g_socket_client_set_family');
  LoadProc(Pointer(g_socket_client_set_local_address), 'g_socket_client_set_local_address');
  LoadProc(Pointer(g_socket_client_set_protocol), 'g_socket_client_set_protocol');
  LoadProc(Pointer(g_socket_client_set_proxy_resolver), 'g_socket_client_set_proxy_resolver');
  LoadProc(Pointer(g_socket_client_set_socket_type), 'g_socket_client_set_socket_type');
  LoadProc(Pointer(g_socket_client_set_timeout), 'g_socket_client_set_timeout');
  LoadProc(Pointer(g_socket_client_set_tls), 'g_socket_client_set_tls');
  LoadProc(Pointer(g_socket_client_set_tls_validation_flags), 'g_socket_client_set_tls_validation_flags');
  LoadProc(Pointer(g_socket_close), 'g_socket_close');
  LoadProc(Pointer(g_socket_condition_check), 'g_socket_condition_check');
  LoadProc(Pointer(g_socket_condition_timed_wait), 'g_socket_condition_timed_wait');
  LoadProc(Pointer(g_socket_condition_wait), 'g_socket_condition_wait');
  LoadProc(Pointer(g_socket_connect), 'g_socket_connect');
  LoadProc(Pointer(g_socket_connectable_enumerate), 'g_socket_connectable_enumerate');
  LoadProc(Pointer(g_socket_connectable_get_type), 'g_socket_connectable_get_type');
  LoadProc(Pointer(g_socket_connectable_proxy_enumerate), 'g_socket_connectable_proxy_enumerate');
  LoadProc(Pointer(g_socket_connection_connect), 'g_socket_connection_connect');
  LoadProc(Pointer(g_socket_connection_connect_async), 'g_socket_connection_connect_async');
  LoadProc(Pointer(g_socket_connection_connect_finish), 'g_socket_connection_connect_finish');
  LoadProc(Pointer(g_socket_connection_factory_create_connection), 'g_socket_connection_factory_create_connection');
  LoadProc(Pointer(g_socket_connection_factory_lookup_type), 'g_socket_connection_factory_lookup_type');
  LoadProc(Pointer(g_socket_connection_factory_register_type), 'g_socket_connection_factory_register_type');
  LoadProc(Pointer(g_socket_connection_get_local_address), 'g_socket_connection_get_local_address');
  LoadProc(Pointer(g_socket_connection_get_remote_address), 'g_socket_connection_get_remote_address');
  LoadProc(Pointer(g_socket_connection_get_socket), 'g_socket_connection_get_socket');
  LoadProc(Pointer(g_socket_connection_get_type), 'g_socket_connection_get_type');
  LoadProc(Pointer(g_socket_connection_is_connected), 'g_socket_connection_is_connected');
  LoadProc(Pointer(g_socket_control_message_deserialize), 'g_socket_control_message_deserialize');
  LoadProc(Pointer(g_socket_control_message_get_level), 'g_socket_control_message_get_level');
  LoadProc(Pointer(g_socket_control_message_get_msg_type), 'g_socket_control_message_get_msg_type');
  LoadProc(Pointer(g_socket_control_message_get_size), 'g_socket_control_message_get_size');
  LoadProc(Pointer(g_socket_control_message_get_type), 'g_socket_control_message_get_type');
  LoadProc(Pointer(g_socket_control_message_serialize), 'g_socket_control_message_serialize');
  LoadProc(Pointer(g_socket_create_source), 'g_socket_create_source');
  LoadProc(Pointer(g_socket_get_available_bytes), 'g_socket_get_available_bytes');
  LoadProc(Pointer(g_socket_get_blocking), 'g_socket_get_blocking');
  LoadProc(Pointer(g_socket_get_broadcast), 'g_socket_get_broadcast');
  LoadProc(Pointer(g_socket_get_credentials), 'g_socket_get_credentials');
  LoadProc(Pointer(g_socket_get_family), 'g_socket_get_family');
  LoadProc(Pointer(g_socket_get_fd), 'g_socket_get_fd');
  LoadProc(Pointer(g_socket_get_keepalive), 'g_socket_get_keepalive');
  LoadProc(Pointer(g_socket_get_listen_backlog), 'g_socket_get_listen_backlog');
  LoadProc(Pointer(g_socket_get_local_address), 'g_socket_get_local_address');
  LoadProc(Pointer(g_socket_get_multicast_loopback), 'g_socket_get_multicast_loopback');
  LoadProc(Pointer(g_socket_get_multicast_ttl), 'g_socket_get_multicast_ttl');
  LoadProc(Pointer(g_socket_get_option), 'g_socket_get_option');
  LoadProc(Pointer(g_socket_get_protocol), 'g_socket_get_protocol');
  LoadProc(Pointer(g_socket_get_remote_address), 'g_socket_get_remote_address');
  LoadProc(Pointer(g_socket_get_socket_type), 'g_socket_get_socket_type');
  LoadProc(Pointer(g_socket_get_timeout), 'g_socket_get_timeout');
  LoadProc(Pointer(g_socket_get_ttl), 'g_socket_get_ttl');
  LoadProc(Pointer(g_socket_get_type), 'g_socket_get_type');
  LoadProc(Pointer(g_socket_is_closed), 'g_socket_is_closed');
  LoadProc(Pointer(g_socket_is_connected), 'g_socket_is_connected');
  LoadProc(Pointer(g_socket_join_multicast_group), 'g_socket_join_multicast_group');
  LoadProc(Pointer(g_socket_leave_multicast_group), 'g_socket_leave_multicast_group');
  LoadProc(Pointer(g_socket_listen), 'g_socket_listen');
  LoadProc(Pointer(g_socket_listener_accept), 'g_socket_listener_accept');
  LoadProc(Pointer(g_socket_listener_accept_async), 'g_socket_listener_accept_async');
  LoadProc(Pointer(g_socket_listener_accept_finish), 'g_socket_listener_accept_finish');
  LoadProc(Pointer(g_socket_listener_accept_socket), 'g_socket_listener_accept_socket');
  LoadProc(Pointer(g_socket_listener_accept_socket_async), 'g_socket_listener_accept_socket_async');
  LoadProc(Pointer(g_socket_listener_accept_socket_finish), 'g_socket_listener_accept_socket_finish');
  LoadProc(Pointer(g_socket_listener_add_address), 'g_socket_listener_add_address');
  LoadProc(Pointer(g_socket_listener_add_any_inet_port), 'g_socket_listener_add_any_inet_port');
  LoadProc(Pointer(g_socket_listener_add_inet_port), 'g_socket_listener_add_inet_port');
  LoadProc(Pointer(g_socket_listener_add_socket), 'g_socket_listener_add_socket');
  LoadProc(Pointer(g_socket_listener_close), 'g_socket_listener_close');
  LoadProc(Pointer(g_socket_listener_get_type), 'g_socket_listener_get_type');
  LoadProc(Pointer(g_socket_listener_new), 'g_socket_listener_new');
  LoadProc(Pointer(g_socket_listener_set_backlog), 'g_socket_listener_set_backlog');
  LoadProc(Pointer(g_socket_new), 'g_socket_new');
  LoadProc(Pointer(g_socket_new_from_fd), 'g_socket_new_from_fd');
  LoadProc(Pointer(g_socket_receive), 'g_socket_receive');
  LoadProc(Pointer(g_socket_receive_from), 'g_socket_receive_from');
  LoadProc(Pointer(g_socket_receive_message), 'g_socket_receive_message');
  LoadProc(Pointer(g_socket_receive_with_blocking), 'g_socket_receive_with_blocking');
  LoadProc(Pointer(g_socket_send), 'g_socket_send');
  LoadProc(Pointer(g_socket_send_message), 'g_socket_send_message');
  LoadProc(Pointer(g_socket_send_to), 'g_socket_send_to');
  LoadProc(Pointer(g_socket_send_with_blocking), 'g_socket_send_with_blocking');
  LoadProc(Pointer(g_socket_service_get_type), 'g_socket_service_get_type');
  LoadProc(Pointer(g_socket_service_is_active), 'g_socket_service_is_active');
  LoadProc(Pointer(g_socket_service_new), 'g_socket_service_new');
  LoadProc(Pointer(g_socket_service_start), 'g_socket_service_start');
  LoadProc(Pointer(g_socket_service_stop), 'g_socket_service_stop');
  LoadProc(Pointer(g_socket_set_blocking), 'g_socket_set_blocking');
  LoadProc(Pointer(g_socket_set_broadcast), 'g_socket_set_broadcast');
  LoadProc(Pointer(g_socket_set_keepalive), 'g_socket_set_keepalive');
  LoadProc(Pointer(g_socket_set_listen_backlog), 'g_socket_set_listen_backlog');
  LoadProc(Pointer(g_socket_set_multicast_loopback), 'g_socket_set_multicast_loopback');
  LoadProc(Pointer(g_socket_set_multicast_ttl), 'g_socket_set_multicast_ttl');
  LoadProc(Pointer(g_socket_set_option), 'g_socket_set_option');
  LoadProc(Pointer(g_socket_set_timeout), 'g_socket_set_timeout');
  LoadProc(Pointer(g_socket_set_ttl), 'g_socket_set_ttl');
  LoadProc(Pointer(g_socket_shutdown), 'g_socket_shutdown');
  LoadProc(Pointer(g_socket_speaks_ipv4), 'g_socket_speaks_ipv4');
  LoadProc(Pointer(g_srv_target_copy), 'g_srv_target_copy');
  LoadProc(Pointer(g_srv_target_free), 'g_srv_target_free');
  LoadProc(Pointer(g_srv_target_get_hostname), 'g_srv_target_get_hostname');
  LoadProc(Pointer(g_srv_target_get_port), 'g_srv_target_get_port');
  LoadProc(Pointer(g_srv_target_get_priority), 'g_srv_target_get_priority');
  LoadProc(Pointer(g_srv_target_get_type), 'g_srv_target_get_type');
  LoadProc(Pointer(g_srv_target_get_weight), 'g_srv_target_get_weight');
  LoadProc(Pointer(g_srv_target_list_sort), 'g_srv_target_list_sort');
  LoadProc(Pointer(g_srv_target_new), 'g_srv_target_new');
  LoadProc(Pointer(g_static_resource_fini), 'g_static_resource_fini');
  LoadProc(Pointer(g_static_resource_get_resource), 'g_static_resource_get_resource');
  LoadProc(Pointer(g_static_resource_init), 'g_static_resource_init');
  LoadProc(Pointer(g_task_attach_source), 'g_task_attach_source');
  LoadProc(Pointer(g_task_get_cancellable), 'g_task_get_cancellable');
  LoadProc(Pointer(g_task_get_check_cancellable), 'g_task_get_check_cancellable');
  LoadProc(Pointer(g_task_get_context), 'g_task_get_context');
  LoadProc(Pointer(g_task_get_priority), 'g_task_get_priority');
  LoadProc(Pointer(g_task_get_return_on_cancel), 'g_task_get_return_on_cancel');
  LoadProc(Pointer(g_task_get_source_object), 'g_task_get_source_object');
  LoadProc(Pointer(g_task_get_source_tag), 'g_task_get_source_tag');
  LoadProc(Pointer(g_task_get_task_data), 'g_task_get_task_data');
  LoadProc(Pointer(g_task_get_type), 'g_task_get_type');
  LoadProc(Pointer(g_task_had_error), 'g_task_had_error');
  LoadProc(Pointer(g_task_is_valid), 'g_task_is_valid');
  LoadProc(Pointer(g_task_new), 'g_task_new');
  LoadProc(Pointer(g_task_propagate_boolean), 'g_task_propagate_boolean');
  LoadProc(Pointer(g_task_propagate_int), 'g_task_propagate_int');
  LoadProc(Pointer(g_task_propagate_pointer), 'g_task_propagate_pointer');
  LoadProc(Pointer(g_task_report_error), 'g_task_report_error');
  LoadProc(Pointer(g_task_report_new_error), 'g_task_report_new_error');
  LoadProc(Pointer(g_task_return_boolean), 'g_task_return_boolean');
  LoadProc(Pointer(g_task_return_error), 'g_task_return_error');
  LoadProc(Pointer(g_task_return_error_if_cancelled), 'g_task_return_error_if_cancelled');
  LoadProc(Pointer(g_task_return_int), 'g_task_return_int');
  LoadProc(Pointer(g_task_return_new_error), 'g_task_return_new_error');
  LoadProc(Pointer(g_task_return_pointer), 'g_task_return_pointer');
  LoadProc(Pointer(g_task_run_in_thread), 'g_task_run_in_thread');
  LoadProc(Pointer(g_task_run_in_thread_sync), 'g_task_run_in_thread_sync');
  LoadProc(Pointer(g_task_set_check_cancellable), 'g_task_set_check_cancellable');
  LoadProc(Pointer(g_task_set_priority), 'g_task_set_priority');
  LoadProc(Pointer(g_task_set_return_on_cancel), 'g_task_set_return_on_cancel');
  LoadProc(Pointer(g_task_set_source_tag), 'g_task_set_source_tag');
  LoadProc(Pointer(g_task_set_task_data), 'g_task_set_task_data');
  LoadProc(Pointer(g_tcp_connection_get_graceful_disconnect), 'g_tcp_connection_get_graceful_disconnect');
  LoadProc(Pointer(g_tcp_connection_get_type), 'g_tcp_connection_get_type');
  LoadProc(Pointer(g_tcp_connection_set_graceful_disconnect), 'g_tcp_connection_set_graceful_disconnect');
  LoadProc(Pointer(g_tcp_wrapper_connection_get_base_io_stream), 'g_tcp_wrapper_connection_get_base_io_stream');
  LoadProc(Pointer(g_tcp_wrapper_connection_get_type), 'g_tcp_wrapper_connection_get_type');
  LoadProc(Pointer(g_tcp_wrapper_connection_new), 'g_tcp_wrapper_connection_new');
  LoadProc(Pointer(g_test_dbus_add_service_dir), 'g_test_dbus_add_service_dir');
  LoadProc(Pointer(g_test_dbus_down), 'g_test_dbus_down');
  LoadProc(Pointer(g_test_dbus_get_bus_address), 'g_test_dbus_get_bus_address');
  LoadProc(Pointer(g_test_dbus_get_flags), 'g_test_dbus_get_flags');
  LoadProc(Pointer(g_test_dbus_get_type), 'g_test_dbus_get_type');
  LoadProc(Pointer(g_test_dbus_new), 'g_test_dbus_new');
  LoadProc(Pointer(g_test_dbus_stop), 'g_test_dbus_stop');
  LoadProc(Pointer(g_test_dbus_unset), 'g_test_dbus_unset');
  LoadProc(Pointer(g_test_dbus_up), 'g_test_dbus_up');
  LoadProc(Pointer(g_themed_icon_append_name), 'g_themed_icon_append_name');
  LoadProc(Pointer(g_themed_icon_get_names), 'g_themed_icon_get_names');
  LoadProc(Pointer(g_themed_icon_get_type), 'g_themed_icon_get_type');
  LoadProc(Pointer(g_themed_icon_new), 'g_themed_icon_new');
  LoadProc(Pointer(g_themed_icon_new_from_names), 'g_themed_icon_new_from_names');
  LoadProc(Pointer(g_themed_icon_new_with_default_fallbacks), 'g_themed_icon_new_with_default_fallbacks');
  LoadProc(Pointer(g_themed_icon_prepend_name), 'g_themed_icon_prepend_name');
  LoadProc(Pointer(g_threaded_socket_service_get_type), 'g_threaded_socket_service_get_type');
  LoadProc(Pointer(g_threaded_socket_service_new), 'g_threaded_socket_service_new');
  LoadProc(Pointer(g_tls_backend_get_certificate_type), 'g_tls_backend_get_certificate_type');
  LoadProc(Pointer(g_tls_backend_get_client_connection_type), 'g_tls_backend_get_client_connection_type');
  LoadProc(Pointer(g_tls_backend_get_default), 'g_tls_backend_get_default');
  LoadProc(Pointer(g_tls_backend_get_default_database), 'g_tls_backend_get_default_database');
  LoadProc(Pointer(g_tls_backend_get_file_database_type), 'g_tls_backend_get_file_database_type');
  LoadProc(Pointer(g_tls_backend_get_server_connection_type), 'g_tls_backend_get_server_connection_type');
  LoadProc(Pointer(g_tls_backend_get_type), 'g_tls_backend_get_type');
  LoadProc(Pointer(g_tls_backend_supports_tls), 'g_tls_backend_supports_tls');
  LoadProc(Pointer(g_tls_certificate_get_issuer), 'g_tls_certificate_get_issuer');
  LoadProc(Pointer(g_tls_certificate_get_type), 'g_tls_certificate_get_type');
  LoadProc(Pointer(g_tls_certificate_is_same), 'g_tls_certificate_is_same');
  LoadProc(Pointer(g_tls_certificate_list_new_from_file), 'g_tls_certificate_list_new_from_file');
  LoadProc(Pointer(g_tls_certificate_new_from_file), 'g_tls_certificate_new_from_file');
  LoadProc(Pointer(g_tls_certificate_new_from_files), 'g_tls_certificate_new_from_files');
  LoadProc(Pointer(g_tls_certificate_new_from_pem), 'g_tls_certificate_new_from_pem');
  LoadProc(Pointer(g_tls_certificate_verify), 'g_tls_certificate_verify');
  LoadProc(Pointer(g_tls_client_connection_get_accepted_cas), 'g_tls_client_connection_get_accepted_cas');
  LoadProc(Pointer(g_tls_client_connection_get_server_identity), 'g_tls_client_connection_get_server_identity');
  LoadProc(Pointer(g_tls_client_connection_get_type), 'g_tls_client_connection_get_type');
  LoadProc(Pointer(g_tls_client_connection_get_use_ssl3), 'g_tls_client_connection_get_use_ssl3');
  LoadProc(Pointer(g_tls_client_connection_get_validation_flags), 'g_tls_client_connection_get_validation_flags');
  LoadProc(Pointer(g_tls_client_connection_new), 'g_tls_client_connection_new');
  LoadProc(Pointer(g_tls_client_connection_set_server_identity), 'g_tls_client_connection_set_server_identity');
  LoadProc(Pointer(g_tls_client_connection_set_use_ssl3), 'g_tls_client_connection_set_use_ssl3');
  LoadProc(Pointer(g_tls_client_connection_set_validation_flags), 'g_tls_client_connection_set_validation_flags');
  LoadProc(Pointer(g_tls_connection_emit_accept_certificate), 'g_tls_connection_emit_accept_certificate');
  LoadProc(Pointer(g_tls_connection_get_certificate), 'g_tls_connection_get_certificate');
  LoadProc(Pointer(g_tls_connection_get_database), 'g_tls_connection_get_database');
  LoadProc(Pointer(g_tls_connection_get_interaction), 'g_tls_connection_get_interaction');
  LoadProc(Pointer(g_tls_connection_get_peer_certificate), 'g_tls_connection_get_peer_certificate');
  LoadProc(Pointer(g_tls_connection_get_peer_certificate_errors), 'g_tls_connection_get_peer_certificate_errors');
  LoadProc(Pointer(g_tls_connection_get_rehandshake_mode), 'g_tls_connection_get_rehandshake_mode');
  LoadProc(Pointer(g_tls_connection_get_require_close_notify), 'g_tls_connection_get_require_close_notify');
  LoadProc(Pointer(g_tls_connection_get_type), 'g_tls_connection_get_type');
  LoadProc(Pointer(g_tls_connection_handshake), 'g_tls_connection_handshake');
  LoadProc(Pointer(g_tls_connection_handshake_async), 'g_tls_connection_handshake_async');
  LoadProc(Pointer(g_tls_connection_handshake_finish), 'g_tls_connection_handshake_finish');
  LoadProc(Pointer(g_tls_connection_set_certificate), 'g_tls_connection_set_certificate');
  LoadProc(Pointer(g_tls_connection_set_database), 'g_tls_connection_set_database');
  LoadProc(Pointer(g_tls_connection_set_interaction), 'g_tls_connection_set_interaction');
  LoadProc(Pointer(g_tls_connection_set_rehandshake_mode), 'g_tls_connection_set_rehandshake_mode');
  LoadProc(Pointer(g_tls_connection_set_require_close_notify), 'g_tls_connection_set_require_close_notify');
  LoadProc(Pointer(g_tls_database_create_certificate_handle), 'g_tls_database_create_certificate_handle');
  LoadProc(Pointer(g_tls_database_get_type), 'g_tls_database_get_type');
  LoadProc(Pointer(g_tls_database_lookup_certificate_for_handle), 'g_tls_database_lookup_certificate_for_handle');
  LoadProc(Pointer(g_tls_database_lookup_certificate_for_handle_async), 'g_tls_database_lookup_certificate_for_handle_async');
  LoadProc(Pointer(g_tls_database_lookup_certificate_for_handle_finish), 'g_tls_database_lookup_certificate_for_handle_finish');
  LoadProc(Pointer(g_tls_database_lookup_certificate_issuer), 'g_tls_database_lookup_certificate_issuer');
  LoadProc(Pointer(g_tls_database_lookup_certificate_issuer_async), 'g_tls_database_lookup_certificate_issuer_async');
  LoadProc(Pointer(g_tls_database_lookup_certificate_issuer_finish), 'g_tls_database_lookup_certificate_issuer_finish');
  LoadProc(Pointer(g_tls_database_lookup_certificates_issued_by), 'g_tls_database_lookup_certificates_issued_by');
  LoadProc(Pointer(g_tls_database_lookup_certificates_issued_by_async), 'g_tls_database_lookup_certificates_issued_by_async');
  LoadProc(Pointer(g_tls_database_lookup_certificates_issued_by_finish), 'g_tls_database_lookup_certificates_issued_by_finish');
  LoadProc(Pointer(g_tls_database_verify_chain), 'g_tls_database_verify_chain');
  LoadProc(Pointer(g_tls_database_verify_chain_async), 'g_tls_database_verify_chain_async');
  LoadProc(Pointer(g_tls_database_verify_chain_finish), 'g_tls_database_verify_chain_finish');
  LoadProc(Pointer(g_tls_error_quark), 'g_tls_error_quark');
  LoadProc(Pointer(g_tls_file_database_get_type), 'g_tls_file_database_get_type');
  LoadProc(Pointer(g_tls_file_database_new), 'g_tls_file_database_new');
  LoadProc(Pointer(g_tls_interaction_ask_password), 'g_tls_interaction_ask_password');
  LoadProc(Pointer(g_tls_interaction_ask_password_async), 'g_tls_interaction_ask_password_async');
  LoadProc(Pointer(g_tls_interaction_ask_password_finish), 'g_tls_interaction_ask_password_finish');
  LoadProc(Pointer(g_tls_interaction_get_type), 'g_tls_interaction_get_type');
  LoadProc(Pointer(g_tls_interaction_invoke_ask_password), 'g_tls_interaction_invoke_ask_password');
  LoadProc(Pointer(g_tls_password_get_description), 'g_tls_password_get_description');
  LoadProc(Pointer(g_tls_password_get_flags), 'g_tls_password_get_flags');
  LoadProc(Pointer(g_tls_password_get_type), 'g_tls_password_get_type');
  LoadProc(Pointer(g_tls_password_get_value), 'g_tls_password_get_value');
  LoadProc(Pointer(g_tls_password_get_warning), 'g_tls_password_get_warning');
  LoadProc(Pointer(g_tls_password_new), 'g_tls_password_new');
  LoadProc(Pointer(g_tls_password_set_description), 'g_tls_password_set_description');
  LoadProc(Pointer(g_tls_password_set_flags), 'g_tls_password_set_flags');
  LoadProc(Pointer(g_tls_password_set_value), 'g_tls_password_set_value');
  LoadProc(Pointer(g_tls_password_set_value_full), 'g_tls_password_set_value_full');
  LoadProc(Pointer(g_tls_password_set_warning), 'g_tls_password_set_warning');
  LoadProc(Pointer(g_tls_server_connection_get_type), 'g_tls_server_connection_get_type');
  LoadProc(Pointer(g_tls_server_connection_new), 'g_tls_server_connection_new');
  LoadProc(Pointer(g_unix_connection_get_type), 'g_unix_connection_get_type');
  LoadProc(Pointer(g_unix_connection_receive_credentials), 'g_unix_connection_receive_credentials');
  LoadProc(Pointer(g_unix_connection_receive_credentials_async), 'g_unix_connection_receive_credentials_async');
  LoadProc(Pointer(g_unix_connection_receive_credentials_finish), 'g_unix_connection_receive_credentials_finish');
  LoadProc(Pointer(g_unix_connection_receive_fd), 'g_unix_connection_receive_fd');
  LoadProc(Pointer(g_unix_connection_send_credentials), 'g_unix_connection_send_credentials');
  LoadProc(Pointer(g_unix_connection_send_credentials_async), 'g_unix_connection_send_credentials_async');
  LoadProc(Pointer(g_unix_connection_send_credentials_finish), 'g_unix_connection_send_credentials_finish');
  LoadProc(Pointer(g_unix_connection_send_fd), 'g_unix_connection_send_fd');
  LoadProc(Pointer(g_unix_credentials_message_get_credentials), 'g_unix_credentials_message_get_credentials');
  LoadProc(Pointer(g_unix_credentials_message_get_type), 'g_unix_credentials_message_get_type');
  LoadProc(Pointer(g_unix_credentials_message_is_supported), 'g_unix_credentials_message_is_supported');
  LoadProc(Pointer(g_unix_credentials_message_new), 'g_unix_credentials_message_new');
  LoadProc(Pointer(g_unix_credentials_message_new_with_credentials), 'g_unix_credentials_message_new_with_credentials');
  LoadProc(Pointer(g_unix_fd_list_append), 'g_unix_fd_list_append');
  LoadProc(Pointer(g_unix_fd_list_get), 'g_unix_fd_list_get');
  LoadProc(Pointer(g_unix_fd_list_get_length), 'g_unix_fd_list_get_length');
  LoadProc(Pointer(g_unix_fd_list_get_type), 'g_unix_fd_list_get_type');
  LoadProc(Pointer(g_unix_fd_list_new), 'g_unix_fd_list_new');
  LoadProc(Pointer(g_unix_fd_list_new_from_array), 'g_unix_fd_list_new_from_array');
  LoadProc(Pointer(g_unix_fd_list_peek_fds), 'g_unix_fd_list_peek_fds');
  LoadProc(Pointer(g_unix_fd_list_steal_fds), 'g_unix_fd_list_steal_fds');
  LoadProc(Pointer(g_unix_fd_message_append_fd), 'g_unix_fd_message_append_fd');
  LoadProc(Pointer(g_unix_fd_message_get_fd_list), 'g_unix_fd_message_get_fd_list');
  LoadProc(Pointer(g_unix_fd_message_get_type), 'g_unix_fd_message_get_type');
  LoadProc(Pointer(g_unix_fd_message_new), 'g_unix_fd_message_new');
  LoadProc(Pointer(g_unix_fd_message_new_with_fd_list), 'g_unix_fd_message_new_with_fd_list');
  LoadProc(Pointer(g_unix_fd_message_steal_fds), 'g_unix_fd_message_steal_fds');
  LoadProc(Pointer(g_unix_input_stream_get_close_fd), 'g_unix_input_stream_get_close_fd');
  LoadProc(Pointer(g_unix_input_stream_get_fd), 'g_unix_input_stream_get_fd');
  LoadProc(Pointer(g_unix_input_stream_get_type), 'g_unix_input_stream_get_type');
  LoadProc(Pointer(g_unix_input_stream_new), 'g_unix_input_stream_new');
  LoadProc(Pointer(g_unix_input_stream_set_close_fd), 'g_unix_input_stream_set_close_fd');
  LoadProc(Pointer(g_unix_is_mount_path_system_internal), 'g_unix_is_mount_path_system_internal');
  LoadProc(Pointer(g_unix_mount_at), 'g_unix_mount_at');
  LoadProc(Pointer(g_unix_mount_compare), 'g_unix_mount_compare');
  LoadProc(Pointer(g_unix_mount_free), 'g_unix_mount_free');
  LoadProc(Pointer(g_unix_mount_get_device_path), 'g_unix_mount_get_device_path');
  LoadProc(Pointer(g_unix_mount_get_fs_type), 'g_unix_mount_get_fs_type');
  LoadProc(Pointer(g_unix_mount_get_mount_path), 'g_unix_mount_get_mount_path');
  LoadProc(Pointer(g_unix_mount_guess_can_eject), 'g_unix_mount_guess_can_eject');
  LoadProc(Pointer(g_unix_mount_guess_icon), 'g_unix_mount_guess_icon');
  LoadProc(Pointer(g_unix_mount_guess_name), 'g_unix_mount_guess_name');
  LoadProc(Pointer(g_unix_mount_guess_should_display), 'g_unix_mount_guess_should_display');
  LoadProc(Pointer(g_unix_mount_guess_symbolic_icon), 'g_unix_mount_guess_symbolic_icon');
  LoadProc(Pointer(g_unix_mount_is_readonly), 'g_unix_mount_is_readonly');
  LoadProc(Pointer(g_unix_mount_is_system_internal), 'g_unix_mount_is_system_internal');
  LoadProc(Pointer(g_unix_mount_monitor_get_type), 'g_unix_mount_monitor_get_type');
  LoadProc(Pointer(g_unix_mount_monitor_new), 'g_unix_mount_monitor_new');
  LoadProc(Pointer(g_unix_mount_monitor_set_rate_limit), 'g_unix_mount_monitor_set_rate_limit');
  LoadProc(Pointer(g_unix_mount_point_compare), 'g_unix_mount_point_compare');
  LoadProc(Pointer(g_unix_mount_point_free), 'g_unix_mount_point_free');
  LoadProc(Pointer(g_unix_mount_point_get_device_path), 'g_unix_mount_point_get_device_path');
  LoadProc(Pointer(g_unix_mount_point_get_fs_type), 'g_unix_mount_point_get_fs_type');
  LoadProc(Pointer(g_unix_mount_point_get_mount_path), 'g_unix_mount_point_get_mount_path');
  LoadProc(Pointer(g_unix_mount_point_get_options), 'g_unix_mount_point_get_options');
  LoadProc(Pointer(g_unix_mount_point_guess_can_eject), 'g_unix_mount_point_guess_can_eject');
  LoadProc(Pointer(g_unix_mount_point_guess_icon), 'g_unix_mount_point_guess_icon');
  LoadProc(Pointer(g_unix_mount_point_guess_name), 'g_unix_mount_point_guess_name');
  LoadProc(Pointer(g_unix_mount_point_guess_symbolic_icon), 'g_unix_mount_point_guess_symbolic_icon');
  LoadProc(Pointer(g_unix_mount_point_is_loopback), 'g_unix_mount_point_is_loopback');
  LoadProc(Pointer(g_unix_mount_point_is_readonly), 'g_unix_mount_point_is_readonly');
  LoadProc(Pointer(g_unix_mount_point_is_user_mountable), 'g_unix_mount_point_is_user_mountable');
  LoadProc(Pointer(g_unix_mount_points_changed_since), 'g_unix_mount_points_changed_since');
  LoadProc(Pointer(g_unix_mount_points_get), 'g_unix_mount_points_get');
  LoadProc(Pointer(g_unix_mounts_changed_since), 'g_unix_mounts_changed_since');
  LoadProc(Pointer(g_unix_mounts_get), 'g_unix_mounts_get');
  LoadProc(Pointer(g_unix_output_stream_get_close_fd), 'g_unix_output_stream_get_close_fd');
  LoadProc(Pointer(g_unix_output_stream_get_fd), 'g_unix_output_stream_get_fd');
  LoadProc(Pointer(g_unix_output_stream_get_type), 'g_unix_output_stream_get_type');
  LoadProc(Pointer(g_unix_output_stream_new), 'g_unix_output_stream_new');
  LoadProc(Pointer(g_unix_output_stream_set_close_fd), 'g_unix_output_stream_set_close_fd');
  LoadProc(Pointer(g_unix_socket_address_abstract_names_supported), 'g_unix_socket_address_abstract_names_supported');
  LoadProc(Pointer(g_unix_socket_address_get_address_type), 'g_unix_socket_address_get_address_type');
  LoadProc(Pointer(g_unix_socket_address_get_path), 'g_unix_socket_address_get_path');
  LoadProc(Pointer(g_unix_socket_address_get_path_len), 'g_unix_socket_address_get_path_len');
  LoadProc(Pointer(g_unix_socket_address_get_type), 'g_unix_socket_address_get_type');
  LoadProc(Pointer(g_unix_socket_address_new), 'g_unix_socket_address_new');
  LoadProc(Pointer(g_unix_socket_address_new_with_type), 'g_unix_socket_address_new_with_type');
  LoadProc(Pointer(g_vfs_get_default), 'g_vfs_get_default');
  LoadProc(Pointer(g_vfs_get_file_for_path), 'g_vfs_get_file_for_path');
  LoadProc(Pointer(g_vfs_get_file_for_uri), 'g_vfs_get_file_for_uri');
  LoadProc(Pointer(g_vfs_get_local), 'g_vfs_get_local');
  LoadProc(Pointer(g_vfs_get_supported_uri_schemes), 'g_vfs_get_supported_uri_schemes');
  LoadProc(Pointer(g_vfs_get_type), 'g_vfs_get_type');
  LoadProc(Pointer(g_vfs_is_active), 'g_vfs_is_active');
  LoadProc(Pointer(g_vfs_parse_name), 'g_vfs_parse_name');
  LoadProc(Pointer(g_volume_can_eject), 'g_volume_can_eject');
  LoadProc(Pointer(g_volume_can_mount), 'g_volume_can_mount');
  LoadProc(Pointer(g_volume_eject_with_operation), 'g_volume_eject_with_operation');
  LoadProc(Pointer(g_volume_eject_with_operation_finish), 'g_volume_eject_with_operation_finish');
  LoadProc(Pointer(g_volume_enumerate_identifiers), 'g_volume_enumerate_identifiers');
  LoadProc(Pointer(g_volume_get_activation_root), 'g_volume_get_activation_root');
  LoadProc(Pointer(g_volume_get_drive), 'g_volume_get_drive');
  LoadProc(Pointer(g_volume_get_icon), 'g_volume_get_icon');
  LoadProc(Pointer(g_volume_get_identifier), 'g_volume_get_identifier');
  LoadProc(Pointer(g_volume_get_mount), 'g_volume_get_mount');
  LoadProc(Pointer(g_volume_get_name), 'g_volume_get_name');
  LoadProc(Pointer(g_volume_get_sort_key), 'g_volume_get_sort_key');
  LoadProc(Pointer(g_volume_get_symbolic_icon), 'g_volume_get_symbolic_icon');
  LoadProc(Pointer(g_volume_get_type), 'g_volume_get_type');
  LoadProc(Pointer(g_volume_get_uuid), 'g_volume_get_uuid');
  LoadProc(Pointer(g_volume_monitor_get), 'g_volume_monitor_get');
  LoadProc(Pointer(g_volume_monitor_get_connected_drives), 'g_volume_monitor_get_connected_drives');
  LoadProc(Pointer(g_volume_monitor_get_mount_for_uuid), 'g_volume_monitor_get_mount_for_uuid');
  LoadProc(Pointer(g_volume_monitor_get_mounts), 'g_volume_monitor_get_mounts');
  LoadProc(Pointer(g_volume_monitor_get_type), 'g_volume_monitor_get_type');
  LoadProc(Pointer(g_volume_monitor_get_volume_for_uuid), 'g_volume_monitor_get_volume_for_uuid');
  LoadProc(Pointer(g_volume_monitor_get_volumes), 'g_volume_monitor_get_volumes');
  LoadProc(Pointer(g_volume_mount), 'g_volume_mount');
  LoadProc(Pointer(g_volume_mount_finish), 'g_volume_mount_finish');
  LoadProc(Pointer(g_volume_should_automount), 'g_volume_should_automount');
  LoadProc(Pointer(g_zlib_compressor_get_file_info), 'g_zlib_compressor_get_file_info');
  LoadProc(Pointer(g_zlib_compressor_get_type), 'g_zlib_compressor_get_type');
  LoadProc(Pointer(g_zlib_compressor_new), 'g_zlib_compressor_new');
  LoadProc(Pointer(g_zlib_compressor_set_file_info), 'g_zlib_compressor_set_file_info');
  LoadProc(Pointer(g_zlib_decompressor_get_file_info), 'g_zlib_decompressor_get_file_info');
  LoadProc(Pointer(g_zlib_decompressor_get_type), 'g_zlib_decompressor_get_type');
  LoadProc(Pointer(g_zlib_decompressor_new), 'g_zlib_decompressor_new');
end;

procedure UnloadLibraries;
begin
 if libgio_2_0_so_0 <> 0 then
   UnloadLibrary(libgio_2_0_so_0);
   libgio_2_0_so_0 := 0;
  g_action_activate := nil;
  g_action_change_state := nil;
  g_action_get_enabled := nil;
  g_action_get_name := nil;
  g_action_get_parameter_type := nil;
  g_action_get_state := nil;
  g_action_get_state_hint := nil;
  g_action_get_state_type := nil;
  g_action_get_type := nil;
  g_action_group_action_added := nil;
  g_action_group_action_enabled_changed := nil;
  g_action_group_action_removed := nil;
  g_action_group_action_state_changed := nil;
  g_action_group_activate_action := nil;
  g_action_group_change_action_state := nil;
  g_action_group_get_action_enabled := nil;
  g_action_group_get_action_parameter_type := nil;
  g_action_group_get_action_state := nil;
  g_action_group_get_action_state_hint := nil;
  g_action_group_get_action_state_type := nil;
  g_action_group_get_type := nil;
  g_action_group_has_action := nil;
  g_action_group_list_actions := nil;
  g_action_group_query_action := nil;
  g_action_map_add_action := nil;
  g_action_map_add_action_entries := nil;
  g_action_map_get_type := nil;
  g_action_map_lookup_action := nil;
  g_action_map_remove_action := nil;
  g_app_info_add_supports_type := nil;
  g_app_info_can_delete := nil;
  g_app_info_can_remove_supports_type := nil;
  g_app_info_create_from_commandline := nil;
  g_app_info_delete := nil;
  g_app_info_dup := nil;
  g_app_info_equal := nil;
  g_app_info_get_all := nil;
  g_app_info_get_all_for_type := nil;
  g_app_info_get_commandline := nil;
  g_app_info_get_default_for_type := nil;
  g_app_info_get_default_for_uri_scheme := nil;
  g_app_info_get_description := nil;
  g_app_info_get_display_name := nil;
  g_app_info_get_executable := nil;
  g_app_info_get_fallback_for_type := nil;
  g_app_info_get_icon := nil;
  g_app_info_get_id := nil;
  g_app_info_get_name := nil;
  g_app_info_get_recommended_for_type := nil;
  g_app_info_get_supported_types := nil;
  g_app_info_get_type := nil;
  g_app_info_launch := nil;
  g_app_info_launch_default_for_uri := nil;
  g_app_info_launch_uris := nil;
  g_app_info_remove_supports_type := nil;
  g_app_info_reset_type_associations := nil;
  g_app_info_set_as_default_for_extension := nil;
  g_app_info_set_as_default_for_type := nil;
  g_app_info_set_as_last_used_for_type := nil;
  g_app_info_should_show := nil;
  g_app_info_supports_files := nil;
  g_app_info_supports_uris := nil;
  g_app_launch_context_get_display := nil;
  g_app_launch_context_get_environment := nil;
  g_app_launch_context_get_startup_notify_id := nil;
  g_app_launch_context_get_type := nil;
  g_app_launch_context_launch_failed := nil;
  g_app_launch_context_new := nil;
  g_app_launch_context_setenv := nil;
  g_app_launch_context_unsetenv := nil;
  g_application_activate := nil;
  g_application_command_line_create_file_for_arg := nil;
  g_application_command_line_get_arguments := nil;
  g_application_command_line_get_cwd := nil;
  g_application_command_line_get_environ := nil;
  g_application_command_line_get_exit_status := nil;
  g_application_command_line_get_is_remote := nil;
  g_application_command_line_get_platform_data := nil;
  g_application_command_line_get_stdin := nil;
  g_application_command_line_get_type := nil;
  g_application_command_line_getenv := nil;
  g_application_command_line_print := nil;
  g_application_command_line_printerr := nil;
  g_application_command_line_set_exit_status := nil;
  g_application_get_application_id := nil;
  g_application_get_dbus_connection := nil;
  g_application_get_dbus_object_path := nil;
  g_application_get_default := nil;
  g_application_get_flags := nil;
  g_application_get_inactivity_timeout := nil;
  g_application_get_is_registered := nil;
  g_application_get_is_remote := nil;
  g_application_get_type := nil;
  g_application_hold := nil;
  g_application_id_is_valid := nil;
  g_application_new := nil;
  g_application_open := nil;
  g_application_quit := nil;
  g_application_register := nil;
  g_application_release := nil;
  g_application_run := nil;
  g_application_set_application_id := nil;
  g_application_set_default := nil;
  g_application_set_flags := nil;
  g_application_set_inactivity_timeout := nil;
  g_async_initable_get_type := nil;
  g_async_initable_init_async := nil;
  g_async_initable_init_finish := nil;
  g_async_initable_new_async := nil;
  g_async_initable_new_finish := nil;
  g_async_initable_new_valist_async := nil;
  g_async_initable_newv_async := nil;
  g_async_result_get_source_object := nil;
  g_async_result_get_type := nil;
  g_async_result_get_user_data := nil;
  g_async_result_is_tagged := nil;
  g_async_result_legacy_propagate_error := nil;
  g_buffered_input_stream_fill := nil;
  g_buffered_input_stream_fill_async := nil;
  g_buffered_input_stream_fill_finish := nil;
  g_buffered_input_stream_get_available := nil;
  g_buffered_input_stream_get_buffer_size := nil;
  g_buffered_input_stream_get_type := nil;
  g_buffered_input_stream_new := nil;
  g_buffered_input_stream_new_sized := nil;
  g_buffered_input_stream_peek := nil;
  g_buffered_input_stream_peek_buffer := nil;
  g_buffered_input_stream_read_byte := nil;
  g_buffered_input_stream_set_buffer_size := nil;
  g_buffered_output_stream_get_auto_grow := nil;
  g_buffered_output_stream_get_buffer_size := nil;
  g_buffered_output_stream_get_type := nil;
  g_buffered_output_stream_new := nil;
  g_buffered_output_stream_new_sized := nil;
  g_buffered_output_stream_set_auto_grow := nil;
  g_buffered_output_stream_set_buffer_size := nil;
  g_bus_get := nil;
  g_bus_get_finish := nil;
  g_bus_get_sync := nil;
  g_bus_own_name := nil;
  g_bus_own_name_on_connection := nil;
  g_bus_own_name_on_connection_with_closures := nil;
  g_bus_own_name_with_closures := nil;
  g_bus_unown_name := nil;
  g_bus_unwatch_name := nil;
  g_bus_watch_name := nil;
  g_bus_watch_name_on_connection := nil;
  g_bus_watch_name_on_connection_with_closures := nil;
  g_bus_watch_name_with_closures := nil;
  g_cancellable_cancel := nil;
  g_cancellable_connect := nil;
  g_cancellable_disconnect := nil;
  g_cancellable_get_current := nil;
  g_cancellable_get_fd := nil;
  g_cancellable_get_type := nil;
  g_cancellable_is_cancelled := nil;
  g_cancellable_make_pollfd := nil;
  g_cancellable_new := nil;
  g_cancellable_pop_current := nil;
  g_cancellable_push_current := nil;
  g_cancellable_release_fd := nil;
  g_cancellable_reset := nil;
  g_cancellable_set_error_if_cancelled := nil;
  g_cancellable_source_new := nil;
  g_charset_converter_get_num_fallbacks := nil;
  g_charset_converter_get_type := nil;
  g_charset_converter_get_use_fallback := nil;
  g_charset_converter_new := nil;
  g_charset_converter_set_use_fallback := nil;
  g_content_type_can_be_executable := nil;
  g_content_type_equals := nil;
  g_content_type_from_mime_type := nil;
  g_content_type_get_description := nil;
  g_content_type_get_generic_icon_name := nil;
  g_content_type_get_icon := nil;
  g_content_type_get_mime_type := nil;
  g_content_type_get_symbolic_icon := nil;
  g_content_type_guess := nil;
  g_content_type_guess_for_tree := nil;
  g_content_type_is_a := nil;
  g_content_type_is_unknown := nil;
  g_content_types_get_registered := nil;
  g_converter_convert := nil;
  g_converter_get_type := nil;
  g_converter_input_stream_get_converter := nil;
  g_converter_input_stream_get_type := nil;
  g_converter_input_stream_new := nil;
  g_converter_output_stream_get_converter := nil;
  g_converter_output_stream_get_type := nil;
  g_converter_output_stream_new := nil;
  g_converter_reset := nil;
  g_credentials_get_native := nil;
  g_credentials_get_type := nil;
  g_credentials_get_unix_pid := nil;
  g_credentials_get_unix_user := nil;
  g_credentials_is_same_user := nil;
  g_credentials_new := nil;
  g_credentials_set_native := nil;
  g_credentials_set_unix_user := nil;
  g_credentials_to_string := nil;
  g_data_input_stream_get_byte_order := nil;
  g_data_input_stream_get_newline_type := nil;
  g_data_input_stream_get_type := nil;
  g_data_input_stream_new := nil;
  g_data_input_stream_read_byte := nil;
  g_data_input_stream_read_int16 := nil;
  g_data_input_stream_read_int32 := nil;
  g_data_input_stream_read_int64 := nil;
  g_data_input_stream_read_line := nil;
  g_data_input_stream_read_line_async := nil;
  g_data_input_stream_read_line_finish := nil;
  g_data_input_stream_read_line_finish_utf8 := nil;
  g_data_input_stream_read_line_utf8 := nil;
  g_data_input_stream_read_uint16 := nil;
  g_data_input_stream_read_uint32 := nil;
  g_data_input_stream_read_uint64 := nil;
  g_data_input_stream_read_until := nil;
  g_data_input_stream_read_until_async := nil;
  g_data_input_stream_read_until_finish := nil;
  g_data_input_stream_read_upto := nil;
  g_data_input_stream_read_upto_async := nil;
  g_data_input_stream_read_upto_finish := nil;
  g_data_input_stream_set_byte_order := nil;
  g_data_input_stream_set_newline_type := nil;
  g_data_output_stream_get_byte_order := nil;
  g_data_output_stream_get_type := nil;
  g_data_output_stream_new := nil;
  g_data_output_stream_put_byte := nil;
  g_data_output_stream_put_int16 := nil;
  g_data_output_stream_put_int32 := nil;
  g_data_output_stream_put_int64 := nil;
  g_data_output_stream_put_string := nil;
  g_data_output_stream_put_uint16 := nil;
  g_data_output_stream_put_uint32 := nil;
  g_data_output_stream_put_uint64 := nil;
  g_data_output_stream_set_byte_order := nil;
  g_dbus_action_group_get := nil;
  g_dbus_action_group_get_type := nil;
  g_dbus_address_escape_value := nil;
  g_dbus_address_get_for_bus_sync := nil;
  g_dbus_address_get_stream := nil;
  g_dbus_address_get_stream_finish := nil;
  g_dbus_address_get_stream_sync := nil;
  g_dbus_annotation_info_get_type := nil;
  g_dbus_annotation_info_lookup := nil;
  g_dbus_annotation_info_ref := nil;
  g_dbus_annotation_info_unref := nil;
  g_dbus_arg_info_get_type := nil;
  g_dbus_arg_info_ref := nil;
  g_dbus_arg_info_unref := nil;
  g_dbus_auth_observer_allow_mechanism := nil;
  g_dbus_auth_observer_authorize_authenticated_peer := nil;
  g_dbus_auth_observer_get_type := nil;
  g_dbus_auth_observer_new := nil;
  g_dbus_connection_add_filter := nil;
  g_dbus_connection_call := nil;
  g_dbus_connection_call_finish := nil;
  g_dbus_connection_call_sync := nil;
  g_dbus_connection_call_with_unix_fd_list := nil;
  g_dbus_connection_call_with_unix_fd_list_finish := nil;
  g_dbus_connection_call_with_unix_fd_list_sync := nil;
  g_dbus_connection_close := nil;
  g_dbus_connection_close_finish := nil;
  g_dbus_connection_close_sync := nil;
  g_dbus_connection_emit_signal := nil;
  g_dbus_connection_export_action_group := nil;
  g_dbus_connection_export_menu_model := nil;
  g_dbus_connection_flush := nil;
  g_dbus_connection_flush_finish := nil;
  g_dbus_connection_flush_sync := nil;
  g_dbus_connection_get_capabilities := nil;
  g_dbus_connection_get_exit_on_close := nil;
  g_dbus_connection_get_guid := nil;
  g_dbus_connection_get_last_serial := nil;
  g_dbus_connection_get_peer_credentials := nil;
  g_dbus_connection_get_stream := nil;
  g_dbus_connection_get_type := nil;
  g_dbus_connection_get_unique_name := nil;
  g_dbus_connection_is_closed := nil;
  g_dbus_connection_new := nil;
  g_dbus_connection_new_finish := nil;
  g_dbus_connection_new_for_address := nil;
  g_dbus_connection_new_for_address_finish := nil;
  g_dbus_connection_new_for_address_sync := nil;
  g_dbus_connection_new_sync := nil;
  g_dbus_connection_register_object := nil;
  g_dbus_connection_register_subtree := nil;
  g_dbus_connection_remove_filter := nil;
  g_dbus_connection_send_message := nil;
  g_dbus_connection_send_message_with_reply := nil;
  g_dbus_connection_send_message_with_reply_finish := nil;
  g_dbus_connection_send_message_with_reply_sync := nil;
  g_dbus_connection_set_exit_on_close := nil;
  g_dbus_connection_signal_subscribe := nil;
  g_dbus_connection_signal_unsubscribe := nil;
  g_dbus_connection_start_message_processing := nil;
  g_dbus_connection_unexport_action_group := nil;
  g_dbus_connection_unexport_menu_model := nil;
  g_dbus_connection_unregister_object := nil;
  g_dbus_connection_unregister_subtree := nil;
  g_dbus_error_encode_gerror := nil;
  g_dbus_error_get_remote_error := nil;
  g_dbus_error_is_remote_error := nil;
  g_dbus_error_new_for_dbus_error := nil;
  g_dbus_error_quark := nil;
  g_dbus_error_register_error := nil;
  g_dbus_error_register_error_domain := nil;
  g_dbus_error_set_dbus_error := nil;
  g_dbus_error_set_dbus_error_valist := nil;
  g_dbus_error_strip_remote_error := nil;
  g_dbus_error_unregister_error := nil;
  g_dbus_generate_guid := nil;
  g_dbus_gvalue_to_gvariant := nil;
  g_dbus_gvariant_to_gvalue := nil;
  g_dbus_interface_dup_object := nil;
  g_dbus_interface_get_info := nil;
  g_dbus_interface_get_object := nil;
  g_dbus_interface_get_type := nil;
  g_dbus_interface_info_cache_build := nil;
  g_dbus_interface_info_cache_release := nil;
  g_dbus_interface_info_generate_xml := nil;
  g_dbus_interface_info_get_type := nil;
  g_dbus_interface_info_lookup_method := nil;
  g_dbus_interface_info_lookup_property := nil;
  g_dbus_interface_info_lookup_signal := nil;
  g_dbus_interface_info_ref := nil;
  g_dbus_interface_info_unref := nil;
  g_dbus_interface_set_object := nil;
  g_dbus_interface_skeleton_export := nil;
  g_dbus_interface_skeleton_flush := nil;
  g_dbus_interface_skeleton_get_connection := nil;
  g_dbus_interface_skeleton_get_connections := nil;
  g_dbus_interface_skeleton_get_flags := nil;
  g_dbus_interface_skeleton_get_info := nil;
  g_dbus_interface_skeleton_get_object_path := nil;
  g_dbus_interface_skeleton_get_properties := nil;
  g_dbus_interface_skeleton_get_type := nil;
  g_dbus_interface_skeleton_get_vtable := nil;
  g_dbus_interface_skeleton_has_connection := nil;
  g_dbus_interface_skeleton_set_flags := nil;
  g_dbus_interface_skeleton_unexport := nil;
  g_dbus_interface_skeleton_unexport_from_connection := nil;
  g_dbus_is_address := nil;
  g_dbus_is_guid := nil;
  g_dbus_is_interface_name := nil;
  g_dbus_is_member_name := nil;
  g_dbus_is_name := nil;
  g_dbus_is_supported_address := nil;
  g_dbus_is_unique_name := nil;
  g_dbus_menu_model_get := nil;
  g_dbus_menu_model_get_type := nil;
  g_dbus_message_bytes_needed := nil;
  g_dbus_message_copy := nil;
  g_dbus_message_get_arg0 := nil;
  g_dbus_message_get_body := nil;
  g_dbus_message_get_byte_order := nil;
  g_dbus_message_get_destination := nil;
  g_dbus_message_get_error_name := nil;
  g_dbus_message_get_flags := nil;
  g_dbus_message_get_header := nil;
  g_dbus_message_get_header_fields := nil;
  g_dbus_message_get_interface := nil;
  g_dbus_message_get_locked := nil;
  g_dbus_message_get_member := nil;
  g_dbus_message_get_message_type := nil;
  g_dbus_message_get_num_unix_fds := nil;
  g_dbus_message_get_path := nil;
  g_dbus_message_get_reply_serial := nil;
  g_dbus_message_get_sender := nil;
  g_dbus_message_get_serial := nil;
  g_dbus_message_get_signature := nil;
  g_dbus_message_get_type := nil;
  g_dbus_message_get_unix_fd_list := nil;
  g_dbus_message_lock := nil;
  g_dbus_message_new := nil;
  g_dbus_message_new_from_blob := nil;
  g_dbus_message_new_method_call := nil;
  g_dbus_message_new_method_error := nil;
  g_dbus_message_new_method_error_literal := nil;
  g_dbus_message_new_method_error_valist := nil;
  g_dbus_message_new_method_reply := nil;
  g_dbus_message_new_signal := nil;
  g_dbus_message_print := nil;
  g_dbus_message_set_body := nil;
  g_dbus_message_set_byte_order := nil;
  g_dbus_message_set_destination := nil;
  g_dbus_message_set_error_name := nil;
  g_dbus_message_set_flags := nil;
  g_dbus_message_set_header := nil;
  g_dbus_message_set_interface := nil;
  g_dbus_message_set_member := nil;
  g_dbus_message_set_message_type := nil;
  g_dbus_message_set_num_unix_fds := nil;
  g_dbus_message_set_path := nil;
  g_dbus_message_set_reply_serial := nil;
  g_dbus_message_set_sender := nil;
  g_dbus_message_set_serial := nil;
  g_dbus_message_set_signature := nil;
  g_dbus_message_set_unix_fd_list := nil;
  g_dbus_message_to_blob := nil;
  g_dbus_message_to_gerror := nil;
  g_dbus_method_info_get_type := nil;
  g_dbus_method_info_ref := nil;
  g_dbus_method_info_unref := nil;
  g_dbus_method_invocation_get_connection := nil;
  g_dbus_method_invocation_get_interface_name := nil;
  g_dbus_method_invocation_get_message := nil;
  g_dbus_method_invocation_get_method_info := nil;
  g_dbus_method_invocation_get_method_name := nil;
  g_dbus_method_invocation_get_object_path := nil;
  g_dbus_method_invocation_get_parameters := nil;
  g_dbus_method_invocation_get_sender := nil;
  g_dbus_method_invocation_get_type := nil;
  g_dbus_method_invocation_get_user_data := nil;
  g_dbus_method_invocation_return_dbus_error := nil;
  g_dbus_method_invocation_return_error := nil;
  g_dbus_method_invocation_return_error_literal := nil;
  g_dbus_method_invocation_return_error_valist := nil;
  g_dbus_method_invocation_return_gerror := nil;
  g_dbus_method_invocation_return_value := nil;
  g_dbus_method_invocation_return_value_with_unix_fd_list := nil;
  g_dbus_method_invocation_take_error := nil;
  g_dbus_node_info_generate_xml := nil;
  g_dbus_node_info_get_type := nil;
  g_dbus_node_info_lookup_interface := nil;
  g_dbus_node_info_new_for_xml := nil;
  g_dbus_node_info_ref := nil;
  g_dbus_node_info_unref := nil;
  g_dbus_object_get_interface := nil;
  g_dbus_object_get_interfaces := nil;
  g_dbus_object_get_object_path := nil;
  g_dbus_object_get_type := nil;
  g_dbus_object_manager_client_get_connection := nil;
  g_dbus_object_manager_client_get_flags := nil;
  g_dbus_object_manager_client_get_name := nil;
  g_dbus_object_manager_client_get_name_owner := nil;
  g_dbus_object_manager_client_get_type := nil;
  g_dbus_object_manager_client_new := nil;
  g_dbus_object_manager_client_new_finish := nil;
  g_dbus_object_manager_client_new_for_bus := nil;
  g_dbus_object_manager_client_new_for_bus_finish := nil;
  g_dbus_object_manager_client_new_for_bus_sync := nil;
  g_dbus_object_manager_client_new_sync := nil;
  g_dbus_object_manager_get_interface := nil;
  g_dbus_object_manager_get_object := nil;
  g_dbus_object_manager_get_object_path := nil;
  g_dbus_object_manager_get_objects := nil;
  g_dbus_object_manager_get_type := nil;
  g_dbus_object_manager_server_export := nil;
  g_dbus_object_manager_server_export_uniquely := nil;
  g_dbus_object_manager_server_get_connection := nil;
  g_dbus_object_manager_server_get_type := nil;
  g_dbus_object_manager_server_is_exported := nil;
  g_dbus_object_manager_server_new := nil;
  g_dbus_object_manager_server_set_connection := nil;
  g_dbus_object_manager_server_unexport := nil;
  g_dbus_object_proxy_get_connection := nil;
  g_dbus_object_proxy_get_type := nil;
  g_dbus_object_proxy_new := nil;
  g_dbus_object_skeleton_add_interface := nil;
  g_dbus_object_skeleton_flush := nil;
  g_dbus_object_skeleton_get_type := nil;
  g_dbus_object_skeleton_new := nil;
  g_dbus_object_skeleton_remove_interface := nil;
  g_dbus_object_skeleton_remove_interface_by_name := nil;
  g_dbus_object_skeleton_set_object_path := nil;
  g_dbus_property_info_get_type := nil;
  g_dbus_property_info_ref := nil;
  g_dbus_property_info_unref := nil;
  g_dbus_proxy_call := nil;
  g_dbus_proxy_call_finish := nil;
  g_dbus_proxy_call_sync := nil;
  g_dbus_proxy_call_with_unix_fd_list := nil;
  g_dbus_proxy_call_with_unix_fd_list_finish := nil;
  g_dbus_proxy_call_with_unix_fd_list_sync := nil;
  g_dbus_proxy_get_cached_property := nil;
  g_dbus_proxy_get_cached_property_names := nil;
  g_dbus_proxy_get_connection := nil;
  g_dbus_proxy_get_default_timeout := nil;
  g_dbus_proxy_get_flags := nil;
  g_dbus_proxy_get_interface_info := nil;
  g_dbus_proxy_get_interface_name := nil;
  g_dbus_proxy_get_name := nil;
  g_dbus_proxy_get_name_owner := nil;
  g_dbus_proxy_get_object_path := nil;
  g_dbus_proxy_get_type := nil;
  g_dbus_proxy_new := nil;
  g_dbus_proxy_new_finish := nil;
  g_dbus_proxy_new_for_bus := nil;
  g_dbus_proxy_new_for_bus_finish := nil;
  g_dbus_proxy_new_for_bus_sync := nil;
  g_dbus_proxy_new_sync := nil;
  g_dbus_proxy_set_cached_property := nil;
  g_dbus_proxy_set_default_timeout := nil;
  g_dbus_proxy_set_interface_info := nil;
  g_dbus_server_get_client_address := nil;
  g_dbus_server_get_flags := nil;
  g_dbus_server_get_guid := nil;
  g_dbus_server_get_type := nil;
  g_dbus_server_is_active := nil;
  g_dbus_server_new_sync := nil;
  g_dbus_server_start := nil;
  g_dbus_server_stop := nil;
  g_dbus_signal_info_get_type := nil;
  g_dbus_signal_info_ref := nil;
  g_dbus_signal_info_unref := nil;
  g_desktop_app_info_get_boolean := nil;
  g_desktop_app_info_get_categories := nil;
  g_desktop_app_info_get_filename := nil;
  g_desktop_app_info_get_generic_name := nil;
  g_desktop_app_info_get_is_hidden := nil;
  g_desktop_app_info_get_keywords := nil;
  g_desktop_app_info_get_nodisplay := nil;
  g_desktop_app_info_get_show_in := nil;
  g_desktop_app_info_get_startup_wm_class := nil;
  g_desktop_app_info_get_string := nil;
  g_desktop_app_info_get_type := nil;
  g_desktop_app_info_has_key := nil;
  g_desktop_app_info_launch_uris_as_manager := nil;
  g_desktop_app_info_lookup_get_type := nil;
  g_desktop_app_info_new := nil;
  g_desktop_app_info_new_from_filename := nil;
  g_desktop_app_info_new_from_keyfile := nil;
  g_desktop_app_info_set_desktop_env := nil;
  g_drive_can_eject := nil;
  g_drive_can_poll_for_media := nil;
  g_drive_can_start := nil;
  g_drive_can_start_degraded := nil;
  g_drive_can_stop := nil;
  g_drive_eject_with_operation := nil;
  g_drive_eject_with_operation_finish := nil;
  g_drive_enumerate_identifiers := nil;
  g_drive_get_icon := nil;
  g_drive_get_identifier := nil;
  g_drive_get_name := nil;
  g_drive_get_sort_key := nil;
  g_drive_get_start_stop_type := nil;
  g_drive_get_symbolic_icon := nil;
  g_drive_get_type := nil;
  g_drive_get_volumes := nil;
  g_drive_has_media := nil;
  g_drive_has_volumes := nil;
  g_drive_is_media_check_automatic := nil;
  g_drive_is_media_removable := nil;
  g_drive_poll_for_media := nil;
  g_drive_poll_for_media_finish := nil;
  g_drive_start := nil;
  g_drive_start_finish := nil;
  g_drive_stop := nil;
  g_drive_stop_finish := nil;
  g_emblem_get_icon := nil;
  g_emblem_get_origin := nil;
  g_emblem_get_type := nil;
  g_emblem_new := nil;
  g_emblem_new_with_origin := nil;
  g_emblemed_icon_add_emblem := nil;
  g_emblemed_icon_clear_emblems := nil;
  g_emblemed_icon_get_emblems := nil;
  g_emblemed_icon_get_icon := nil;
  g_emblemed_icon_get_type := nil;
  g_emblemed_icon_new := nil;
  g_file_append_to := nil;
  g_file_append_to_async := nil;
  g_file_append_to_finish := nil;
  g_file_attribute_info_list_add := nil;
  g_file_attribute_info_list_dup := nil;
  g_file_attribute_info_list_get_type := nil;
  g_file_attribute_info_list_lookup := nil;
  g_file_attribute_info_list_new := nil;
  g_file_attribute_info_list_ref := nil;
  g_file_attribute_info_list_unref := nil;
  g_file_attribute_matcher_enumerate_namespace := nil;
  g_file_attribute_matcher_enumerate_next := nil;
  g_file_attribute_matcher_get_type := nil;
  g_file_attribute_matcher_matches := nil;
  g_file_attribute_matcher_matches_only := nil;
  g_file_attribute_matcher_new := nil;
  g_file_attribute_matcher_ref := nil;
  g_file_attribute_matcher_subtract := nil;
  g_file_attribute_matcher_to_string := nil;
  g_file_attribute_matcher_unref := nil;
  g_file_copy := nil;
  g_file_copy_async := nil;
  g_file_copy_attributes := nil;
  g_file_copy_finish := nil;
  g_file_create := nil;
  g_file_create_async := nil;
  g_file_create_finish := nil;
  g_file_create_readwrite := nil;
  g_file_create_readwrite_async := nil;
  g_file_create_readwrite_finish := nil;
  g_file_delete := nil;
  g_file_delete_async := nil;
  g_file_delete_finish := nil;
  g_file_descriptor_based_get_fd := nil;
  g_file_descriptor_based_get_type := nil;
  g_file_dup := nil;
  g_file_eject_mountable_with_operation := nil;
  g_file_eject_mountable_with_operation_finish := nil;
  g_file_enumerate_children := nil;
  g_file_enumerate_children_async := nil;
  g_file_enumerate_children_finish := nil;
  g_file_enumerator_close := nil;
  g_file_enumerator_close_async := nil;
  g_file_enumerator_close_finish := nil;
  g_file_enumerator_get_child := nil;
  g_file_enumerator_get_container := nil;
  g_file_enumerator_get_type := nil;
  g_file_enumerator_has_pending := nil;
  g_file_enumerator_is_closed := nil;
  g_file_enumerator_next_file := nil;
  g_file_enumerator_next_files_async := nil;
  g_file_enumerator_next_files_finish := nil;
  g_file_enumerator_set_pending := nil;
  g_file_equal := nil;
  g_file_find_enclosing_mount := nil;
  g_file_find_enclosing_mount_async := nil;
  g_file_find_enclosing_mount_finish := nil;
  g_file_get_basename := nil;
  g_file_get_child := nil;
  g_file_get_child_for_display_name := nil;
  g_file_get_parent := nil;
  g_file_get_parse_name := nil;
  g_file_get_path := nil;
  g_file_get_relative_path := nil;
  g_file_get_type := nil;
  g_file_get_uri := nil;
  g_file_get_uri_scheme := nil;
  g_file_has_parent := nil;
  g_file_has_prefix := nil;
  g_file_has_uri_scheme := nil;
  g_file_hash := nil;
  g_file_icon_get_file := nil;
  g_file_icon_get_type := nil;
  g_file_icon_new := nil;
  g_file_info_clear_status := nil;
  g_file_info_copy_into := nil;
  g_file_info_dup := nil;
  g_file_info_get_attribute_as_string := nil;
  g_file_info_get_attribute_boolean := nil;
  g_file_info_get_attribute_byte_string := nil;
  g_file_info_get_attribute_data := nil;
  g_file_info_get_attribute_int32 := nil;
  g_file_info_get_attribute_int64 := nil;
  g_file_info_get_attribute_object := nil;
  g_file_info_get_attribute_status := nil;
  g_file_info_get_attribute_string := nil;
  g_file_info_get_attribute_stringv := nil;
  g_file_info_get_attribute_type := nil;
  g_file_info_get_attribute_uint32 := nil;
  g_file_info_get_attribute_uint64 := nil;
  g_file_info_get_content_type := nil;
  g_file_info_get_deletion_date := nil;
  g_file_info_get_display_name := nil;
  g_file_info_get_edit_name := nil;
  g_file_info_get_etag := nil;
  g_file_info_get_file_type := nil;
  g_file_info_get_icon := nil;
  g_file_info_get_is_backup := nil;
  g_file_info_get_is_hidden := nil;
  g_file_info_get_is_symlink := nil;
  g_file_info_get_modification_time := nil;
  g_file_info_get_name := nil;
  g_file_info_get_size := nil;
  g_file_info_get_sort_order := nil;
  g_file_info_get_symbolic_icon := nil;
  g_file_info_get_symlink_target := nil;
  g_file_info_get_type := nil;
  g_file_info_has_attribute := nil;
  g_file_info_has_namespace := nil;
  g_file_info_list_attributes := nil;
  g_file_info_new := nil;
  g_file_info_remove_attribute := nil;
  g_file_info_set_attribute := nil;
  g_file_info_set_attribute_boolean := nil;
  g_file_info_set_attribute_byte_string := nil;
  g_file_info_set_attribute_int32 := nil;
  g_file_info_set_attribute_int64 := nil;
  g_file_info_set_attribute_mask := nil;
  g_file_info_set_attribute_object := nil;
  g_file_info_set_attribute_status := nil;
  g_file_info_set_attribute_string := nil;
  g_file_info_set_attribute_stringv := nil;
  g_file_info_set_attribute_uint32 := nil;
  g_file_info_set_attribute_uint64 := nil;
  g_file_info_set_content_type := nil;
  g_file_info_set_display_name := nil;
  g_file_info_set_edit_name := nil;
  g_file_info_set_file_type := nil;
  g_file_info_set_icon := nil;
  g_file_info_set_is_hidden := nil;
  g_file_info_set_is_symlink := nil;
  g_file_info_set_modification_time := nil;
  g_file_info_set_name := nil;
  g_file_info_set_size := nil;
  g_file_info_set_sort_order := nil;
  g_file_info_set_symbolic_icon := nil;
  g_file_info_set_symlink_target := nil;
  g_file_info_unset_attribute_mask := nil;
  g_file_input_stream_get_type := nil;
  g_file_input_stream_query_info := nil;
  g_file_input_stream_query_info_async := nil;
  g_file_input_stream_query_info_finish := nil;
  g_file_io_stream_get_etag := nil;
  g_file_io_stream_get_type := nil;
  g_file_io_stream_query_info := nil;
  g_file_io_stream_query_info_async := nil;
  g_file_io_stream_query_info_finish := nil;
  g_file_is_native := nil;
  g_file_load_contents := nil;
  g_file_load_contents_async := nil;
  g_file_load_contents_finish := nil;
  g_file_load_partial_contents_async := nil;
  g_file_load_partial_contents_finish := nil;
  g_file_make_directory := nil;
  g_file_make_directory_with_parents := nil;
  g_file_make_symbolic_link := nil;
  g_file_monitor := nil;
  g_file_monitor_cancel := nil;
  g_file_monitor_directory := nil;
  g_file_monitor_emit_event := nil;
  g_file_monitor_file := nil;
  g_file_monitor_get_type := nil;
  g_file_monitor_is_cancelled := nil;
  g_file_monitor_set_rate_limit := nil;
  g_file_mount_enclosing_volume := nil;
  g_file_mount_enclosing_volume_finish := nil;
  g_file_mount_mountable := nil;
  g_file_mount_mountable_finish := nil;
  g_file_move := nil;
  g_file_new_for_commandline_arg := nil;
  g_file_new_for_commandline_arg_and_cwd := nil;
  g_file_new_for_path := nil;
  g_file_new_for_uri := nil;
  g_file_new_tmp := nil;
  g_file_open_readwrite := nil;
  g_file_open_readwrite_async := nil;
  g_file_open_readwrite_finish := nil;
  g_file_output_stream_get_etag := nil;
  g_file_output_stream_get_type := nil;
  g_file_output_stream_query_info := nil;
  g_file_output_stream_query_info_async := nil;
  g_file_output_stream_query_info_finish := nil;
  g_file_parse_name := nil;
  g_file_poll_mountable := nil;
  g_file_poll_mountable_finish := nil;
  g_file_query_default_handler := nil;
  g_file_query_exists := nil;
  g_file_query_file_type := nil;
  g_file_query_filesystem_info := nil;
  g_file_query_filesystem_info_async := nil;
  g_file_query_filesystem_info_finish := nil;
  g_file_query_info := nil;
  g_file_query_info_async := nil;
  g_file_query_info_finish := nil;
  g_file_query_settable_attributes := nil;
  g_file_query_writable_namespaces := nil;
  g_file_read := nil;
  g_file_read_async := nil;
  g_file_read_finish := nil;
  g_file_replace := nil;
  g_file_replace_async := nil;
  g_file_replace_contents := nil;
  g_file_replace_contents_async := nil;
  g_file_replace_contents_finish := nil;
  g_file_replace_finish := nil;
  g_file_replace_readwrite := nil;
  g_file_replace_readwrite_async := nil;
  g_file_replace_readwrite_finish := nil;
  g_file_resolve_relative_path := nil;
  g_file_set_attribute := nil;
  g_file_set_attribute_byte_string := nil;
  g_file_set_attribute_int32 := nil;
  g_file_set_attribute_int64 := nil;
  g_file_set_attribute_string := nil;
  g_file_set_attribute_uint32 := nil;
  g_file_set_attribute_uint64 := nil;
  g_file_set_attributes_async := nil;
  g_file_set_attributes_finish := nil;
  g_file_set_attributes_from_info := nil;
  g_file_set_display_name := nil;
  g_file_set_display_name_async := nil;
  g_file_set_display_name_finish := nil;
  g_file_start_mountable := nil;
  g_file_start_mountable_finish := nil;
  g_file_stop_mountable := nil;
  g_file_stop_mountable_finish := nil;
  g_file_supports_thread_contexts := nil;
  g_file_trash := nil;
  g_file_unmount_mountable_with_operation := nil;
  g_file_unmount_mountable_with_operation_finish := nil;
  g_filename_completer_get_completion_suffix := nil;
  g_filename_completer_get_completions := nil;
  g_filename_completer_get_type := nil;
  g_filename_completer_new := nil;
  g_filename_completer_set_dirs_only := nil;
  g_filter_input_stream_get_base_stream := nil;
  g_filter_input_stream_get_close_base_stream := nil;
  g_filter_input_stream_get_type := nil;
  g_filter_input_stream_set_close_base_stream := nil;
  g_filter_output_stream_get_base_stream := nil;
  g_filter_output_stream_get_close_base_stream := nil;
  g_filter_output_stream_get_type := nil;
  g_filter_output_stream_set_close_base_stream := nil;
  g_icon_equal := nil;
  g_icon_get_type := nil;
  g_icon_hash := nil;
  g_icon_new_for_string := nil;
  g_icon_to_string := nil;
  g_inet_address_equal := nil;
  g_inet_address_get_family := nil;
  g_inet_address_get_is_any := nil;
  g_inet_address_get_is_link_local := nil;
  g_inet_address_get_is_loopback := nil;
  g_inet_address_get_is_mc_global := nil;
  g_inet_address_get_is_mc_link_local := nil;
  g_inet_address_get_is_mc_node_local := nil;
  g_inet_address_get_is_mc_org_local := nil;
  g_inet_address_get_is_mc_site_local := nil;
  g_inet_address_get_is_multicast := nil;
  g_inet_address_get_is_site_local := nil;
  g_inet_address_get_native_size := nil;
  g_inet_address_get_type := nil;
  g_inet_address_mask_equal := nil;
  g_inet_address_mask_get_address := nil;
  g_inet_address_mask_get_family := nil;
  g_inet_address_mask_get_length := nil;
  g_inet_address_mask_get_type := nil;
  g_inet_address_mask_matches := nil;
  g_inet_address_mask_new := nil;
  g_inet_address_mask_new_from_string := nil;
  g_inet_address_mask_to_string := nil;
  g_inet_address_new_any := nil;
  g_inet_address_new_from_bytes := nil;
  g_inet_address_new_from_string := nil;
  g_inet_address_new_loopback := nil;
  g_inet_address_to_bytes := nil;
  g_inet_address_to_string := nil;
  g_inet_socket_address_get_address := nil;
  g_inet_socket_address_get_flowinfo := nil;
  g_inet_socket_address_get_port := nil;
  g_inet_socket_address_get_scope_id := nil;
  g_inet_socket_address_get_type := nil;
  g_inet_socket_address_new := nil;
  g_initable_get_type := nil;
  g_initable_init := nil;
  g_initable_new := nil;
  g_initable_new_valist := nil;
  g_initable_newv := nil;
  g_input_stream_clear_pending := nil;
  g_input_stream_close := nil;
  g_input_stream_close_async := nil;
  g_input_stream_close_finish := nil;
  g_input_stream_get_type := nil;
  g_input_stream_has_pending := nil;
  g_input_stream_is_closed := nil;
  g_input_stream_read := nil;
  g_input_stream_read_all := nil;
  g_input_stream_read_async := nil;
  g_input_stream_read_bytes := nil;
  g_input_stream_read_bytes_async := nil;
  g_input_stream_read_bytes_finish := nil;
  g_input_stream_read_finish := nil;
  g_input_stream_set_pending := nil;
  g_input_stream_skip := nil;
  g_input_stream_skip_async := nil;
  g_input_stream_skip_finish := nil;
  g_io_error_from_errno := nil;
  g_io_error_quark := nil;
  g_io_extension_get_name := nil;
  g_io_extension_get_priority := nil;
  g_io_extension_get_type := nil;
  g_io_extension_point_get_extension_by_name := nil;
  g_io_extension_point_get_extensions := nil;
  g_io_extension_point_get_required_type := nil;
  g_io_extension_point_implement := nil;
  g_io_extension_point_lookup := nil;
  g_io_extension_point_register := nil;
  g_io_extension_point_set_required_type := nil;
  g_io_extension_ref_class := nil;
  g_io_module_get_type := nil;
  g_io_module_new := nil;
  g_io_module_scope_block := nil;
  g_io_module_scope_free := nil;
  g_io_module_scope_new := nil;
  g_io_modules_load_all_in_directory := nil;
  g_io_modules_load_all_in_directory_with_scope := nil;
  g_io_modules_scan_all_in_directory := nil;
  g_io_modules_scan_all_in_directory_with_scope := nil;
  g_io_scheduler_cancel_all_jobs := nil;
  g_io_scheduler_push_job := nil;
  g_io_stream_clear_pending := nil;
  g_io_stream_close := nil;
  g_io_stream_close_async := nil;
  g_io_stream_close_finish := nil;
  g_io_stream_get_input_stream := nil;
  g_io_stream_get_output_stream := nil;
  g_io_stream_get_type := nil;
  g_io_stream_has_pending := nil;
  g_io_stream_is_closed := nil;
  g_io_stream_set_pending := nil;
  g_io_stream_splice_async := nil;
  g_io_stream_splice_finish := nil;
  g_loadable_icon_get_type := nil;
  g_loadable_icon_load := nil;
  g_loadable_icon_load_async := nil;
  g_loadable_icon_load_finish := nil;
  g_memory_input_stream_add_bytes := nil;
  g_memory_input_stream_add_data := nil;
  g_memory_input_stream_get_type := nil;
  g_memory_input_stream_new := nil;
  g_memory_input_stream_new_from_bytes := nil;
  g_memory_input_stream_new_from_data := nil;
  g_memory_output_stream_get_data := nil;
  g_memory_output_stream_get_data_size := nil;
  g_memory_output_stream_get_size := nil;
  g_memory_output_stream_get_type := nil;
  g_memory_output_stream_new := nil;
  g_memory_output_stream_new_resizable := nil;
  g_memory_output_stream_steal_as_bytes := nil;
  g_memory_output_stream_steal_data := nil;
  g_menu_append := nil;
  g_menu_append_item := nil;
  g_menu_append_section := nil;
  g_menu_append_submenu := nil;
  g_menu_attribute_iter_get_name := nil;
  g_menu_attribute_iter_get_next := nil;
  g_menu_attribute_iter_get_type := nil;
  g_menu_attribute_iter_get_value := nil;
  g_menu_attribute_iter_next := nil;
  g_menu_freeze := nil;
  g_menu_get_type := nil;
  g_menu_insert := nil;
  g_menu_insert_item := nil;
  g_menu_insert_section := nil;
  g_menu_insert_submenu := nil;
  g_menu_item_get_attribute := nil;
  g_menu_item_get_attribute_value := nil;
  g_menu_item_get_link := nil;
  g_menu_item_get_type := nil;
  g_menu_item_new := nil;
  g_menu_item_new_from_model := nil;
  g_menu_item_new_section := nil;
  g_menu_item_new_submenu := nil;
  g_menu_item_set_action_and_target := nil;
  g_menu_item_set_action_and_target_value := nil;
  g_menu_item_set_attribute := nil;
  g_menu_item_set_attribute_value := nil;
  g_menu_item_set_detailed_action := nil;
  g_menu_item_set_label := nil;
  g_menu_item_set_link := nil;
  g_menu_item_set_section := nil;
  g_menu_item_set_submenu := nil;
  g_menu_link_iter_get_name := nil;
  g_menu_link_iter_get_next := nil;
  g_menu_link_iter_get_type := nil;
  g_menu_link_iter_get_value := nil;
  g_menu_link_iter_next := nil;
  g_menu_model_get_item_attribute := nil;
  g_menu_model_get_item_attribute_value := nil;
  g_menu_model_get_item_link := nil;
  g_menu_model_get_n_items := nil;
  g_menu_model_get_type := nil;
  g_menu_model_is_mutable := nil;
  g_menu_model_items_changed := nil;
  g_menu_model_iterate_item_attributes := nil;
  g_menu_model_iterate_item_links := nil;
  g_menu_new := nil;
  g_menu_prepend := nil;
  g_menu_prepend_item := nil;
  g_menu_prepend_section := nil;
  g_menu_prepend_submenu := nil;
  g_menu_remove := nil;
  g_mount_can_eject := nil;
  g_mount_can_unmount := nil;
  g_mount_eject_with_operation := nil;
  g_mount_eject_with_operation_finish := nil;
  g_mount_get_default_location := nil;
  g_mount_get_drive := nil;
  g_mount_get_icon := nil;
  g_mount_get_name := nil;
  g_mount_get_root := nil;
  g_mount_get_sort_key := nil;
  g_mount_get_symbolic_icon := nil;
  g_mount_get_type := nil;
  g_mount_get_uuid := nil;
  g_mount_get_volume := nil;
  g_mount_guess_content_type := nil;
  g_mount_guess_content_type_finish := nil;
  g_mount_guess_content_type_sync := nil;
  g_mount_is_shadowed := nil;
  g_mount_operation_get_anonymous := nil;
  g_mount_operation_get_choice := nil;
  g_mount_operation_get_domain := nil;
  g_mount_operation_get_password := nil;
  g_mount_operation_get_password_save := nil;
  g_mount_operation_get_type := nil;
  g_mount_operation_get_username := nil;
  g_mount_operation_new := nil;
  g_mount_operation_reply := nil;
  g_mount_operation_set_anonymous := nil;
  g_mount_operation_set_choice := nil;
  g_mount_operation_set_domain := nil;
  g_mount_operation_set_password := nil;
  g_mount_operation_set_password_save := nil;
  g_mount_operation_set_username := nil;
  g_mount_remount := nil;
  g_mount_remount_finish := nil;
  g_mount_shadow := nil;
  g_mount_unmount_with_operation := nil;
  g_mount_unmount_with_operation_finish := nil;
  g_mount_unshadow := nil;
  g_native_volume_monitor_get_type := nil;
  g_network_address_get_hostname := nil;
  g_network_address_get_port := nil;
  g_network_address_get_scheme := nil;
  g_network_address_get_type := nil;
  g_network_address_new := nil;
  g_network_address_parse := nil;
  g_network_address_parse_uri := nil;
  g_network_monitor_can_reach := nil;
  g_network_monitor_can_reach_async := nil;
  g_network_monitor_can_reach_finish := nil;
  g_network_monitor_get_default := nil;
  g_network_monitor_get_network_available := nil;
  g_network_monitor_get_type := nil;
  g_network_service_get_domain := nil;
  g_network_service_get_protocol := nil;
  g_network_service_get_scheme := nil;
  g_network_service_get_service := nil;
  g_network_service_get_type := nil;
  g_network_service_new := nil;
  g_network_service_set_scheme := nil;
  g_networking_init := nil;
  g_output_stream_clear_pending := nil;
  g_output_stream_close := nil;
  g_output_stream_close_async := nil;
  g_output_stream_close_finish := nil;
  g_output_stream_flush := nil;
  g_output_stream_flush_async := nil;
  g_output_stream_flush_finish := nil;
  g_output_stream_get_type := nil;
  g_output_stream_has_pending := nil;
  g_output_stream_is_closed := nil;
  g_output_stream_is_closing := nil;
  g_output_stream_set_pending := nil;
  g_output_stream_splice := nil;
  g_output_stream_splice_async := nil;
  g_output_stream_splice_finish := nil;
  g_output_stream_write := nil;
  g_output_stream_write_all := nil;
  g_output_stream_write_async := nil;
  g_output_stream_write_bytes := nil;
  g_output_stream_write_bytes_async := nil;
  g_output_stream_write_bytes_finish := nil;
  g_output_stream_write_finish := nil;
  g_permission_acquire := nil;
  g_permission_acquire_async := nil;
  g_permission_acquire_finish := nil;
  g_permission_get_allowed := nil;
  g_permission_get_can_acquire := nil;
  g_permission_get_can_release := nil;
  g_permission_get_type := nil;
  g_permission_impl_update := nil;
  g_permission_release := nil;
  g_permission_release_async := nil;
  g_permission_release_finish := nil;
  g_pollable_input_stream_can_poll := nil;
  g_pollable_input_stream_create_source := nil;
  g_pollable_input_stream_get_type := nil;
  g_pollable_input_stream_is_readable := nil;
  g_pollable_input_stream_read_nonblocking := nil;
  g_pollable_output_stream_can_poll := nil;
  g_pollable_output_stream_create_source := nil;
  g_pollable_output_stream_get_type := nil;
  g_pollable_output_stream_is_writable := nil;
  g_pollable_output_stream_write_nonblocking := nil;
  g_pollable_source_new := nil;
  g_pollable_source_new_full := nil;
  g_pollable_stream_read := nil;
  g_pollable_stream_write := nil;
  g_pollable_stream_write_all := nil;
  g_proxy_address_enumerator_get_type := nil;
  g_proxy_address_get_destination_hostname := nil;
  g_proxy_address_get_destination_port := nil;
  g_proxy_address_get_destination_protocol := nil;
  g_proxy_address_get_password := nil;
  g_proxy_address_get_protocol := nil;
  g_proxy_address_get_type := nil;
  g_proxy_address_get_uri := nil;
  g_proxy_address_get_username := nil;
  g_proxy_address_new := nil;
  g_proxy_connect := nil;
  g_proxy_connect_async := nil;
  g_proxy_connect_finish := nil;
  g_proxy_get_default_for_protocol := nil;
  g_proxy_get_type := nil;
  g_proxy_resolver_get_default := nil;
  g_proxy_resolver_get_type := nil;
  g_proxy_resolver_is_supported := nil;
  g_proxy_resolver_lookup := nil;
  g_proxy_resolver_lookup_async := nil;
  g_proxy_resolver_lookup_finish := nil;
  g_proxy_supports_hostname := nil;
  g_remote_action_group_activate_action_full := nil;
  g_remote_action_group_change_action_state_full := nil;
  g_remote_action_group_get_type := nil;
  g_resolver_error_quark := nil;
  g_resolver_free_addresses := nil;
  g_resolver_free_targets := nil;
  g_resolver_get_default := nil;
  g_resolver_get_type := nil;
  g_resolver_lookup_by_address := nil;
  g_resolver_lookup_by_address_async := nil;
  g_resolver_lookup_by_address_finish := nil;
  g_resolver_lookup_by_name := nil;
  g_resolver_lookup_by_name_async := nil;
  g_resolver_lookup_by_name_finish := nil;
  g_resolver_lookup_records := nil;
  g_resolver_lookup_records_async := nil;
  g_resolver_lookup_records_finish := nil;
  g_resolver_lookup_service := nil;
  g_resolver_lookup_service_async := nil;
  g_resolver_lookup_service_finish := nil;
  g_resolver_set_default := nil;
  g_resource_enumerate_children := nil;
  g_resource_error_quark := nil;
  g_resource_get_info := nil;
  g_resource_get_type := nil;
  g_resource_load := nil;
  g_resource_lookup_data := nil;
  g_resource_new_from_data := nil;
  g_resource_open_stream := nil;
  g_resource_ref := nil;
  g_resource_unref := nil;
  g_resources_enumerate_children := nil;
  g_resources_get_info := nil;
  g_resources_lookup_data := nil;
  g_resources_open_stream := nil;
  g_resources_register := nil;
  g_resources_unregister := nil;
  g_seekable_can_seek := nil;
  g_seekable_can_truncate := nil;
  g_seekable_get_type := nil;
  g_seekable_seek := nil;
  g_seekable_tell := nil;
  g_seekable_truncate := nil;
  g_settings_apply := nil;
  g_settings_bind := nil;
  g_settings_bind_with_mapping := nil;
  g_settings_bind_writable := nil;
  g_settings_create_action := nil;
  g_settings_delay := nil;
  g_settings_get := nil;
  g_settings_get_boolean := nil;
  g_settings_get_child := nil;
  g_settings_get_double := nil;
  g_settings_get_enum := nil;
  g_settings_get_flags := nil;
  g_settings_get_has_unapplied := nil;
  g_settings_get_int := nil;
  g_settings_get_mapped := nil;
  g_settings_get_range := nil;
  g_settings_get_string := nil;
  g_settings_get_strv := nil;
  g_settings_get_type := nil;
  g_settings_get_uint := nil;
  g_settings_get_value := nil;
  g_settings_is_writable := nil;
  g_settings_list_children := nil;
  g_settings_list_keys := nil;
  g_settings_list_relocatable_schemas := nil;
  g_settings_list_schemas := nil;
  g_settings_new := nil;
  g_settings_new_full := nil;
  g_settings_new_with_backend := nil;
  g_settings_new_with_backend_and_path := nil;
  g_settings_new_with_path := nil;
  g_settings_range_check := nil;
  g_settings_reset := nil;
  g_settings_revert := nil;
  g_settings_schema_get_id := nil;
  g_settings_schema_get_path := nil;
  g_settings_schema_get_type := nil;
  g_settings_schema_ref := nil;
  g_settings_schema_source_get_default := nil;
  g_settings_schema_source_get_type := nil;
  g_settings_schema_source_lookup := nil;
  g_settings_schema_source_new_from_directory := nil;
  g_settings_schema_source_ref := nil;
  g_settings_schema_source_unref := nil;
  g_settings_schema_unref := nil;
  g_settings_set := nil;
  g_settings_set_boolean := nil;
  g_settings_set_double := nil;
  g_settings_set_enum := nil;
  g_settings_set_flags := nil;
  g_settings_set_int := nil;
  g_settings_set_string := nil;
  g_settings_set_strv := nil;
  g_settings_set_uint := nil;
  g_settings_set_value := nil;
  g_settings_sync := nil;
  g_settings_unbind := nil;
  g_simple_action_get_type := nil;
  g_simple_action_group_add_entries := nil;
  g_simple_action_group_get_type := nil;
  g_simple_action_group_insert := nil;
  g_simple_action_group_lookup := nil;
  g_simple_action_group_new := nil;
  g_simple_action_group_remove := nil;
  g_simple_action_new := nil;
  g_simple_action_new_stateful := nil;
  g_simple_action_set_enabled := nil;
  g_simple_action_set_state := nil;
  g_simple_async_report_error_in_idle := nil;
  g_simple_async_report_gerror_in_idle := nil;
  g_simple_async_report_take_gerror_in_idle := nil;
  g_simple_async_result_complete := nil;
  g_simple_async_result_complete_in_idle := nil;
  g_simple_async_result_get_op_res_gboolean := nil;
  g_simple_async_result_get_op_res_gpointer := nil;
  g_simple_async_result_get_op_res_gssize := nil;
  g_simple_async_result_get_source_tag := nil;
  g_simple_async_result_get_type := nil;
  g_simple_async_result_is_valid := nil;
  g_simple_async_result_new := nil;
  g_simple_async_result_new_error := nil;
  g_simple_async_result_new_from_error := nil;
  g_simple_async_result_new_take_error := nil;
  g_simple_async_result_propagate_error := nil;
  g_simple_async_result_run_in_thread := nil;
  g_simple_async_result_set_check_cancellable := nil;
  g_simple_async_result_set_error := nil;
  g_simple_async_result_set_error_va := nil;
  g_simple_async_result_set_from_error := nil;
  g_simple_async_result_set_handle_cancellation := nil;
  g_simple_async_result_set_op_res_gboolean := nil;
  g_simple_async_result_set_op_res_gpointer := nil;
  g_simple_async_result_set_op_res_gssize := nil;
  g_simple_async_result_take_error := nil;
  g_simple_permission_get_type := nil;
  g_simple_permission_new := nil;
  g_simple_proxy_resolver_get_type := nil;
  g_simple_proxy_resolver_new := nil;
  g_simple_proxy_resolver_set_default_proxy := nil;
  g_simple_proxy_resolver_set_ignore_hosts := nil;
  g_simple_proxy_resolver_set_uri_proxy := nil;
  g_socket_accept := nil;
  g_socket_address_enumerator_get_type := nil;
  g_socket_address_enumerator_next := nil;
  g_socket_address_enumerator_next_async := nil;
  g_socket_address_enumerator_next_finish := nil;
  g_socket_address_get_family := nil;
  g_socket_address_get_native_size := nil;
  g_socket_address_get_type := nil;
  g_socket_address_new_from_native := nil;
  g_socket_address_to_native := nil;
  g_socket_bind := nil;
  g_socket_check_connect_result := nil;
  g_socket_client_add_application_proxy := nil;
  g_socket_client_connect := nil;
  g_socket_client_connect_async := nil;
  g_socket_client_connect_finish := nil;
  g_socket_client_connect_to_host := nil;
  g_socket_client_connect_to_host_async := nil;
  g_socket_client_connect_to_host_finish := nil;
  g_socket_client_connect_to_service := nil;
  g_socket_client_connect_to_service_async := nil;
  g_socket_client_connect_to_service_finish := nil;
  g_socket_client_connect_to_uri := nil;
  g_socket_client_connect_to_uri_async := nil;
  g_socket_client_connect_to_uri_finish := nil;
  g_socket_client_get_enable_proxy := nil;
  g_socket_client_get_family := nil;
  g_socket_client_get_local_address := nil;
  g_socket_client_get_protocol := nil;
  g_socket_client_get_proxy_resolver := nil;
  g_socket_client_get_socket_type := nil;
  g_socket_client_get_timeout := nil;
  g_socket_client_get_tls := nil;
  g_socket_client_get_tls_validation_flags := nil;
  g_socket_client_get_type := nil;
  g_socket_client_new := nil;
  g_socket_client_set_enable_proxy := nil;
  g_socket_client_set_family := nil;
  g_socket_client_set_local_address := nil;
  g_socket_client_set_protocol := nil;
  g_socket_client_set_proxy_resolver := nil;
  g_socket_client_set_socket_type := nil;
  g_socket_client_set_timeout := nil;
  g_socket_client_set_tls := nil;
  g_socket_client_set_tls_validation_flags := nil;
  g_socket_close := nil;
  g_socket_condition_check := nil;
  g_socket_condition_timed_wait := nil;
  g_socket_condition_wait := nil;
  g_socket_connect := nil;
  g_socket_connectable_enumerate := nil;
  g_socket_connectable_get_type := nil;
  g_socket_connectable_proxy_enumerate := nil;
  g_socket_connection_connect := nil;
  g_socket_connection_connect_async := nil;
  g_socket_connection_connect_finish := nil;
  g_socket_connection_factory_create_connection := nil;
  g_socket_connection_factory_lookup_type := nil;
  g_socket_connection_factory_register_type := nil;
  g_socket_connection_get_local_address := nil;
  g_socket_connection_get_remote_address := nil;
  g_socket_connection_get_socket := nil;
  g_socket_connection_get_type := nil;
  g_socket_connection_is_connected := nil;
  g_socket_control_message_deserialize := nil;
  g_socket_control_message_get_level := nil;
  g_socket_control_message_get_msg_type := nil;
  g_socket_control_message_get_size := nil;
  g_socket_control_message_get_type := nil;
  g_socket_control_message_serialize := nil;
  g_socket_create_source := nil;
  g_socket_get_available_bytes := nil;
  g_socket_get_blocking := nil;
  g_socket_get_broadcast := nil;
  g_socket_get_credentials := nil;
  g_socket_get_family := nil;
  g_socket_get_fd := nil;
  g_socket_get_keepalive := nil;
  g_socket_get_listen_backlog := nil;
  g_socket_get_local_address := nil;
  g_socket_get_multicast_loopback := nil;
  g_socket_get_multicast_ttl := nil;
  g_socket_get_option := nil;
  g_socket_get_protocol := nil;
  g_socket_get_remote_address := nil;
  g_socket_get_socket_type := nil;
  g_socket_get_timeout := nil;
  g_socket_get_ttl := nil;
  g_socket_get_type := nil;
  g_socket_is_closed := nil;
  g_socket_is_connected := nil;
  g_socket_join_multicast_group := nil;
  g_socket_leave_multicast_group := nil;
  g_socket_listen := nil;
  g_socket_listener_accept := nil;
  g_socket_listener_accept_async := nil;
  g_socket_listener_accept_finish := nil;
  g_socket_listener_accept_socket := nil;
  g_socket_listener_accept_socket_async := nil;
  g_socket_listener_accept_socket_finish := nil;
  g_socket_listener_add_address := nil;
  g_socket_listener_add_any_inet_port := nil;
  g_socket_listener_add_inet_port := nil;
  g_socket_listener_add_socket := nil;
  g_socket_listener_close := nil;
  g_socket_listener_get_type := nil;
  g_socket_listener_new := nil;
  g_socket_listener_set_backlog := nil;
  g_socket_new := nil;
  g_socket_new_from_fd := nil;
  g_socket_receive := nil;
  g_socket_receive_from := nil;
  g_socket_receive_message := nil;
  g_socket_receive_with_blocking := nil;
  g_socket_send := nil;
  g_socket_send_message := nil;
  g_socket_send_to := nil;
  g_socket_send_with_blocking := nil;
  g_socket_service_get_type := nil;
  g_socket_service_is_active := nil;
  g_socket_service_new := nil;
  g_socket_service_start := nil;
  g_socket_service_stop := nil;
  g_socket_set_blocking := nil;
  g_socket_set_broadcast := nil;
  g_socket_set_keepalive := nil;
  g_socket_set_listen_backlog := nil;
  g_socket_set_multicast_loopback := nil;
  g_socket_set_multicast_ttl := nil;
  g_socket_set_option := nil;
  g_socket_set_timeout := nil;
  g_socket_set_ttl := nil;
  g_socket_shutdown := nil;
  g_socket_speaks_ipv4 := nil;
  g_srv_target_copy := nil;
  g_srv_target_free := nil;
  g_srv_target_get_hostname := nil;
  g_srv_target_get_port := nil;
  g_srv_target_get_priority := nil;
  g_srv_target_get_type := nil;
  g_srv_target_get_weight := nil;
  g_srv_target_list_sort := nil;
  g_srv_target_new := nil;
  g_static_resource_fini := nil;
  g_static_resource_get_resource := nil;
  g_static_resource_init := nil;
  g_task_attach_source := nil;
  g_task_get_cancellable := nil;
  g_task_get_check_cancellable := nil;
  g_task_get_context := nil;
  g_task_get_priority := nil;
  g_task_get_return_on_cancel := nil;
  g_task_get_source_object := nil;
  g_task_get_source_tag := nil;
  g_task_get_task_data := nil;
  g_task_get_type := nil;
  g_task_had_error := nil;
  g_task_is_valid := nil;
  g_task_new := nil;
  g_task_propagate_boolean := nil;
  g_task_propagate_int := nil;
  g_task_propagate_pointer := nil;
  g_task_report_error := nil;
  g_task_report_new_error := nil;
  g_task_return_boolean := nil;
  g_task_return_error := nil;
  g_task_return_error_if_cancelled := nil;
  g_task_return_int := nil;
  g_task_return_new_error := nil;
  g_task_return_pointer := nil;
  g_task_run_in_thread := nil;
  g_task_run_in_thread_sync := nil;
  g_task_set_check_cancellable := nil;
  g_task_set_priority := nil;
  g_task_set_return_on_cancel := nil;
  g_task_set_source_tag := nil;
  g_task_set_task_data := nil;
  g_tcp_connection_get_graceful_disconnect := nil;
  g_tcp_connection_get_type := nil;
  g_tcp_connection_set_graceful_disconnect := nil;
  g_tcp_wrapper_connection_get_base_io_stream := nil;
  g_tcp_wrapper_connection_get_type := nil;
  g_tcp_wrapper_connection_new := nil;
  g_test_dbus_add_service_dir := nil;
  g_test_dbus_down := nil;
  g_test_dbus_get_bus_address := nil;
  g_test_dbus_get_flags := nil;
  g_test_dbus_get_type := nil;
  g_test_dbus_new := nil;
  g_test_dbus_stop := nil;
  g_test_dbus_unset := nil;
  g_test_dbus_up := nil;
  g_themed_icon_append_name := nil;
  g_themed_icon_get_names := nil;
  g_themed_icon_get_type := nil;
  g_themed_icon_new := nil;
  g_themed_icon_new_from_names := nil;
  g_themed_icon_new_with_default_fallbacks := nil;
  g_themed_icon_prepend_name := nil;
  g_threaded_socket_service_get_type := nil;
  g_threaded_socket_service_new := nil;
  g_tls_backend_get_certificate_type := nil;
  g_tls_backend_get_client_connection_type := nil;
  g_tls_backend_get_default := nil;
  g_tls_backend_get_default_database := nil;
  g_tls_backend_get_file_database_type := nil;
  g_tls_backend_get_server_connection_type := nil;
  g_tls_backend_get_type := nil;
  g_tls_backend_supports_tls := nil;
  g_tls_certificate_get_issuer := nil;
  g_tls_certificate_get_type := nil;
  g_tls_certificate_is_same := nil;
  g_tls_certificate_list_new_from_file := nil;
  g_tls_certificate_new_from_file := nil;
  g_tls_certificate_new_from_files := nil;
  g_tls_certificate_new_from_pem := nil;
  g_tls_certificate_verify := nil;
  g_tls_client_connection_get_accepted_cas := nil;
  g_tls_client_connection_get_server_identity := nil;
  g_tls_client_connection_get_type := nil;
  g_tls_client_connection_get_use_ssl3 := nil;
  g_tls_client_connection_get_validation_flags := nil;
  g_tls_client_connection_new := nil;
  g_tls_client_connection_set_server_identity := nil;
  g_tls_client_connection_set_use_ssl3 := nil;
  g_tls_client_connection_set_validation_flags := nil;
  g_tls_connection_emit_accept_certificate := nil;
  g_tls_connection_get_certificate := nil;
  g_tls_connection_get_database := nil;
  g_tls_connection_get_interaction := nil;
  g_tls_connection_get_peer_certificate := nil;
  g_tls_connection_get_peer_certificate_errors := nil;
  g_tls_connection_get_rehandshake_mode := nil;
  g_tls_connection_get_require_close_notify := nil;
  g_tls_connection_get_type := nil;
  g_tls_connection_handshake := nil;
  g_tls_connection_handshake_async := nil;
  g_tls_connection_handshake_finish := nil;
  g_tls_connection_set_certificate := nil;
  g_tls_connection_set_database := nil;
  g_tls_connection_set_interaction := nil;
  g_tls_connection_set_rehandshake_mode := nil;
  g_tls_connection_set_require_close_notify := nil;
  g_tls_database_create_certificate_handle := nil;
  g_tls_database_get_type := nil;
  g_tls_database_lookup_certificate_for_handle := nil;
  g_tls_database_lookup_certificate_for_handle_async := nil;
  g_tls_database_lookup_certificate_for_handle_finish := nil;
  g_tls_database_lookup_certificate_issuer := nil;
  g_tls_database_lookup_certificate_issuer_async := nil;
  g_tls_database_lookup_certificate_issuer_finish := nil;
  g_tls_database_lookup_certificates_issued_by := nil;
  g_tls_database_lookup_certificates_issued_by_async := nil;
  g_tls_database_lookup_certificates_issued_by_finish := nil;
  g_tls_database_verify_chain := nil;
  g_tls_database_verify_chain_async := nil;
  g_tls_database_verify_chain_finish := nil;
  g_tls_error_quark := nil;
  g_tls_file_database_get_type := nil;
  g_tls_file_database_new := nil;
  g_tls_interaction_ask_password := nil;
  g_tls_interaction_ask_password_async := nil;
  g_tls_interaction_ask_password_finish := nil;
  g_tls_interaction_get_type := nil;
  g_tls_interaction_invoke_ask_password := nil;
  g_tls_password_get_description := nil;
  g_tls_password_get_flags := nil;
  g_tls_password_get_type := nil;
  g_tls_password_get_value := nil;
  g_tls_password_get_warning := nil;
  g_tls_password_new := nil;
  g_tls_password_set_description := nil;
  g_tls_password_set_flags := nil;
  g_tls_password_set_value := nil;
  g_tls_password_set_value_full := nil;
  g_tls_password_set_warning := nil;
  g_tls_server_connection_get_type := nil;
  g_tls_server_connection_new := nil;
  g_unix_connection_get_type := nil;
  g_unix_connection_receive_credentials := nil;
  g_unix_connection_receive_credentials_async := nil;
  g_unix_connection_receive_credentials_finish := nil;
  g_unix_connection_receive_fd := nil;
  g_unix_connection_send_credentials := nil;
  g_unix_connection_send_credentials_async := nil;
  g_unix_connection_send_credentials_finish := nil;
  g_unix_connection_send_fd := nil;
  g_unix_credentials_message_get_credentials := nil;
  g_unix_credentials_message_get_type := nil;
  g_unix_credentials_message_is_supported := nil;
  g_unix_credentials_message_new := nil;
  g_unix_credentials_message_new_with_credentials := nil;
  g_unix_fd_list_append := nil;
  g_unix_fd_list_get := nil;
  g_unix_fd_list_get_length := nil;
  g_unix_fd_list_get_type := nil;
  g_unix_fd_list_new := nil;
  g_unix_fd_list_new_from_array := nil;
  g_unix_fd_list_peek_fds := nil;
  g_unix_fd_list_steal_fds := nil;
  g_unix_fd_message_append_fd := nil;
  g_unix_fd_message_get_fd_list := nil;
  g_unix_fd_message_get_type := nil;
  g_unix_fd_message_new := nil;
  g_unix_fd_message_new_with_fd_list := nil;
  g_unix_fd_message_steal_fds := nil;
  g_unix_input_stream_get_close_fd := nil;
  g_unix_input_stream_get_fd := nil;
  g_unix_input_stream_get_type := nil;
  g_unix_input_stream_new := nil;
  g_unix_input_stream_set_close_fd := nil;
  g_unix_is_mount_path_system_internal := nil;
  g_unix_mount_at := nil;
  g_unix_mount_compare := nil;
  g_unix_mount_free := nil;
  g_unix_mount_get_device_path := nil;
  g_unix_mount_get_fs_type := nil;
  g_unix_mount_get_mount_path := nil;
  g_unix_mount_guess_can_eject := nil;
  g_unix_mount_guess_icon := nil;
  g_unix_mount_guess_name := nil;
  g_unix_mount_guess_should_display := nil;
  g_unix_mount_guess_symbolic_icon := nil;
  g_unix_mount_is_readonly := nil;
  g_unix_mount_is_system_internal := nil;
  g_unix_mount_monitor_get_type := nil;
  g_unix_mount_monitor_new := nil;
  g_unix_mount_monitor_set_rate_limit := nil;
  g_unix_mount_point_compare := nil;
  g_unix_mount_point_free := nil;
  g_unix_mount_point_get_device_path := nil;
  g_unix_mount_point_get_fs_type := nil;
  g_unix_mount_point_get_mount_path := nil;
  g_unix_mount_point_get_options := nil;
  g_unix_mount_point_guess_can_eject := nil;
  g_unix_mount_point_guess_icon := nil;
  g_unix_mount_point_guess_name := nil;
  g_unix_mount_point_guess_symbolic_icon := nil;
  g_unix_mount_point_is_loopback := nil;
  g_unix_mount_point_is_readonly := nil;
  g_unix_mount_point_is_user_mountable := nil;
  g_unix_mount_points_changed_since := nil;
  g_unix_mount_points_get := nil;
  g_unix_mounts_changed_since := nil;
  g_unix_mounts_get := nil;
  g_unix_output_stream_get_close_fd := nil;
  g_unix_output_stream_get_fd := nil;
  g_unix_output_stream_get_type := nil;
  g_unix_output_stream_new := nil;
  g_unix_output_stream_set_close_fd := nil;
  g_unix_socket_address_abstract_names_supported := nil;
  g_unix_socket_address_get_address_type := nil;
  g_unix_socket_address_get_path := nil;
  g_unix_socket_address_get_path_len := nil;
  g_unix_socket_address_get_type := nil;
  g_unix_socket_address_new := nil;
  g_unix_socket_address_new_with_type := nil;
  g_vfs_get_default := nil;
  g_vfs_get_file_for_path := nil;
  g_vfs_get_file_for_uri := nil;
  g_vfs_get_local := nil;
  g_vfs_get_supported_uri_schemes := nil;
  g_vfs_get_type := nil;
  g_vfs_is_active := nil;
  g_vfs_parse_name := nil;
  g_volume_can_eject := nil;
  g_volume_can_mount := nil;
  g_volume_eject_with_operation := nil;
  g_volume_eject_with_operation_finish := nil;
  g_volume_enumerate_identifiers := nil;
  g_volume_get_activation_root := nil;
  g_volume_get_drive := nil;
  g_volume_get_icon := nil;
  g_volume_get_identifier := nil;
  g_volume_get_mount := nil;
  g_volume_get_name := nil;
  g_volume_get_sort_key := nil;
  g_volume_get_symbolic_icon := nil;
  g_volume_get_type := nil;
  g_volume_get_uuid := nil;
  g_volume_monitor_get := nil;
  g_volume_monitor_get_connected_drives := nil;
  g_volume_monitor_get_mount_for_uuid := nil;
  g_volume_monitor_get_mounts := nil;
  g_volume_monitor_get_type := nil;
  g_volume_monitor_get_volume_for_uuid := nil;
  g_volume_monitor_get_volumes := nil;
  g_volume_mount := nil;
  g_volume_mount_finish := nil;
  g_volume_should_automount := nil;
  g_zlib_compressor_get_file_info := nil;
  g_zlib_compressor_get_type := nil;
  g_zlib_compressor_new := nil;
  g_zlib_compressor_set_file_info := nil;
  g_zlib_decompressor_get_file_info := nil;
  g_zlib_decompressor_get_type := nil;
  g_zlib_decompressor_new := nil;
end;

initialization
LoadLibraries;
LoadProcs;

finalization
UnloadLibraries;

end.