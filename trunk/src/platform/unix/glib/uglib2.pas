{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit uGLib2;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

interface
uses
  CTypes;

const
  ASCII_DTOSTR_BUF_SIZE = 39;
  BIG_ENDIAN = 4321;
  CAN_INLINE = 1;
  CSET_A_2_Z_UPPER = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  CSET_DIGITS = '0123456789';
  CSET_a_2_z_lower = 'abcdefghijklmnopqrstuvwxyz';
  DATALIST_FLAGS_MASK = 3;
  DATE_BAD_DAY = 0;
  DATE_BAD_JULIAN = 0;
  DATE_BAD_YEAR = 0;
  DIR_SEPARATOR = 92;
  DIR_SEPARATOR_S = '\';
  E = 2.718282;
  GINT16_FORMAT = 'hi';
  GINT16_MODIFIER = 'h';
  GINT32_FORMAT = 'i';
  GINT32_MODIFIER = '';
  GINT64_FORMAT = 'li';
  GINT64_MODIFIER = 'l';
  GINTPTR_FORMAT = 'li';
  GINTPTR_MODIFIER = 'l';
  GNUC_FUNCTION = '';
  GNUC_PRETTY_FUNCTION = '';
  GSIZE_FORMAT = 'lu';
  GSIZE_MODIFIER = 'l';
  GSSIZE_FORMAT = 'li';
  GUINT16_FORMAT = 'hu';
  GUINT32_FORMAT = 'u';
  GUINT64_FORMAT = 'lu';
  GUINTPTR_FORMAT = 'lu';
  HAVE_GINT64 = 1;
  HAVE_GNUC_VARARGS = 1;
  HAVE_GNUC_VISIBILITY = 1;
  HAVE_GROWING_STACK = 1;
  HAVE_INLINE = 1;
  HAVE_ISO_VARARGS = 1;
  HAVE___INLINE = 1;
  HAVE___INLINE__ = 1;
  HOOK_FLAG_USER_SHIFT = 4;
  IEEE754_DOUBLE_BIAS = 1023;
  IEEE754_FLOAT_BIAS = 127;
  KEY_FILE_DESKTOP_GROUP = 'Desktop Entry';
  KEY_FILE_DESKTOP_KEY_CATEGORIES = 'Categories';
  KEY_FILE_DESKTOP_KEY_COMMENT = 'Comment';
  KEY_FILE_DESKTOP_KEY_EXEC = 'Exec';
  KEY_FILE_DESKTOP_KEY_FULLNAME = 'X-GNOME-FullName';
  KEY_FILE_DESKTOP_KEY_GENERIC_NAME = 'GenericName';
  KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN = 'X-GNOME-Gettext-Domain';
  KEY_FILE_DESKTOP_KEY_HIDDEN = 'Hidden';
  KEY_FILE_DESKTOP_KEY_ICON = 'Icon';
  KEY_FILE_DESKTOP_KEY_KEYWORDS = 'Keywords';
  KEY_FILE_DESKTOP_KEY_MIME_TYPE = 'MimeType';
  KEY_FILE_DESKTOP_KEY_NAME = 'Name';
  KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = 'NotShowIn';
  KEY_FILE_DESKTOP_KEY_NO_DISPLAY = 'NoDisplay';
  KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = 'OnlyShowIn';
  KEY_FILE_DESKTOP_KEY_PATH = 'Path';
  KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = 'StartupNotify';
  KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = 'StartupWMClass';
  KEY_FILE_DESKTOP_KEY_TERMINAL = 'Terminal';
  KEY_FILE_DESKTOP_KEY_TRY_EXEC = 'TryExec';
  KEY_FILE_DESKTOP_KEY_TYPE = 'Type';
  KEY_FILE_DESKTOP_KEY_URL = 'URL';
  KEY_FILE_DESKTOP_KEY_VERSION = 'Version';
  KEY_FILE_DESKTOP_TYPE_APPLICATION = 'Application';
  KEY_FILE_DESKTOP_TYPE_DIRECTORY = 'Directory';
  KEY_FILE_DESKTOP_TYPE_LINK = 'Link';
  LITTLE_ENDIAN = 1234;
  LN10 = 2.302585;
  LN2 = 0.693147;
  LOG_2_BASE_10 = 0.301030;
  LOG_DOMAIN = 0;
  LOG_FATAL_MASK = 0;
  LOG_LEVEL_USER_SHIFT = 8;
  MAJOR_VERSION = 2;
  MAXINT16 = 32767;
  MAXINT32 = 2147483647;
  MAXINT64 = 9223372036854775807;
  MAXINT8 = 127;
  MAXUINT16 = 65535;
  MAXUINT32 = 4294967295;
  MAXUINT64 = 18446744073709551615;
  MAXUINT8 = 255;
  MICRO_VERSION = 1;
  MININT16 = 32768;
  MININT32 = 2147483648;
  MININT64 = -9223372036854775808;
  MININT8 = 128;
  MINOR_VERSION = 36;
  MODULE_SUFFIX = 'so';
  OPTION_REMAINING = '';
  PDP_ENDIAN = 3412;
  PI = 3.141593;
  PI_2 = 1.570796;
  PI_4 = 0.785398;
  POLLFD_FORMAT = '%#I64x';
  PRIORITY_DEFAULT = 0;
  PRIORITY_DEFAULT_IDLE = 200;
  PRIORITY_HIGH = -100;
  PRIORITY_HIGH_IDLE = 100;
  PRIORITY_LOW = 300;
  SEARCHPATH_SEPARATOR = 59;
  SEARCHPATH_SEPARATOR_S = ';';
  SIZEOF_LONG = 8;
  SIZEOF_SIZE_T = 8;
  SIZEOF_VOID_P = 8;
  SQRT2 = 1.414214;
  STR_DELIMITERS = '_-|> <.';
  SYSDEF_AF_INET = 2;
  SYSDEF_AF_INET6 = 10;
  SYSDEF_AF_UNIX = 1;
  SYSDEF_MSG_DONTROUTE = 4;
  SYSDEF_MSG_OOB = 1;
  SYSDEF_MSG_PEEK = 2;
  TIME_SPAN_DAY = 86400000000;
  TIME_SPAN_HOUR = 3600000000;
  TIME_SPAN_MILLISECOND = 1000;
  TIME_SPAN_MINUTE = 60000000;
  TIME_SPAN_SECOND = 1000000;
  UNICHAR_MAX_DECOMPOSITION_LENGTH = 18;
  URI_RESERVED_CHARS_GENERIC_DELIMITERS = ':/?#[]@';
  URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = '!$&''()*+,;=';
  USEC_PER_SEC = 1000000;
  VA_COPY_AS_ARRAY = 1;
  VERSION_MIN_REQUIRED = 2;
  WIN32_MSG_HANDLE = 19981206;

type
  TGAsciiType = Integer;
const
  { GAsciiType }
  G_ASCII_ALNUM: TGAsciiType = 1;
  G_ASCII_ALPHA: TGAsciiType = 2;
  G_ASCII_CNTRL: TGAsciiType = 4;
  G_ASCII_DIGIT: TGAsciiType = 8;
  G_ASCII_GRAPH: TGAsciiType = 16;
  G_ASCII_LOWER: TGAsciiType = 32;
  G_ASCII_PRINT: TGAsciiType = 64;
  G_ASCII_PUNCT: TGAsciiType = 128;
  G_ASCII_SPACE: TGAsciiType = 256;
  G_ASCII_UPPER: TGAsciiType = 512;
  G_ASCII_XDIGIT: TGAsciiType = 1024;

type
  TGBookmarkFileError = Integer;
const
  { GBookmarkFileError }
  G_BOOKMARK_FILE_ERROR_INVALID_URI: TGBookmarkFileError = 0;
  G_BOOKMARK_FILE_ERROR_INVALID_VALUE: TGBookmarkFileError = 1;
  G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED: TGBookmarkFileError = 2;
  G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND: TGBookmarkFileError = 3;
  G_BOOKMARK_FILE_ERROR_READ: TGBookmarkFileError = 4;
  G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING: TGBookmarkFileError = 5;
  G_BOOKMARK_FILE_ERROR_WRITE: TGBookmarkFileError = 6;
  G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND: TGBookmarkFileError = 7;

type
  TGChecksumType = Integer;
const
  { GChecksumType }
  G_CHECKSUM_MD5: TGChecksumType = 0;
  G_CHECKSUM_SHA1: TGChecksumType = 1;
  G_CHECKSUM_SHA256: TGChecksumType = 2;
  G_CHECKSUM_SHA512: TGChecksumType = 3;

type
  TGConvertError = Integer;
const
  { GConvertError }
  G_CONVERT_ERROR_NO_CONVERSION: TGConvertError = 0;
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE: TGConvertError = 1;
  G_CONVERT_ERROR_FAILED: TGConvertError = 2;
  G_CONVERT_ERROR_PARTIAL_INPUT: TGConvertError = 3;
  G_CONVERT_ERROR_BAD_URI: TGConvertError = 4;
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH: TGConvertError = 5;

type
  TGDateMonth = Integer;
const
  { GDateMonth }
  G_DATE_BAD_MONTH: TGDateMonth = 0;
  G_DATE_JANUARY: TGDateMonth = 1;
  G_DATE_FEBRUARY: TGDateMonth = 2;
  G_DATE_MARCH: TGDateMonth = 3;
  G_DATE_APRIL: TGDateMonth = 4;
  G_DATE_MAY: TGDateMonth = 5;
  G_DATE_JUNE: TGDateMonth = 6;
  G_DATE_JULY: TGDateMonth = 7;
  G_DATE_AUGUST: TGDateMonth = 8;
  G_DATE_SEPTEMBER: TGDateMonth = 9;
  G_DATE_OCTOBER: TGDateMonth = 10;
  G_DATE_NOVEMBER: TGDateMonth = 11;
  G_DATE_DECEMBER: TGDateMonth = 12;

type
  TGDateWeekday = Integer;
const
  { GDateWeekday }
  G_DATE_BAD_WEEKDAY: TGDateWeekday = 0;
  G_DATE_MONDAY: TGDateWeekday = 1;
  G_DATE_TUESDAY: TGDateWeekday = 2;
  G_DATE_WEDNESDAY: TGDateWeekday = 3;
  G_DATE_THURSDAY: TGDateWeekday = 4;
  G_DATE_FRIDAY: TGDateWeekday = 5;
  G_DATE_SATURDAY: TGDateWeekday = 6;
  G_DATE_SUNDAY: TGDateWeekday = 7;

type
  TGDateDMY = Integer;
const
  { GDateDMY }
  G_DATE_DAY: TGDateDMY = 0;
  G_DATE_MONTH: TGDateDMY = 1;
  G_DATE_YEAR: TGDateDMY = 2;

type
  TGTimeType = Integer;
const
  { GTimeType }
  G_TIME_TYPE_STANDARD: TGTimeType = 0;
  G_TIME_TYPE_DAYLIGHT: TGTimeType = 1;
  G_TIME_TYPE_UNIVERSAL: TGTimeType = 2;

type
  TGErrorType = Integer;
const
  { GErrorType }
  G_ERR_UNKNOWN: TGErrorType = 0;
  G_ERR_UNEXP_EOF: TGErrorType = 1;
  G_ERR_UNEXP_EOF_IN_STRING: TGErrorType = 2;
  G_ERR_UNEXP_EOF_IN_COMMENT: TGErrorType = 3;
  G_ERR_NON_DIGIT_IN_CONST: TGErrorType = 4;
  G_ERR_DIGIT_RADIX: TGErrorType = 5;
  G_ERR_FLOAT_RADIX: TGErrorType = 6;
  G_ERR_FLOAT_MALFORMED: TGErrorType = 7;

type
  TGFileError = Integer;
const
  { GFileError }
  G_FILE_ERROR_EXIST: TGFileError = 0;
  G_FILE_ERROR_ISDIR: TGFileError = 1;
  G_FILE_ERROR_ACCES: TGFileError = 2;
  G_FILE_ERROR_NAMETOOLONG: TGFileError = 3;
  G_FILE_ERROR_NOENT: TGFileError = 4;
  G_FILE_ERROR_NOTDIR: TGFileError = 5;
  G_FILE_ERROR_NXIO: TGFileError = 6;
  G_FILE_ERROR_NODEV: TGFileError = 7;
  G_FILE_ERROR_ROFS: TGFileError = 8;
  G_FILE_ERROR_TXTBSY: TGFileError = 9;
  G_FILE_ERROR_FAULT: TGFileError = 10;
  G_FILE_ERROR_LOOP: TGFileError = 11;
  G_FILE_ERROR_NOSPC: TGFileError = 12;
  G_FILE_ERROR_NOMEM: TGFileError = 13;
  G_FILE_ERROR_MFILE: TGFileError = 14;
  G_FILE_ERROR_NFILE: TGFileError = 15;
  G_FILE_ERROR_BADF: TGFileError = 16;
  G_FILE_ERROR_INVAL: TGFileError = 17;
  G_FILE_ERROR_PIPE: TGFileError = 18;
  G_FILE_ERROR_AGAIN: TGFileError = 19;
  G_FILE_ERROR_INTR: TGFileError = 20;
  G_FILE_ERROR_IO: TGFileError = 21;
  G_FILE_ERROR_PERM: TGFileError = 22;
  G_FILE_ERROR_NOSYS: TGFileError = 23;
  G_FILE_ERROR_FAILED: TGFileError = 24;

type
  TGFileTest = Integer;
const
  { GFileTest }
  G_FILE_TEST_IS_REGULAR: TGFileTest = 1;
  G_FILE_TEST_IS_SYMLINK: TGFileTest = 2;
  G_FILE_TEST_IS_DIR: TGFileTest = 4;
  G_FILE_TEST_IS_EXECUTABLE: TGFileTest = 8;
  G_FILE_TEST_EXISTS: TGFileTest = 16;

type
  TGFormatSizeFlags = Integer;
const
  { GFormatSizeFlags }
  G_FORMAT_SIZE_DEFAULT: TGFormatSizeFlags = 0;
  G_FORMAT_SIZE_LONG_FORMAT: TGFormatSizeFlags = 1;
  G_FORMAT_SIZE_IEC_UNITS: TGFormatSizeFlags = 2;

type
  TGHookFlagMask = Integer;
const
  { GHookFlagMask }
  G_HOOK_FLAG_ACTIVE: TGHookFlagMask = 1;
  G_HOOK_FLAG_IN_CALL: TGHookFlagMask = 2;
  G_HOOK_FLAG_MASK: TGHookFlagMask = 15;

type
  TGSeekType = Integer;
const
  { GSeekType }
  G_SEEK_CUR: TGSeekType = 0;
  G_SEEK_SET: TGSeekType = 1;
  G_SEEK_END: TGSeekType = 2;

type
  TGIOCondition = Integer;
const
  { GIOCondition }
  G_IO_IN: TGIOCondition = 1;
  G_IO_OUT: TGIOCondition = 4;
  G_IO_PRI: TGIOCondition = 2;
  G_IO_ERR: TGIOCondition = 8;
  G_IO_HUP: TGIOCondition = 16;
  G_IO_NVAL: TGIOCondition = 32;

type
  TGIOFlags = Integer;
const
  { GIOFlags }
  G_IO_FLAG_APPEND: TGIOFlags = 1;
  G_IO_FLAG_NONBLOCK: TGIOFlags = 2;
  G_IO_FLAG_IS_READABLE: TGIOFlags = 4;
  G_IO_FLAG_IS_WRITABLE: TGIOFlags = 8;
  G_IO_FLAG_IS_WRITEABLE: TGIOFlags = 8;
  G_IO_FLAG_IS_SEEKABLE: TGIOFlags = 16;
  G_IO_FLAG_MASK: TGIOFlags = 31;
  G_IO_FLAG_GET_MASK: TGIOFlags = 31;
  G_IO_FLAG_SET_MASK: TGIOFlags = 3;

type
  TGIOStatus = Integer;
const
  { GIOStatus }
  G_IO_STATUS_ERROR: TGIOStatus = 0;
  G_IO_STATUS_NORMAL: TGIOStatus = 1;
  G_IO_STATUS_EOF: TGIOStatus = 2;
  G_IO_STATUS_AGAIN: TGIOStatus = 3;

type
  TGIOError = Integer;
const
  { GIOError }
  G_IO_ERROR_NONE: TGIOError = 0;
  G_IO_ERROR_AGAIN: TGIOError = 1;
  G_IO_ERROR_INVAL: TGIOError = 2;
  G_IO_ERROR_UNKNOWN: TGIOError = 3;

type
  TGIOChannelError = Integer;
const
  { GIOChannelError }
  G_IO_CHANNEL_ERROR_FBIG: TGIOChannelError = 0;
  G_IO_CHANNEL_ERROR_INVAL: TGIOChannelError = 1;
  G_IO_CHANNEL_ERROR_IO: TGIOChannelError = 2;
  G_IO_CHANNEL_ERROR_ISDIR: TGIOChannelError = 3;
  G_IO_CHANNEL_ERROR_NOSPC: TGIOChannelError = 4;
  G_IO_CHANNEL_ERROR_NXIO: TGIOChannelError = 5;
  G_IO_CHANNEL_ERROR_OVERFLOW: TGIOChannelError = 6;
  G_IO_CHANNEL_ERROR_PIPE: TGIOChannelError = 7;
  G_IO_CHANNEL_ERROR_FAILED: TGIOChannelError = 8;

type
  TGKeyFileFlags = Integer;
const
  { GKeyFileFlags }
  G_KEY_FILE_NONE: TGKeyFileFlags = 0;
  G_KEY_FILE_KEEP_COMMENTS: TGKeyFileFlags = 1;
  G_KEY_FILE_KEEP_TRANSLATIONS: TGKeyFileFlags = 2;

type
  TGKeyFileError = Integer;
const
  { GKeyFileError }
  G_KEY_FILE_ERROR_UNKNOWN_ENCODING: TGKeyFileError = 0;
  G_KEY_FILE_ERROR_PARSE: TGKeyFileError = 1;
  G_KEY_FILE_ERROR_NOT_FOUND: TGKeyFileError = 2;
  G_KEY_FILE_ERROR_KEY_NOT_FOUND: TGKeyFileError = 3;
  G_KEY_FILE_ERROR_GROUP_NOT_FOUND: TGKeyFileError = 4;
  G_KEY_FILE_ERROR_INVALID_VALUE: TGKeyFileError = 5;

type
  TGLogLevelFlags = Integer;
const
  { GLogLevelFlags }
  G_LOG_FLAG_RECURSION: TGLogLevelFlags = 1;
  G_LOG_FLAG_FATAL: TGLogLevelFlags = 2;
  G_LOG_LEVEL_ERROR: TGLogLevelFlags = 4;
  G_LOG_LEVEL_CRITICAL: TGLogLevelFlags = 8;
  G_LOG_LEVEL_WARNING: TGLogLevelFlags = 16;
  G_LOG_LEVEL_MESSAGE: TGLogLevelFlags = 32;
  G_LOG_LEVEL_INFO: TGLogLevelFlags = 64;
  G_LOG_LEVEL_DEBUG: TGLogLevelFlags = 128;
  G_LOG_LEVEL_MASK: TGLogLevelFlags = -4;

type
  TGMarkupCollectType = Integer;
const
  { GMarkupCollectType }
  G_MARKUP_COLLECT_INVALID: TGMarkupCollectType = 0;
  G_MARKUP_COLLECT_STRING: TGMarkupCollectType = 1;
  G_MARKUP_COLLECT_STRDUP: TGMarkupCollectType = 2;
  G_MARKUP_COLLECT_BOOLEAN: TGMarkupCollectType = 3;
  G_MARKUP_COLLECT_TRISTATE: TGMarkupCollectType = 4;
  G_MARKUP_COLLECT_OPTIONAL: TGMarkupCollectType = 65536;

type
  TGMarkupError = Integer;
const
  { GMarkupError }
  G_MARKUP_ERROR_BAD_UTF8: TGMarkupError = 0;
  G_MARKUP_ERROR_EMPTY: TGMarkupError = 1;
  G_MARKUP_ERROR_PARSE: TGMarkupError = 2;
  G_MARKUP_ERROR_UNKNOWN_ELEMENT: TGMarkupError = 3;
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE: TGMarkupError = 4;
  G_MARKUP_ERROR_INVALID_CONTENT: TGMarkupError = 5;
  G_MARKUP_ERROR_MISSING_ATTRIBUTE: TGMarkupError = 6;

type
  TGMarkupParseFlags = Integer;
const
  { GMarkupParseFlags }
  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG: TGMarkupParseFlags = 1;
  G_MARKUP_TREAT_CDATA_AS_TEXT: TGMarkupParseFlags = 2;
  G_MARKUP_PREFIX_ERROR_POSITION: TGMarkupParseFlags = 4;

type
  TGRegexCompileFlags = Integer;
const
  { GRegexCompileFlags }
  G_REGEX_CASELESS: TGRegexCompileFlags = 1;
  G_REGEX_MULTILINE: TGRegexCompileFlags = 2;
  G_REGEX_DOTALL: TGRegexCompileFlags = 4;
  G_REGEX_EXTENDED: TGRegexCompileFlags = 8;
  G_REGEX_ANCHORED: TGRegexCompileFlags = 16;
  G_REGEX_DOLLAR_ENDONLY: TGRegexCompileFlags = 32;
  G_REGEX_UNGREEDY: TGRegexCompileFlags = 512;
  G_REGEX_RAW: TGRegexCompileFlags = 2048;
  G_REGEX_NO_AUTO_CAPTURE: TGRegexCompileFlags = 4096;
  G_REGEX_OPTIMIZE: TGRegexCompileFlags = 8192;
  G_REGEX_FIRSTLINE: TGRegexCompileFlags = 262144;
  G_REGEX_DUPNAMES: TGRegexCompileFlags = 524288;
  G_REGEX_NEWLINE_CR: TGRegexCompileFlags = 1048576;
  G_REGEX_NEWLINE_LF: TGRegexCompileFlags = 2097152;
  G_REGEX_NEWLINE_CRLF: TGRegexCompileFlags = 3145728;
  G_REGEX_NEWLINE_ANYCRLF: TGRegexCompileFlags = 5242880;
  G_REGEX_BSR_ANYCRLF: TGRegexCompileFlags = 8388608;
  G_REGEX_JAVASCRIPT_COMPAT: TGRegexCompileFlags = 33554432;

type
  TGRegexMatchFlags = Integer;
const
  { GRegexMatchFlags }
  G_REGEX_MATCH_ANCHORED: TGRegexMatchFlags = 16;
  G_REGEX_MATCH_NOTBOL: TGRegexMatchFlags = 128;
  G_REGEX_MATCH_NOTEOL: TGRegexMatchFlags = 256;
  G_REGEX_MATCH_NOTEMPTY: TGRegexMatchFlags = 1024;
  G_REGEX_MATCH_PARTIAL: TGRegexMatchFlags = 32768;
  G_REGEX_MATCH_NEWLINE_CR: TGRegexMatchFlags = 1048576;
  G_REGEX_MATCH_NEWLINE_LF: TGRegexMatchFlags = 2097152;
  G_REGEX_MATCH_NEWLINE_CRLF: TGRegexMatchFlags = 3145728;
  G_REGEX_MATCH_NEWLINE_ANY: TGRegexMatchFlags = 4194304;
  G_REGEX_MATCH_NEWLINE_ANYCRLF: TGRegexMatchFlags = 5242880;
  G_REGEX_MATCH_BSR_ANYCRLF: TGRegexMatchFlags = 8388608;
  G_REGEX_MATCH_BSR_ANY: TGRegexMatchFlags = 16777216;
  G_REGEX_MATCH_PARTIAL_SOFT: TGRegexMatchFlags = 32768;
  G_REGEX_MATCH_PARTIAL_HARD: TGRegexMatchFlags = 134217728;
  G_REGEX_MATCH_NOTEMPTY_ATSTART: TGRegexMatchFlags = 268435456;

type
  TGTraverseFlags = Integer;
const
  { GTraverseFlags }
  G_TRAVERSE_LEAVES: TGTraverseFlags = 1;
  G_TRAVERSE_NON_LEAVES: TGTraverseFlags = 2;
  G_TRAVERSE_ALL: TGTraverseFlags = 3;
  G_TRAVERSE_MASK: TGTraverseFlags = 3;
  G_TRAVERSE_LEAFS: TGTraverseFlags = 1;
  G_TRAVERSE_NON_LEAFS: TGTraverseFlags = 2;

type
  TGTraverseType = Integer;
const
  { GTraverseType }
  G_IN_ORDER: TGTraverseType = 0;
  G_PRE_ORDER: TGTraverseType = 1;
  G_POST_ORDER: TGTraverseType = 2;
  G_LEVEL_ORDER: TGTraverseType = 3;

type
  TGNormalizeMode = Integer;
const
  { GNormalizeMode }
  G_NORMALIZE_DEFAULT: TGNormalizeMode = 0;
  G_NORMALIZE_NFD: TGNormalizeMode = 0;
  G_NORMALIZE_DEFAULT_COMPOSE: TGNormalizeMode = 1;
  G_NORMALIZE_NFC: TGNormalizeMode = 1;
  G_NORMALIZE_ALL: TGNormalizeMode = 2;
  G_NORMALIZE_NFKD: TGNormalizeMode = 2;
  G_NORMALIZE_ALL_COMPOSE: TGNormalizeMode = 3;
  G_NORMALIZE_NFKC: TGNormalizeMode = 3;

type
  TGOnceStatus = Integer;
const
  { GOnceStatus }
  G_ONCE_STATUS_NOTCALLED: TGOnceStatus = 0;
  G_ONCE_STATUS_PROGRESS: TGOnceStatus = 1;
  G_ONCE_STATUS_READY: TGOnceStatus = 2;

type
  TGOptionArg = Integer;
const
  { GOptionArg }
  G_OPTION_ARG_NONE: TGOptionArg = 0;
  G_OPTION_ARG_STRING: TGOptionArg = 1;
  G_OPTION_ARG_INT: TGOptionArg = 2;
  G_OPTION_ARG_CALLBACK: TGOptionArg = 3;
  G_OPTION_ARG_FILENAME: TGOptionArg = 4;
  G_OPTION_ARG_STRING_ARRAY: TGOptionArg = 5;
  G_OPTION_ARG_FILENAME_ARRAY: TGOptionArg = 6;
  G_OPTION_ARG_DOUBLE: TGOptionArg = 7;
  G_OPTION_ARG_INT64: TGOptionArg = 8;

type
  TGOptionError = Integer;
const
  { GOptionError }
  G_OPTION_ERROR_UNKNOWN_OPTION: TGOptionError = 0;
  G_OPTION_ERROR_BAD_VALUE: TGOptionError = 1;
  G_OPTION_ERROR_FAILED: TGOptionError = 2;

type
  TGOptionFlags = Integer;
const
  { GOptionFlags }
  G_OPTION_FLAG_HIDDEN: TGOptionFlags = 1;
  G_OPTION_FLAG_IN_MAIN: TGOptionFlags = 2;
  G_OPTION_FLAG_REVERSE: TGOptionFlags = 4;
  G_OPTION_FLAG_NO_ARG: TGOptionFlags = 8;
  G_OPTION_FLAG_FILENAME: TGOptionFlags = 16;
  G_OPTION_FLAG_OPTIONAL_ARG: TGOptionFlags = 32;
  G_OPTION_FLAG_NOALIAS: TGOptionFlags = 64;

type
  TGRegexError = Integer;
const
  { GRegexError }
  G_REGEX_ERROR_COMPILE: TGRegexError = 0;
  G_REGEX_ERROR_OPTIMIZE: TGRegexError = 1;
  G_REGEX_ERROR_REPLACE: TGRegexError = 2;
  G_REGEX_ERROR_MATCH: TGRegexError = 3;
  G_REGEX_ERROR_INTERNAL: TGRegexError = 4;
  G_REGEX_ERROR_STRAY_BACKSLASH: TGRegexError = 101;
  G_REGEX_ERROR_MISSING_CONTROL_CHAR: TGRegexError = 102;
  G_REGEX_ERROR_UNRECOGNIZED_ESCAPE: TGRegexError = 103;
  G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER: TGRegexError = 104;
  G_REGEX_ERROR_QUANTIFIER_TOO_BIG: TGRegexError = 105;
  G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS: TGRegexError = 106;
  G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS: TGRegexError = 107;
  G_REGEX_ERROR_RANGE_OUT_OF_ORDER: TGRegexError = 108;
  G_REGEX_ERROR_NOTHING_TO_REPEAT: TGRegexError = 109;
  G_REGEX_ERROR_UNRECOGNIZED_CHARACTER: TGRegexError = 112;
  G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS: TGRegexError = 113;
  G_REGEX_ERROR_UNMATCHED_PARENTHESIS: TGRegexError = 114;
  G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE: TGRegexError = 115;
  G_REGEX_ERROR_UNTERMINATED_COMMENT: TGRegexError = 118;
  G_REGEX_ERROR_EXPRESSION_TOO_LARGE: TGRegexError = 120;
  G_REGEX_ERROR_MEMORY_ERROR: TGRegexError = 121;
  G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND: TGRegexError = 125;
  G_REGEX_ERROR_MALFORMED_CONDITION: TGRegexError = 126;
  G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES: TGRegexError = 127;
  G_REGEX_ERROR_ASSERTION_EXPECTED: TGRegexError = 128;
  G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME: TGRegexError = 130;
  G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED: TGRegexError = 131;
  G_REGEX_ERROR_HEX_CODE_TOO_LARGE: TGRegexError = 134;
  G_REGEX_ERROR_INVALID_CONDITION: TGRegexError = 135;
  G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND: TGRegexError = 136;
  G_REGEX_ERROR_INFINITE_LOOP: TGRegexError = 140;
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR: TGRegexError = 142;
  G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME: TGRegexError = 143;
  G_REGEX_ERROR_MALFORMED_PROPERTY: TGRegexError = 146;
  G_REGEX_ERROR_UNKNOWN_PROPERTY: TGRegexError = 147;
  G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG: TGRegexError = 148;
  G_REGEX_ERROR_TOO_MANY_SUBPATTERNS: TGRegexError = 149;
  G_REGEX_ERROR_INVALID_OCTAL_VALUE: TGRegexError = 151;
  G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE: TGRegexError = 154;
  G_REGEX_ERROR_DEFINE_REPETION: TGRegexError = 155;
  G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS: TGRegexError = 156;
  G_REGEX_ERROR_MISSING_BACK_REFERENCE: TGRegexError = 157;
  G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE: TGRegexError = 158;
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN: TGRegexError = 159;
  G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB: TGRegexError = 160;
  G_REGEX_ERROR_NUMBER_TOO_BIG: TGRegexError = 161;
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME: TGRegexError = 162;
  G_REGEX_ERROR_MISSING_DIGIT: TGRegexError = 163;
  G_REGEX_ERROR_INVALID_DATA_CHARACTER: TGRegexError = 164;
  G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME: TGRegexError = 165;
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED: TGRegexError = 166;
  G_REGEX_ERROR_INVALID_CONTROL_CHAR: TGRegexError = 168;
  G_REGEX_ERROR_MISSING_NAME: TGRegexError = 169;
  G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS: TGRegexError = 171;
  G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES: TGRegexError = 172;
  G_REGEX_ERROR_NAME_TOO_LONG: TGRegexError = 175;
  G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE: TGRegexError = 176;

type
  TGTokenType = Integer;
const
  { GTokenType }
  G_TOKEN_EOF: TGTokenType = 0;
  G_TOKEN_LEFT_PAREN: TGTokenType = 40;
  G_TOKEN_RIGHT_PAREN: TGTokenType = 41;
  G_TOKEN_LEFT_CURLY: TGTokenType = 123;
  G_TOKEN_RIGHT_CURLY: TGTokenType = 125;
  G_TOKEN_LEFT_BRACE: TGTokenType = 91;
  G_TOKEN_RIGHT_BRACE: TGTokenType = 93;
  G_TOKEN_EQUAL_SIGN: TGTokenType = 61;
  G_TOKEN_COMMA: TGTokenType = 44;
  G_TOKEN_NONE: TGTokenType = 256;
  G_TOKEN_ERROR: TGTokenType = 257;
  G_TOKEN_CHAR: TGTokenType = 258;
  G_TOKEN_BINARY: TGTokenType = 259;
  G_TOKEN_OCTAL: TGTokenType = 260;
  G_TOKEN_INT: TGTokenType = 261;
  G_TOKEN_HEX: TGTokenType = 262;
  G_TOKEN_FLOAT: TGTokenType = 263;
  G_TOKEN_STRING: TGTokenType = 264;
  G_TOKEN_SYMBOL: TGTokenType = 265;
  G_TOKEN_IDENTIFIER: TGTokenType = 266;
  G_TOKEN_IDENTIFIER_NULL: TGTokenType = 267;
  G_TOKEN_COMMENT_SINGLE: TGTokenType = 268;
  G_TOKEN_COMMENT_MULTI: TGTokenType = 269;

type
  TGShellError = Integer;
const
  { GShellError }
  G_SHELL_ERROR_BAD_QUOTING: TGShellError = 0;
  G_SHELL_ERROR_EMPTY_STRING: TGShellError = 1;
  G_SHELL_ERROR_FAILED: TGShellError = 2;

type
  TGSliceConfig = Integer;
const
  { GSliceConfig }
  G_SLICE_CONFIG_ALWAYS_MALLOC: TGSliceConfig = 1;
  G_SLICE_CONFIG_BYPASS_MAGAZINES: TGSliceConfig = 2;
  G_SLICE_CONFIG_WORKING_SET_MSECS: TGSliceConfig = 3;
  G_SLICE_CONFIG_COLOR_INCREMENT: TGSliceConfig = 4;
  G_SLICE_CONFIG_CHUNK_SIZES: TGSliceConfig = 5;
  G_SLICE_CONFIG_CONTENTION_COUNTER: TGSliceConfig = 6;

type
  TGSpawnError = Integer;
const
  { GSpawnError }
  G_SPAWN_ERROR_FORK: TGSpawnError = 0;
  G_SPAWN_ERROR_READ: TGSpawnError = 1;
  G_SPAWN_ERROR_CHDIR: TGSpawnError = 2;
  G_SPAWN_ERROR_ACCES: TGSpawnError = 3;
  G_SPAWN_ERROR_PERM: TGSpawnError = 4;
  G_SPAWN_ERROR_TOO_BIG: TGSpawnError = 5;
  G_SPAWN_ERROR_2BIG: TGSpawnError = 5;
  G_SPAWN_ERROR_NOEXEC: TGSpawnError = 6;
  G_SPAWN_ERROR_NAMETOOLONG: TGSpawnError = 7;
  G_SPAWN_ERROR_NOENT: TGSpawnError = 8;
  G_SPAWN_ERROR_NOMEM: TGSpawnError = 9;
  G_SPAWN_ERROR_NOTDIR: TGSpawnError = 10;
  G_SPAWN_ERROR_LOOP: TGSpawnError = 11;
  G_SPAWN_ERROR_TXTBUSY: TGSpawnError = 12;
  G_SPAWN_ERROR_IO: TGSpawnError = 13;
  G_SPAWN_ERROR_NFILE: TGSpawnError = 14;
  G_SPAWN_ERROR_MFILE: TGSpawnError = 15;
  G_SPAWN_ERROR_INVAL: TGSpawnError = 16;
  G_SPAWN_ERROR_ISDIR: TGSpawnError = 17;
  G_SPAWN_ERROR_LIBBAD: TGSpawnError = 18;
  G_SPAWN_ERROR_FAILED: TGSpawnError = 19;

type
  TGSpawnFlags = Integer;
const
  { GSpawnFlags }
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN: TGSpawnFlags = 1;
  G_SPAWN_DO_NOT_REAP_CHILD: TGSpawnFlags = 2;
  G_SPAWN_SEARCH_PATH: TGSpawnFlags = 4;
  G_SPAWN_STDOUT_TO_DEV_NULL: TGSpawnFlags = 8;
  G_SPAWN_STDERR_TO_DEV_NULL: TGSpawnFlags = 16;
  G_SPAWN_CHILD_INHERITS_STDIN: TGSpawnFlags = 32;
  G_SPAWN_FILE_AND_ARGV_ZERO: TGSpawnFlags = 64;
  G_SPAWN_SEARCH_PATH_FROM_ENVP: TGSpawnFlags = 128;

type
  TGTestLogType = Integer;
const
  { GTestLogType }
  G_TEST_LOG_NONE: TGTestLogType = 0;
  G_TEST_LOG_ERROR: TGTestLogType = 1;
  G_TEST_LOG_START_BINARY: TGTestLogType = 2;
  G_TEST_LOG_LIST_CASE: TGTestLogType = 3;
  G_TEST_LOG_SKIP_CASE: TGTestLogType = 4;
  G_TEST_LOG_START_CASE: TGTestLogType = 5;
  G_TEST_LOG_STOP_CASE: TGTestLogType = 6;
  G_TEST_LOG_MIN_RESULT: TGTestLogType = 7;
  G_TEST_LOG_MAX_RESULT: TGTestLogType = 8;
  G_TEST_LOG_MESSAGE: TGTestLogType = 9;

type
  TGTestTrapFlags = Integer;
const
  { GTestTrapFlags }
  G_TEST_TRAP_SILENCE_STDOUT: TGTestTrapFlags = 128;
  G_TEST_TRAP_SILENCE_STDERR: TGTestTrapFlags = 256;
  G_TEST_TRAP_INHERIT_STDIN: TGTestTrapFlags = 512;

type
  TGThreadError = Integer;
const
  { GThreadError }
  G_THREAD_ERROR_AGAIN: TGThreadError = 0;

type
  TGUnicodeBreakType = Integer;
const
  { GUnicodeBreakType }
  G_UNICODE_BREAK_MANDATORY: TGUnicodeBreakType = 0;
  G_UNICODE_BREAK_CARRIAGE_RETURN: TGUnicodeBreakType = 1;
  G_UNICODE_BREAK_LINE_FEED: TGUnicodeBreakType = 2;
  G_UNICODE_BREAK_COMBINING_MARK: TGUnicodeBreakType = 3;
  G_UNICODE_BREAK_SURROGATE: TGUnicodeBreakType = 4;
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE: TGUnicodeBreakType = 5;
  G_UNICODE_BREAK_INSEPARABLE: TGUnicodeBreakType = 6;
  G_UNICODE_BREAK_NON_BREAKING_GLUE: TGUnicodeBreakType = 7;
  G_UNICODE_BREAK_CONTINGENT: TGUnicodeBreakType = 8;
  G_UNICODE_BREAK_SPACE: TGUnicodeBreakType = 9;
  G_UNICODE_BREAK_AFTER: TGUnicodeBreakType = 10;
  G_UNICODE_BREAK_BEFORE: TGUnicodeBreakType = 11;
  G_UNICODE_BREAK_BEFORE_AND_AFTER: TGUnicodeBreakType = 12;
  G_UNICODE_BREAK_HYPHEN: TGUnicodeBreakType = 13;
  G_UNICODE_BREAK_NON_STARTER: TGUnicodeBreakType = 14;
  G_UNICODE_BREAK_OPEN_PUNCTUATION: TGUnicodeBreakType = 15;
  G_UNICODE_BREAK_CLOSE_PUNCTUATION: TGUnicodeBreakType = 16;
  G_UNICODE_BREAK_QUOTATION: TGUnicodeBreakType = 17;
  G_UNICODE_BREAK_EXCLAMATION: TGUnicodeBreakType = 18;
  G_UNICODE_BREAK_IDEOGRAPHIC: TGUnicodeBreakType = 19;
  G_UNICODE_BREAK_NUMERIC: TGUnicodeBreakType = 20;
  G_UNICODE_BREAK_INFIX_SEPARATOR: TGUnicodeBreakType = 21;
  G_UNICODE_BREAK_SYMBOL: TGUnicodeBreakType = 22;
  G_UNICODE_BREAK_ALPHABETIC: TGUnicodeBreakType = 23;
  G_UNICODE_BREAK_PREFIX: TGUnicodeBreakType = 24;
  G_UNICODE_BREAK_POSTFIX: TGUnicodeBreakType = 25;
  G_UNICODE_BREAK_COMPLEX_CONTEXT: TGUnicodeBreakType = 26;
  G_UNICODE_BREAK_AMBIGUOUS: TGUnicodeBreakType = 27;
  G_UNICODE_BREAK_UNKNOWN: TGUnicodeBreakType = 28;
  G_UNICODE_BREAK_NEXT_LINE: TGUnicodeBreakType = 29;
  G_UNICODE_BREAK_WORD_JOINER: TGUnicodeBreakType = 30;
  G_UNICODE_BREAK_HANGUL_L_JAMO: TGUnicodeBreakType = 31;
  G_UNICODE_BREAK_HANGUL_V_JAMO: TGUnicodeBreakType = 32;
  G_UNICODE_BREAK_HANGUL_T_JAMO: TGUnicodeBreakType = 33;
  G_UNICODE_BREAK_HANGUL_LV_SYLLABLE: TGUnicodeBreakType = 34;
  G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE: TGUnicodeBreakType = 35;
  G_UNICODE_BREAK_CLOSE_PARANTHESIS: TGUnicodeBreakType = 36;
  G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER: TGUnicodeBreakType = 37;
  G_UNICODE_BREAK_HEBREW_LETTER: TGUnicodeBreakType = 38;
  G_UNICODE_BREAK_REGIONAL_INDICATOR: TGUnicodeBreakType = 39;

type
  TGUnicodeScript = Integer;
const
  { GUnicodeScript }
  G_UNICODE_SCRIPT_INVALID_CODE: TGUnicodeScript = -1;
  G_UNICODE_SCRIPT_COMMON: TGUnicodeScript = 0;
  G_UNICODE_SCRIPT_INHERITED: TGUnicodeScript = 1;
  G_UNICODE_SCRIPT_ARABIC: TGUnicodeScript = 2;
  G_UNICODE_SCRIPT_ARMENIAN: TGUnicodeScript = 3;
  G_UNICODE_SCRIPT_BENGALI: TGUnicodeScript = 4;
  G_UNICODE_SCRIPT_BOPOMOFO: TGUnicodeScript = 5;
  G_UNICODE_SCRIPT_CHEROKEE: TGUnicodeScript = 6;
  G_UNICODE_SCRIPT_COPTIC: TGUnicodeScript = 7;
  G_UNICODE_SCRIPT_CYRILLIC: TGUnicodeScript = 8;
  G_UNICODE_SCRIPT_DESERET: TGUnicodeScript = 9;
  G_UNICODE_SCRIPT_DEVANAGARI: TGUnicodeScript = 10;
  G_UNICODE_SCRIPT_ETHIOPIC: TGUnicodeScript = 11;
  G_UNICODE_SCRIPT_GEORGIAN: TGUnicodeScript = 12;
  G_UNICODE_SCRIPT_GOTHIC: TGUnicodeScript = 13;
  G_UNICODE_SCRIPT_GREEK: TGUnicodeScript = 14;
  G_UNICODE_SCRIPT_GUJARATI: TGUnicodeScript = 15;
  G_UNICODE_SCRIPT_GURMUKHI: TGUnicodeScript = 16;
  G_UNICODE_SCRIPT_HAN: TGUnicodeScript = 17;
  G_UNICODE_SCRIPT_HANGUL: TGUnicodeScript = 18;
  G_UNICODE_SCRIPT_HEBREW: TGUnicodeScript = 19;
  G_UNICODE_SCRIPT_HIRAGANA: TGUnicodeScript = 20;
  G_UNICODE_SCRIPT_KANNADA: TGUnicodeScript = 21;
  G_UNICODE_SCRIPT_KATAKANA: TGUnicodeScript = 22;
  G_UNICODE_SCRIPT_KHMER: TGUnicodeScript = 23;
  G_UNICODE_SCRIPT_LAO: TGUnicodeScript = 24;
  G_UNICODE_SCRIPT_LATIN: TGUnicodeScript = 25;
  G_UNICODE_SCRIPT_MALAYALAM: TGUnicodeScript = 26;
  G_UNICODE_SCRIPT_MONGOLIAN: TGUnicodeScript = 27;
  G_UNICODE_SCRIPT_MYANMAR: TGUnicodeScript = 28;
  G_UNICODE_SCRIPT_OGHAM: TGUnicodeScript = 29;
  G_UNICODE_SCRIPT_OLD_ITALIC: TGUnicodeScript = 30;
  G_UNICODE_SCRIPT_ORIYA: TGUnicodeScript = 31;
  G_UNICODE_SCRIPT_RUNIC: TGUnicodeScript = 32;
  G_UNICODE_SCRIPT_SINHALA: TGUnicodeScript = 33;
  G_UNICODE_SCRIPT_SYRIAC: TGUnicodeScript = 34;
  G_UNICODE_SCRIPT_TAMIL: TGUnicodeScript = 35;
  G_UNICODE_SCRIPT_TELUGU: TGUnicodeScript = 36;
  G_UNICODE_SCRIPT_THAANA: TGUnicodeScript = 37;
  G_UNICODE_SCRIPT_THAI: TGUnicodeScript = 38;
  G_UNICODE_SCRIPT_TIBETAN: TGUnicodeScript = 39;
  G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL: TGUnicodeScript = 40;
  G_UNICODE_SCRIPT_YI: TGUnicodeScript = 41;
  G_UNICODE_SCRIPT_TAGALOG: TGUnicodeScript = 42;
  G_UNICODE_SCRIPT_HANUNOO: TGUnicodeScript = 43;
  G_UNICODE_SCRIPT_BUHID: TGUnicodeScript = 44;
  G_UNICODE_SCRIPT_TAGBANWA: TGUnicodeScript = 45;
  G_UNICODE_SCRIPT_BRAILLE: TGUnicodeScript = 46;
  G_UNICODE_SCRIPT_CYPRIOT: TGUnicodeScript = 47;
  G_UNICODE_SCRIPT_LIMBU: TGUnicodeScript = 48;
  G_UNICODE_SCRIPT_OSMANYA: TGUnicodeScript = 49;
  G_UNICODE_SCRIPT_SHAVIAN: TGUnicodeScript = 50;
  G_UNICODE_SCRIPT_LINEAR_B: TGUnicodeScript = 51;
  G_UNICODE_SCRIPT_TAI_LE: TGUnicodeScript = 52;
  G_UNICODE_SCRIPT_UGARITIC: TGUnicodeScript = 53;
  G_UNICODE_SCRIPT_NEW_TAI_LUE: TGUnicodeScript = 54;
  G_UNICODE_SCRIPT_BUGINESE: TGUnicodeScript = 55;
  G_UNICODE_SCRIPT_GLAGOLITIC: TGUnicodeScript = 56;
  G_UNICODE_SCRIPT_TIFINAGH: TGUnicodeScript = 57;
  G_UNICODE_SCRIPT_SYLOTI_NAGRI: TGUnicodeScript = 58;
  G_UNICODE_SCRIPT_OLD_PERSIAN: TGUnicodeScript = 59;
  G_UNICODE_SCRIPT_KHAROSHTHI: TGUnicodeScript = 60;
  G_UNICODE_SCRIPT_UNKNOWN: TGUnicodeScript = 61;
  G_UNICODE_SCRIPT_BALINESE: TGUnicodeScript = 62;
  G_UNICODE_SCRIPT_CUNEIFORM: TGUnicodeScript = 63;
  G_UNICODE_SCRIPT_PHOENICIAN: TGUnicodeScript = 64;
  G_UNICODE_SCRIPT_PHAGS_PA: TGUnicodeScript = 65;
  G_UNICODE_SCRIPT_NKO: TGUnicodeScript = 66;
  G_UNICODE_SCRIPT_KAYAH_LI: TGUnicodeScript = 67;
  G_UNICODE_SCRIPT_LEPCHA: TGUnicodeScript = 68;
  G_UNICODE_SCRIPT_REJANG: TGUnicodeScript = 69;
  G_UNICODE_SCRIPT_SUNDANESE: TGUnicodeScript = 70;
  G_UNICODE_SCRIPT_SAURASHTRA: TGUnicodeScript = 71;
  G_UNICODE_SCRIPT_CHAM: TGUnicodeScript = 72;
  G_UNICODE_SCRIPT_OL_CHIKI: TGUnicodeScript = 73;
  G_UNICODE_SCRIPT_VAI: TGUnicodeScript = 74;
  G_UNICODE_SCRIPT_CARIAN: TGUnicodeScript = 75;
  G_UNICODE_SCRIPT_LYCIAN: TGUnicodeScript = 76;
  G_UNICODE_SCRIPT_LYDIAN: TGUnicodeScript = 77;
  G_UNICODE_SCRIPT_AVESTAN: TGUnicodeScript = 78;
  G_UNICODE_SCRIPT_BAMUM: TGUnicodeScript = 79;
  G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS: TGUnicodeScript = 80;
  G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC: TGUnicodeScript = 81;
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI: TGUnicodeScript = 82;
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN: TGUnicodeScript = 83;
  G_UNICODE_SCRIPT_JAVANESE: TGUnicodeScript = 84;
  G_UNICODE_SCRIPT_KAITHI: TGUnicodeScript = 85;
  G_UNICODE_SCRIPT_LISU: TGUnicodeScript = 86;
  G_UNICODE_SCRIPT_MEETEI_MAYEK: TGUnicodeScript = 87;
  G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN: TGUnicodeScript = 88;
  G_UNICODE_SCRIPT_OLD_TURKIC: TGUnicodeScript = 89;
  G_UNICODE_SCRIPT_SAMARITAN: TGUnicodeScript = 90;
  G_UNICODE_SCRIPT_TAI_THAM: TGUnicodeScript = 91;
  G_UNICODE_SCRIPT_TAI_VIET: TGUnicodeScript = 92;
  G_UNICODE_SCRIPT_BATAK: TGUnicodeScript = 93;
  G_UNICODE_SCRIPT_BRAHMI: TGUnicodeScript = 94;
  G_UNICODE_SCRIPT_MANDAIC: TGUnicodeScript = 95;
  G_UNICODE_SCRIPT_CHAKMA: TGUnicodeScript = 96;
  G_UNICODE_SCRIPT_MEROITIC_CURSIVE: TGUnicodeScript = 97;
  G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS: TGUnicodeScript = 98;
  G_UNICODE_SCRIPT_MIAO: TGUnicodeScript = 99;
  G_UNICODE_SCRIPT_SHARADA: TGUnicodeScript = 100;
  G_UNICODE_SCRIPT_SORA_SOMPENG: TGUnicodeScript = 101;
  G_UNICODE_SCRIPT_TAKRI: TGUnicodeScript = 102;

type
  TGUnicodeType = Integer;
const
  { GUnicodeType }
  G_UNICODE_CONTROL: TGUnicodeType = 0;
  G_UNICODE_FORMAT: TGUnicodeType = 1;
  G_UNICODE_UNASSIGNED: TGUnicodeType = 2;
  G_UNICODE_PRIVATE_USE: TGUnicodeType = 3;
  G_UNICODE_SURROGATE: TGUnicodeType = 4;
  G_UNICODE_LOWERCASE_LETTER: TGUnicodeType = 5;
  G_UNICODE_MODIFIER_LETTER: TGUnicodeType = 6;
  G_UNICODE_OTHER_LETTER: TGUnicodeType = 7;
  G_UNICODE_TITLECASE_LETTER: TGUnicodeType = 8;
  G_UNICODE_UPPERCASE_LETTER: TGUnicodeType = 9;
  G_UNICODE_SPACING_MARK: TGUnicodeType = 10;
  G_UNICODE_ENCLOSING_MARK: TGUnicodeType = 11;
  G_UNICODE_NON_SPACING_MARK: TGUnicodeType = 12;
  G_UNICODE_DECIMAL_NUMBER: TGUnicodeType = 13;
  G_UNICODE_LETTER_NUMBER: TGUnicodeType = 14;
  G_UNICODE_OTHER_NUMBER: TGUnicodeType = 15;
  G_UNICODE_CONNECT_PUNCTUATION: TGUnicodeType = 16;
  G_UNICODE_DASH_PUNCTUATION: TGUnicodeType = 17;
  G_UNICODE_CLOSE_PUNCTUATION: TGUnicodeType = 18;
  G_UNICODE_FINAL_PUNCTUATION: TGUnicodeType = 19;
  G_UNICODE_INITIAL_PUNCTUATION: TGUnicodeType = 20;
  G_UNICODE_OTHER_PUNCTUATION: TGUnicodeType = 21;
  G_UNICODE_OPEN_PUNCTUATION: TGUnicodeType = 22;
  G_UNICODE_CURRENCY_SYMBOL: TGUnicodeType = 23;
  G_UNICODE_MODIFIER_SYMBOL: TGUnicodeType = 24;
  G_UNICODE_MATH_SYMBOL: TGUnicodeType = 25;
  G_UNICODE_OTHER_SYMBOL: TGUnicodeType = 26;
  G_UNICODE_LINE_SEPARATOR: TGUnicodeType = 27;
  G_UNICODE_PARAGRAPH_SEPARATOR: TGUnicodeType = 28;
  G_UNICODE_SPACE_SEPARATOR: TGUnicodeType = 29;

type
  TGUserDirectory = Integer;
const
  { GUserDirectory }
  G_USER_DIRECTORY_DESKTOP: TGUserDirectory = 0;
  G_USER_DIRECTORY_DOCUMENTS: TGUserDirectory = 1;
  G_USER_DIRECTORY_DOWNLOAD: TGUserDirectory = 2;
  G_USER_DIRECTORY_MUSIC: TGUserDirectory = 3;
  G_USER_DIRECTORY_PICTURES: TGUserDirectory = 4;
  G_USER_DIRECTORY_PUBLIC_SHARE: TGUserDirectory = 5;
  G_USER_DIRECTORY_TEMPLATES: TGUserDirectory = 6;
  G_USER_DIRECTORY_VIDEOS: TGUserDirectory = 7;
  G_USER_N_DIRECTORIES: TGUserDirectory = 8;

type
  TGVariantClass = Integer;
const
  { GVariantClass }
  G_VARIANT_CLASS_BOOLEAN: TGVariantClass = 98;
  G_VARIANT_CLASS_BYTE: TGVariantClass = 121;
  G_VARIANT_CLASS_INT16: TGVariantClass = 110;
  G_VARIANT_CLASS_UINT16: TGVariantClass = 113;
  G_VARIANT_CLASS_INT32: TGVariantClass = 105;
  G_VARIANT_CLASS_UINT32: TGVariantClass = 117;
  G_VARIANT_CLASS_INT64: TGVariantClass = 120;
  G_VARIANT_CLASS_UINT64: TGVariantClass = 116;
  G_VARIANT_CLASS_HANDLE: TGVariantClass = 104;
  G_VARIANT_CLASS_DOUBLE: TGVariantClass = 100;
  G_VARIANT_CLASS_STRING: TGVariantClass = 115;
  G_VARIANT_CLASS_OBJECT_PATH: TGVariantClass = 111;
  G_VARIANT_CLASS_SIGNATURE: TGVariantClass = 103;
  G_VARIANT_CLASS_VARIANT: TGVariantClass = 118;
  G_VARIANT_CLASS_MAYBE: TGVariantClass = 109;
  G_VARIANT_CLASS_ARRAY: TGVariantClass = 97;
  G_VARIANT_CLASS_TUPLE: TGVariantClass = 40;
  G_VARIANT_CLASS_DICT_ENTRY: TGVariantClass = 123;

type
  TGVariantParseError = Integer;
const
  { GVariantParseError }
  G_VARIANT_PARSE_ERROR_FAILED: TGVariantParseError = 0;
  G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED: TGVariantParseError = 1;
  G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE: TGVariantParseError = 2;
  G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED: TGVariantParseError = 3;
  G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END: TGVariantParseError = 4;
  G_VARIANT_PARSE_ERROR_INVALID_CHARACTER: TGVariantParseError = 5;
  G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING: TGVariantParseError = 6;
  G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH: TGVariantParseError = 7;
  G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE: TGVariantParseError = 8;
  G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING: TGVariantParseError = 9;
  G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE: TGVariantParseError = 10;
  G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE: TGVariantParseError = 11;
  G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG: TGVariantParseError = 12;
  G_VARIANT_PARSE_ERROR_TYPE_ERROR: TGVariantParseError = 13;
  G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN: TGVariantParseError = 14;
  G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD: TGVariantParseError = 15;
  G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT: TGVariantParseError = 16;
  G_VARIANT_PARSE_ERROR_VALUE_EXPECTED: TGVariantParseError = 17;
type
  guint1 = 0..(1 shl 1-1);
  guint2 = 0..(1 shl 2-1);
  guint3 = 0..(1 shl 3-1);
  guint4 = 0..(1 shl 4-1);
  guint5 = 0..(1 shl 5-1);
  guint6 = 0..(1 shl 6-1);
  guint7 = 0..(1 shl 7-1);
  guint9 = 0..(1 shl 9-1);
  guint10 = 0..(1 shl 10-1);
  guint11 = 0..(1 shl 11-1);
  guint12 = 0..(1 shl 12-1);
  guint13 = 0..(1 shl 13-1);
  guint14 = 0..(1 shl 14-1);
  guint15 = 0..(1 shl 15-1);
  guint17 = 0..(1 shl 17-1);
  guint18 = 0..(1 shl 18-1);
  guint19 = 0..(1 shl 19-1);
  guint20 = 0..(1 shl 20-1);
  guint21 = 0..(1 shl 21-1);
  guint22 = 0..(1 shl 22-1);
  guint23 = 0..(1 shl 23-1);
  guint24 = 0..(1 shl 24-1);
  guint25 = 0..(1 shl 25-1);
  guint26 = 0..(1 shl 26-1);
  guint27 = 0..(1 shl 27-1);
  guint28 = 0..(1 shl 28-1);
  guint29 = 0..(1 shl 29-1);
  guint30 = 0..(1 shl 30-1);
  guint31 = 0..(1 shl 31-1);
  gpointer = pointer;
  int = cint;
  gint = cint;
  guint = cuint;
  guint8 = cuint8;
  guint16 = cuint16;
  guint32 = cuint32;
  guint64 = cuint64;
  gint8 = cint8;
  gint16 = cint16;
  gint32 = cint32;
  gint64 = cint64;
  gsize = csize_t;
  glong = clong;
  gulong = culong;
  gushort = cushort;
  gshort = cshort;
  gchar = char;
  guchar = byte;
  gboolean = Boolean32;
  gssize = PtrInt;
  size_t = csize_t;
  gconstpointer = gpointer;
  gfloat = cfloat;
  gdouble = cdouble;
  double = cdouble;
  goffset = Int64;
  long_double = Extended;
  gunichar = guint32;
  gunichar2 = guint32;
  unsigned_long_long = qword;

  PPGDateDay = ^PGDateDay;
  PGDateDay = ^TGDateDay;
  TGDateDay = guint8;

  PPGDateYear = ^PGDateYear;
  PGDateYear = ^TGDateYear;
  TGDateYear = guint16;

  PPGPid = ^PGPid;
  PGPid = ^TGPid;
  TGPid = gint;

  PPGQuark = ^PGQuark;
  PGQuark = ^TGQuark;
  TGQuark = guint32;

  PPGStrv = ^PGStrv;
  PGStrv = ^TGStrv;
  TGStrv = gpointer;

  PPGTime = ^PGTime;
  PGTime = ^TGTime;
  TGTime = gint32;

  PPGTimeSpan = ^PGTimeSpan;
  PGTimeSpan = ^TGTimeSpan;
  TGTimeSpan = gint64;

  PPPGType = ^PPGType;
  PPGType = ^PGType;
  PGType = ^TGType;
  TGType = gsize;

  PPPgpointer = ^PPgpointer;
  PPgpointer = ^Pgpointer;
  Pgpointer = ^gpointer;
  TGDestroyNotify = procedure(data: gpointer); cdecl;

  PPPgint = ^PPgint;
  PPgint = ^Pgint;
  Pgint = ^gint;
  TGCompareFunc = function(a: Pgpointer; b: Pgpointer): gint; cdecl;
  TGCompareDataFunc = function(a: Pgpointer; b: Pgpointer; user_data: gpointer): gint; cdecl;

  PPGArray = ^PGArray;
  PGArray = ^TGArray;

  PPPguint = ^PPguint;
  PPguint = ^Pguint;
  Pguint = ^guint;

  PPPgchar = ^PPgchar;
  PPgchar = ^Pgchar;
  Pgchar = ^gchar;

  PPPgboolean = ^PPgboolean;
  PPgboolean = ^Pgboolean;
  Pgboolean = ^gboolean;

  PPGDestroyNotify = ^PGDestroyNotify;
  PGDestroyNotify = ^TGDestroyNotify;

  PPGCompareFunc = ^PGCompareFunc;
  PGCompareFunc = ^TGCompareFunc;

  PPGCompareDataFunc = ^PGCompareDataFunc;
  PGCompareDataFunc = ^TGCompareDataFunc;
  TGArray = object
    data: Pgchar;
    len: guint;
  end;

  PPGAsciiType = ^PGAsciiType;
  PGAsciiType = ^TGAsciiType;

  PPGAsyncQueue = ^PGAsyncQueue;
  PGAsyncQueue = ^TGAsyncQueue;

  PPPguint64 = ^PPguint64;
  PPguint64 = ^Pguint64;
  Pguint64 = ^guint64;
  TGAsyncQueue = object
  end;

  PPGTimeVal = ^PGTimeVal;
  PGTimeVal = ^TGTimeVal;

  PPPglong = ^PPglong;
  PPglong = ^Pglong;
  Pglong = ^glong;
  TGTimeVal = object
    tv_sec: glong;
    tv_usec: glong;
  end;

  PPGBookmarkFile = ^PGBookmarkFile;
  PGBookmarkFile = ^TGBookmarkFile;

  PPGError = ^PGError;
  PGError = ^TGError;

  PPPgsize = ^PPgsize;
  PPgsize = ^Pgsize;
  Pgsize = ^gsize;
  TGBookmarkFile = object
  end;

  Pva_list = ^Tva_list;

  { va_list }
  Tva_list = record
    { opaque type }
    Unknown: Pointer;
  end;

  TGError = object
    domain: TGQuark;
    code: gint;
    message: Pgchar;
  end;

  PPGBookmarkFileError = ^PGBookmarkFileError;
  PGBookmarkFileError = ^TGBookmarkFileError;

  PPGBytes = ^PGBytes;
  PGBytes = ^TGBytes;

  PPPguint8 = ^PPguint8;
  PPguint8 = ^Pguint8;
  Pguint8 = ^guint8;
  TGBytes = object
  end;

  PPGByteArray = ^PGByteArray;
  PGByteArray = ^TGByteArray;
  TGByteArray = object
    data: Pguint8;
    len: guint;
  end;

  PPGChecksum = ^PGChecksum;
  PGChecksum = ^TGChecksum;

  PPGChecksumType = ^PGChecksumType;
  PGChecksumType = ^TGChecksumType;

  PPPgssize = ^PPgssize;
  PPgssize = ^Pgssize;
  Pgssize = ^gssize;
  TGChecksum = object
  end;
  TGChildWatchFunc = procedure(pid: TGPid; status: gint; user_data: gpointer); cdecl;

  PPGCond = ^PGCond;
  PGCond = ^TGCond;

  PPGMutex = ^PGMutex;
  PGMutex = ^TGMutex;

  PPPgint64 = ^PPgint64;
  PPgint64 = ^Pgint64;
  Pgint64 = ^gint64;
  TGCond = object
    p: gpointer;
    i: array [0..1] of guint;
  end;
  TGMutex = record
    case longint of
      0 : (p: gpointer);
      1 : (i: array [0..1] of guint);
    //
    //
    //
    //
    //
  end;



  PPGConvertError = ^PGConvertError;
  PGConvertError = ^TGConvertError;
  TGCopyFunc = function(src: Pgpointer; data: gpointer): gpointer; cdecl;

  PPGData = ^PGData;
  PGData = ^TGData;

  TGData = record
  end;


  TGDataForeachFunc = procedure(key_id: TGQuark; data: gpointer; user_data: gpointer); cdecl;

  PPGDate = ^PGDate;
  PGDate = ^TGDate;

  PPGDateMonth = ^PGDateMonth;
  PGDateMonth = ^TGDateMonth;

  PPPguint32 = ^PPguint32;
  PPguint32 = ^Pguint32;
  Pguint32 = ^guint32;

  PPGDateWeekday = ^PGDateWeekday;
  PGDateWeekday = ^TGDateWeekday;
  TGDateBitfield0 = bitpacked record
    julian_days: guint32 { changed from guint to accomodate 32 bitsize requirement };
    julian: guint1 { changed from guint to accomodate 1 bitsize requirement };
    dmy: guint1 { changed from guint to accomodate 1 bitsize requirement };
    day: guint6 { changed from guint to accomodate 6 bitsize requirement };
    month: guint4 { changed from guint to accomodate 4 bitsize requirement };
    year: guint16 { changed from guint to accomodate 16 bitsize requirement };
  end;

  TGDate = object
    Bitfield0 : TGDateBitfield0; { auto generated type }
  end;

  PPGDateDMY = ^PGDateDMY;
  PGDateDMY = ^TGDateDMY;

  PPGDateTime = ^PGDateTime;
  PGDateTime = ^TGDateTime;

  PPGTimeZone = ^PGTimeZone;
  PGTimeZone = ^TGTimeZone;

  PPPgdouble = ^PPgdouble;
  PPgdouble = ^Pgdouble;
  Pgdouble = ^gdouble;
  TGDateTime = object
  end;

  PPGTimeType = ^PGTimeType;
  PGTimeType = ^TGTimeType;

  PPPgint32 = ^PPgint32;
  PPgint32 = ^Pgint32;
  Pgint32 = ^gint32;
  TGTimeZone = object
  end;

  PPGDebugKey = ^PGDebugKey;
  PGDebugKey = ^TGDebugKey;

  TGDebugKey = record
    key: Pgchar;
    value: guint;
  end;



  PPGDir = ^PGDir;
  PGDir = ^TGDir;
  TGDir = object
  end;
  TGDoubleIEEE754 = record
    case longint of
      0 : (v_double: gdouble);
      1 : (
        mpn : record
          mantissa_low: guint32 { changed from guint to accomodate 32 bitsize requirement };
          mantissa_high: guint20 { changed from guint to accomodate 20 bitsize requirement };
          biased_exponent: guint11 { changed from guint to accomodate 11 bitsize requirement };
          sign: guint1 { changed from guint to accomodate 1 bitsize requirement };
        end;

);
  end;


  TGDuplicateFunc = function(data: gpointer; user_data: gpointer): gpointer; cdecl;
  TGEqualFunc = function(a: Pgpointer; b: Pgpointer): gboolean; cdecl;

  PPGErrorType = ^PGErrorType;
  PGErrorType = ^TGErrorType;

  PPGFileError = ^PGFileError;
  PGFileError = ^TGFileError;

  PPGFileTest = ^PGFileTest;
  PGFileTest = ^TGFileTest;

  PPPgfloat = ^PPgfloat;
  PPgfloat = ^Pgfloat;
  Pgfloat = ^gfloat;
  TGFloatIEEE754 = record
    case longint of
      0 : (v_float: gfloat);
      1 : (
        mpn : record
          mantissa: guint23 { changed from guint to accomodate 23 bitsize requirement };
          biased_exponent: guint8 { changed from guint to accomodate 8 bitsize requirement };
          sign: guint1 { changed from guint to accomodate 1 bitsize requirement };
        end;

);
  end;



  PPGFormatSizeFlags = ^PGFormatSizeFlags;
  PGFormatSizeFlags = ^TGFormatSizeFlags;
  TGFreeFunc = procedure(data: gpointer); cdecl;
  TGFunc = procedure(data: gpointer; user_data: gpointer); cdecl;
  TGHFunc = procedure(key: gpointer; value: gpointer; user_data: gpointer); cdecl;
  TGHRFunc = function(key: gpointer; value: gpointer; user_data: gpointer): gboolean; cdecl;
  TGHashFunc = function(key: Pgpointer): guint; cdecl;

  PPGHashTable = ^PGHashTable;
  PGHashTable = ^TGHashTable;

  PPGHRFunc = ^PGHRFunc;
  PGHRFunc = ^TGHRFunc;

  PPGHFunc = ^PGHFunc;
  PGHFunc = ^TGHFunc;

  PPGList = ^PGList;
  PGList = ^TGList;

  PPGHashFunc = ^PGHashFunc;
  PGHashFunc = ^TGHashFunc;

  PPGEqualFunc = ^PGEqualFunc;
  PGEqualFunc = ^TGEqualFunc;
  TGHashTable = object
  end;

  PPGCopyFunc = ^PGCopyFunc;
  PGCopyFunc = ^TGCopyFunc;

  PPGFunc = ^PGFunc;
  PGFunc = ^TGFunc;
  TGList = object
    data: gpointer;
    next: PGList;
    prev: PGList;
  end;

  PPGHashTableIter = ^PGHashTableIter;
  PGHashTableIter = ^TGHashTableIter;
  TGHashTableIter = object
    dummy1: gpointer;
    dummy2: gpointer;
    dummy3: gpointer;
    dummy4: gint;
    dummy5: gboolean;
    dummy6: gpointer;
  end;

  PPGHmac = ^PGHmac;
  PGHmac = ^TGHmac;
  TGHmac = object
  end;

  PPGHook = ^PGHook;
  PGHook = ^TGHook;

  PPGHookList = ^PGHookList;
  PGHookList = ^TGHookList;

  PPPgulong = ^PPgulong;
  PPgulong = ^Pgulong;
  Pgulong = ^gulong;

  PPGHookFindFunc = ^PGHookFindFunc;
  PGHookFindFunc = ^TGHookFindFunc;
  TGHookFindFunc = function(hook: PGHook; data: gpointer): gboolean; cdecl;

  PPGHookCompareFunc = ^PGHookCompareFunc;
  PGHookCompareFunc = ^TGHookCompareFunc;
  TGHookCompareFunc = function(new_hook: PGHook; sibling: PGHook): gint; cdecl;
  TGHook = object
    data: gpointer;
    next: PGHook;
    prev: PGHook;
    ref_count: guint;
    hook_id: gulong;
    flags: guint;
    func: gpointer;
    destroy_1: TGDestroyNotify;
  end;

  PPGHookMarshaller = ^PGHookMarshaller;
  PGHookMarshaller = ^TGHookMarshaller;
  TGHookMarshaller = procedure(hook: PGHook; marshal_data: gpointer); cdecl;

  PPGHookCheckMarshaller = ^PGHookCheckMarshaller;
  PGHookCheckMarshaller = ^TGHookCheckMarshaller;
  TGHookCheckMarshaller = function(hook: PGHook; marshal_data: gpointer): gboolean; cdecl;
  TGHookListBitfield0 = bitpacked record
    hook_size: guint16 { changed from guint to accomodate 16 bitsize requirement };
    is_setup: guint1 { changed from guint to accomodate 1 bitsize requirement };
  end;


  PPGHookFinalizeFunc = ^PGHookFinalizeFunc;
  PGHookFinalizeFunc = ^TGHookFinalizeFunc;
  TGHookFinalizeFunc = procedure(hook_list: PGHookList; hook: PGHook); cdecl;
  TGHookList = object
    seq_id: gulong;
    Bitfield0 : TGHookListBitfield0; { auto generated type }
    hooks: PGHook;
    dummy3: gpointer;
    finalize_hook: TGHookFinalizeFunc;
    dummy: array [0..1] of gpointer;
  end;
  TGHookCheckFunc = function(data: gpointer): gboolean; cdecl;

  PPGHookFlagMask = ^PGHookFlagMask;
  PGHookFlagMask = ^TGHookFlagMask;
  TGHookFunc = procedure(data: gpointer); cdecl;

  PPGIConv = ^PGIConv;
  PGIConv = ^TGIConv;
  TGIConv = object
  end;

  PPGIOFuncs = ^PGIOFuncs;
  PGIOFuncs = ^TGIOFuncs;

  PPGIOStatus = ^PGIOStatus;
  PGIOStatus = ^TGIOStatus;

  PPGIOChannel = ^PGIOChannel;
  PGIOChannel = ^TGIOChannel;

  PPGSeekType = ^PGSeekType;
  PGSeekType = ^TGSeekType;

  PPGSource = ^PGSource;
  PGSource = ^TGSource;

  PPGIOCondition = ^PGIOCondition;
  PGIOCondition = ^TGIOCondition;

  PPGIOFlags = ^PGIOFlags;
  PGIOFlags = ^TGIOFlags;

  TGIOFuncs = record
    io_read: function(channel: PGIOChannel; buf: Pgchar; count: gsize; bytes_read: Pgsize; error: PPGError): TGIOStatus; cdecl;
    io_write: function(channel: PGIOChannel; buf: Pgchar; count: gsize; bytes_written: Pgsize; error: PPGError): TGIOStatus; cdecl;
    io_seek: function(channel: PGIOChannel; offset: gint64; type_: TGSeekType; error: PPGError): TGIOStatus; cdecl;
    io_close: function(channel: PGIOChannel; error: PPGError): TGIOStatus; cdecl;
    io_create_watch: function(channel: PGIOChannel; condition: TGIOCondition): PGSource; cdecl;
    io_free: procedure(channel: PGIOChannel); cdecl;
    io_set_flags: function(channel: PGIOChannel; flags: TGIOFlags; error: PPGError): TGIOStatus; cdecl;
    io_get_flags: function(channel: PGIOChannel): TGIOFlags; cdecl;
  end;



  PPGString = ^PGString;
  PGString = ^TGString;

  PPPgunichar = ^PPgunichar;
  PPgunichar = ^Pgunichar;
  Pgunichar = ^gunichar;
  TGString = object
    str: Pgchar;
    len: gsize;
    allocated_len: gsize;
  end;

  PPGIOChannelError = ^PGIOChannelError;
  PGIOChannelError = ^TGIOChannelError;
  TGIOChannelBitfield0 = bitpacked record
    use_buffer: guint1 { changed from guint to accomodate 1 bitsize requirement };
    do_encode: guint1 { changed from guint to accomodate 1 bitsize requirement };
    close_on_unref: guint1 { changed from guint to accomodate 1 bitsize requirement };
    is_readable: guint1 { changed from guint to accomodate 1 bitsize requirement };
    is_writeable: guint1 { changed from guint to accomodate 1 bitsize requirement };
    is_seekable: guint1 { changed from guint to accomodate 1 bitsize requirement };
  end;

  TGIOChannel = object
    ref_count: gint;
    funcs: PGIOFuncs;
    encoding: Pgchar;
    read_cd: TGIConv;
    write_cd: TGIConv;
    line_term: Pgchar;
    line_term_len: guint;
    buf_size: gsize;
    read_buf: PGString;
    encoded_read_buf: PGString;
    write_buf: PGString;
    partial_write_buf: array [0..5] of gchar;
    Bitfield0 : TGIOChannelBitfield0; { auto generated type }
    reserved1: gpointer;
    reserved2: gpointer;
  end;

  PPGIOError = ^PGIOError;
  PGIOError = ^TGIOError;
  TGIOFunc = function(source: PGIOChannel; condition: TGIOCondition; data: gpointer): gboolean; cdecl;

  PPGSourceFuncs = ^PGSourceFuncs;
  PGSourceFuncs = ^TGSourceFuncs;

  PPPGPollFD = ^PPGPollFD;
  PPGPollFD = ^PGPollFD;
  PGPollFD = ^TGPollFD;

  PPGMainContext = ^PGMainContext;
  PGMainContext = ^TGMainContext;

  PPGSourceFunc = ^PGSourceFunc;
  PGSourceFunc = ^TGSourceFunc;
  TGSourceFunc = function(user_data: gpointer): gboolean; cdecl;

  PPGSourceCallbackFuncs = ^PGSourceCallbackFuncs;
  PGSourceCallbackFuncs = ^TGSourceCallbackFuncs;

  PPGSList = ^PGSList;
  PGSList = ^TGSList;

  PPGSourcePrivate = ^PGSourcePrivate;
  PGSourcePrivate = ^TGSourcePrivate;
  TGSource = object
    callback_data: gpointer;
    callback_funcs: PGSourceCallbackFuncs;
    source_funcs: PGSourceFuncs;
    ref_count: guint;
    context: PGMainContext;
    priority: gint;
    flags: guint;
    source_id: guint;
    poll_fds: PGSList;
    prev: PGSource;
    next: PGSource;
    name: Pgchar;
    priv: PGSourcePrivate;
  end;

  PPGKeyFile = ^PGKeyFile;
  PGKeyFile = ^TGKeyFile;

  PPGKeyFileFlags = ^PGKeyFileFlags;
  PGKeyFileFlags = ^TGKeyFileFlags;
  TGKeyFile = object
  end;

  PPGKeyFileError = ^PGKeyFileError;
  PGKeyFileError = ^TGKeyFileError;

  PPGLogLevelFlags = ^PGLogLevelFlags;
  PGLogLevelFlags = ^TGLogLevelFlags;
  TGLogFunc = procedure(log_domain: Pgchar; log_level: TGLogLevelFlags; message: Pgchar; user_data: gpointer); cdecl;

  PPGPollFunc = ^PGPollFunc;
  PGPollFunc = ^TGPollFunc;
  TGPollFunc = function(ufds: PGPollFD; nfsd: guint; timeout_: gint): gint; cdecl;
  TGMainContext = object
  end;

  PPPgushort = ^PPgushort;
  PPgushort = ^Pgushort;
  Pgushort = ^gushort;
  TGPollFD = object
    fd: gint;
    events: gushort;
    revents: gushort;
  end;

  PPGSourceDummyMarshal = ^PGSourceDummyMarshal;
  PGSourceDummyMarshal = ^TGSourceDummyMarshal;
  TGSourceDummyMarshal = procedure; cdecl;

  TGSourceFuncs = record
    prepare: function(source: PGSource; timeout_: Pgint): gboolean; cdecl;
    check: function(source: PGSource): gboolean; cdecl;
    dispatch: function(source: PGSource; callback: TGSourceFunc; user_data: gpointer): gboolean; cdecl;
    finalize: procedure(source: PGSource); cdecl;
    closure_callback: TGSourceFunc;
    closure_marshal: TGSourceDummyMarshal;
  end;



  PPGMainLoop = ^PGMainLoop;
  PGMainLoop = ^TGMainLoop;
  TGMainLoop = object
  end;

  PPGMappedFile = ^PGMappedFile;
  PGMappedFile = ^TGMappedFile;
  TGMappedFile = object
  end;

  PPGMarkupCollectType = ^PGMarkupCollectType;
  PGMarkupCollectType = ^TGMarkupCollectType;

  PPGMarkupError = ^PGMarkupError;
  PGMarkupError = ^TGMarkupError;

  PPGMarkupParseContext = ^PGMarkupParseContext;
  PGMarkupParseContext = ^TGMarkupParseContext;

  PPGMarkupParser = ^PGMarkupParser;
  PGMarkupParser = ^TGMarkupParser;

  PPGMarkupParseFlags = ^PGMarkupParseFlags;
  PGMarkupParseFlags = ^TGMarkupParseFlags;
  TGMarkupParseContext = object
  end;

  TGMarkupParser = record
    start_element: procedure(context: PGMarkupParseContext; element_name: Pgchar; attribute_names: PPgchar; attribute_values: PPgchar; user_data: gpointer; error: PPGError); cdecl;
    end_element: procedure(context: PGMarkupParseContext; element_name: Pgchar; user_data: gpointer; error: PPGError); cdecl;
    text: procedure(context: PGMarkupParseContext; text: Pgchar; text_len: gsize; user_data: gpointer; error: PPGError); cdecl;
    passthrough: procedure(context: PGMarkupParseContext; passthrough_text: Pgchar; text_len: gsize; user_data: gpointer; error: PPGError); cdecl;
    error: procedure(context: PGMarkupParseContext; error: PGError; user_data: gpointer); cdecl;
  end;


  TGSList = object
    data: gpointer;
    next: PGSList;
  end;

  PPGMatchInfo = ^PGMatchInfo;
  PGMatchInfo = ^TGMatchInfo;

  PPGRegex = ^PGRegex;
  PGRegex = ^TGRegex;
  TGMatchInfo = object
  end;

  PPGRegexCompileFlags = ^PGRegexCompileFlags;
  PGRegexCompileFlags = ^TGRegexCompileFlags;

  PPGRegexMatchFlags = ^PGRegexMatchFlags;
  PGRegexMatchFlags = ^TGRegexMatchFlags;

  PPGRegexEvalCallback = ^PGRegexEvalCallback;
  PGRegexEvalCallback = ^TGRegexEvalCallback;
  TGRegexEvalCallback = function(match_info: PGMatchInfo; result_: PGString; user_data: gpointer): gboolean; cdecl;
  TGRegex = object
  end;

  PPGMemVTable = ^PGMemVTable;
  PGMemVTable = ^TGMemVTable;

  TGMemVTable = record
    malloc: function(n_bytes: gsize): gpointer; cdecl;
    realloc: function(mem: gpointer; n_bytes: gsize): gpointer; cdecl;
    free: procedure(mem: gpointer); cdecl;
    calloc: function(n_blocks: gsize; n_block_bytes: gsize): gpointer; cdecl;
    try_malloc: function(n_bytes: gsize): gpointer; cdecl;
    try_realloc: function(mem: gpointer; n_bytes: gsize): gpointer; cdecl;
  end;



  PPGNode = ^PGNode;
  PGNode = ^TGNode;

  PPGTraverseFlags = ^PGTraverseFlags;
  PGTraverseFlags = ^TGTraverseFlags;

  PPGNodeForeachFunc = ^PGNodeForeachFunc;
  PGNodeForeachFunc = ^TGNodeForeachFunc;
  TGNodeForeachFunc = procedure(node: PGNode; data: gpointer); cdecl;

  PPGTraverseType = ^PGTraverseType;
  PGTraverseType = ^TGTraverseType;

  PPGNodeTraverseFunc = ^PGNodeTraverseFunc;
  PGNodeTraverseFunc = ^TGNodeTraverseFunc;
  TGNodeTraverseFunc = function(node: PGNode; data: gpointer): gboolean; cdecl;
  TGNode = object
    data: gpointer;
    next: PGNode;
    prev: PGNode;
    parent: PGNode;
    children: PGNode;
  end;

  PPGNormalizeMode = ^PGNormalizeMode;
  PGNormalizeMode = ^TGNormalizeMode;

  PPGOnceStatus = ^PGOnceStatus;
  PGOnceStatus = ^TGOnceStatus;

  PPGOnce = ^PGOnce;
  PGOnce = ^TGOnce;

  PPGThreadFunc = ^PGThreadFunc;
  PGThreadFunc = ^TGThreadFunc;
  TGThreadFunc = function(data: gpointer): gpointer; cdecl;
  TGOnce = object
    status: TGOnceStatus;
    retval: gpointer;
  end;

  PPGOptionArg = ^PGOptionArg;
  PGOptionArg = ^TGOptionArg;
  TGOptionArgFunc = function(option_name: Pgchar; value: Pgchar; data: gpointer; error: PPGError): gboolean; cdecl;

  PPGOptionContext = ^PGOptionContext;
  PGOptionContext = ^TGOptionContext;

  PPGOptionGroup = ^PGOptionGroup;
  PGOptionGroup = ^TGOptionGroup;

  PPGOptionEntry = ^PGOptionEntry;
  PGOptionEntry = ^TGOptionEntry;

  PPGTranslateFunc = ^PGTranslateFunc;
  PGTranslateFunc = ^TGTranslateFunc;
  TGTranslateFunc = function(str: Pgchar; data: gpointer): Pgchar; cdecl;
  TGOptionContext = object
  end;

  PPGOptionErrorFunc = ^PGOptionErrorFunc;
  PGOptionErrorFunc = ^TGOptionErrorFunc;
  TGOptionErrorFunc = procedure(context: PGOptionContext; group: PGOptionGroup; data: gpointer; error: PPGError); cdecl;

  PPGOptionParseFunc = ^PGOptionParseFunc;
  PGOptionParseFunc = ^TGOptionParseFunc;
  TGOptionParseFunc = function(context: PGOptionContext; group: PGOptionGroup; data: gpointer; error: PPGError): gboolean; cdecl;
  TGOptionGroup = object
  end;

  TGOptionEntry = record
    long_name: Pgchar;
    short_name: gchar;
    flags: gint;
    arg: TGOptionArg;
    arg_data: gpointer;
    description: Pgchar;
    arg_description: Pgchar;
  end;



  PPGOptionError = ^PGOptionError;
  PGOptionError = ^TGOptionError;

  PPGOptionFlags = ^PGOptionFlags;
  PGOptionFlags = ^TGOptionFlags;

  PPGPatternSpec = ^PGPatternSpec;
  PGPatternSpec = ^TGPatternSpec;
  TGPatternSpec = object
  end;
  TGPrintFunc = procedure(string_: Pgchar); cdecl;

  PPGPrivate = ^PGPrivate;
  PGPrivate = ^TGPrivate;
  TGPrivate = object
    p: gpointer;
    notify: TGDestroyNotify;
    future: array [0..1] of gpointer;
  end;

  PPGPtrArray = ^PGPtrArray;
  PGPtrArray = ^TGPtrArray;
  TGPtrArray = object
    pdata: Pgpointer;
    len: guint;
  end;

  PPGQueue = ^PGQueue;
  PGQueue = ^TGQueue;
  TGQueue = object
    head: PGList;
    tail: PGList;
    length: guint;
  end;

  PPGRWLock = ^PGRWLock;
  PGRWLock = ^TGRWLock;
  TGRWLock = object
    p: gpointer;
    i: array [0..1] of guint;
  end;

  PPGRand = ^PGRand;
  PGRand = ^TGRand;
  TGRand = object
  end;

  PPGRecMutex = ^PGRecMutex;
  PGRecMutex = ^TGRecMutex;
  TGRecMutex = object
    p: gpointer;
    i: array [0..1] of guint;
  end;

  PPGRegexError = ^PGRegexError;
  PGRegexError = ^TGRegexError;

  PPGScannerConfig = ^PGScannerConfig;
  PGScannerConfig = ^TGScannerConfig;
  TGScannerConfigBitfield0 = bitpacked record
    case_sensitive: guint1 { changed from guint to accomodate 1 bitsize requirement };
    skip_comment_multi: guint1 { changed from guint to accomodate 1 bitsize requirement };
    skip_comment_single: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_comment_multi: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_identifier: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_identifier_1char: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_identifier_NULL: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_symbols: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_binary: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_octal: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_float: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_hex: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_hex_dollar: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_string_sq: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scan_string_dq: guint1 { changed from guint to accomodate 1 bitsize requirement };
    numbers_2_int: guint1 { changed from guint to accomodate 1 bitsize requirement };
    int_2_float: guint1 { changed from guint to accomodate 1 bitsize requirement };
    identifier_2_string: guint1 { changed from guint to accomodate 1 bitsize requirement };
    char_2_token: guint1 { changed from guint to accomodate 1 bitsize requirement };
    symbol_2_token: guint1 { changed from guint to accomodate 1 bitsize requirement };
    scope_0_fallback: guint1 { changed from guint to accomodate 1 bitsize requirement };
    store_int64: guint1 { changed from guint to accomodate 1 bitsize requirement };
  end;


  TGScannerConfig = record
    cset_skip_characters: Pgchar;
    cset_identifier_first: Pgchar;
    cset_identifier_nth: Pgchar;
    cpair_comment_single: Pgchar;
    Bitfield0 : TGScannerConfigBitfield0; { auto generated type }
    padding_dummy: guint;
  end;



  PPGTokenType = ^PGTokenType;
  PGTokenType = ^TGTokenType;
  TGTokenValue = record
    case longint of
      0 : (v_symbol: gpointer);
      1 : (v_identifier: Pgchar);
      2 : (v_binary: gulong);
      3 : (v_octal: gulong);
      4 : (v_int: gulong);
      5 : (v_int64: guint64);
      6 : (v_float: gdouble);
      7 : (v_hex: gulong);
      8 : (v_string: Pgchar);
      9 : (v_comment: Pgchar);
      10 : (v_char: guint8);
      11 : (v_error: guint);
  end;



  PPGScanner = ^PGScanner;
  PGScanner = ^TGScanner;
  TGScannerMsgFunc = procedure(scanner: PGScanner; message: Pgchar; error: gboolean); cdecl;

  PPGTokenValue = ^PGTokenValue;
  PGTokenValue = ^TGTokenValue;

  PPGScannerMsgFunc = ^PGScannerMsgFunc;
  PGScannerMsgFunc = ^TGScannerMsgFunc;
  TGScanner = object
    user_data: gpointer;
    max_parse_errors: guint;
    parse_errors: guint;
    input_name: Pgchar;
    qdata: PGData;
    config: PGScannerConfig;
    token: TGTokenType;
    value: TGTokenValue;
    line: guint;
    position: guint;
    next_token: TGTokenType;
    next_value: TGTokenValue;
    next_line: guint;
    next_position: guint;
    symbol_table: PGHashTable;
    input_fd: gint;
    text: Pgchar;
    text_end: Pgchar;
    buffer: Pgchar;
    scope_id: guint;
    msg_handler: TGScannerMsgFunc;
  end;

  PPGSequenceIter = ^PGSequenceIter;
  PGSequenceIter = ^TGSequenceIter;

  PPGSequence = ^PGSequence;
  PGSequence = ^TGSequence;
  TGSequenceIter = object
  end;

  PPGSequenceIterCompareFunc = ^PGSequenceIterCompareFunc;
  PGSequenceIterCompareFunc = ^TGSequenceIterCompareFunc;
  TGSequenceIterCompareFunc = function(a: PGSequenceIter; b: PGSequenceIter; data: gpointer): gint; cdecl;
  TGSequence = object
  end;

  PPGShellError = ^PGShellError;
  PGShellError = ^TGShellError;

  PPGSliceConfig = ^PGSliceConfig;
  PGSliceConfig = ^TGSliceConfig;

  TGSourceCallbackFuncs = record
    ref: procedure(cb_data: gpointer); cdecl;
    unref: procedure(cb_data: gpointer); cdecl;
    get: procedure(cb_data: gpointer; source: PGSource; func: PGSourceFunc; data: Pgpointer); cdecl;
  end;



  TGSourcePrivate = record
  end;


  TGSpawnChildSetupFunc = procedure(user_data: gpointer); cdecl;

  PPGSpawnError = ^PGSpawnError;
  PGSpawnError = ^TGSpawnError;

  PPGSpawnFlags = ^PGSpawnFlags;
  PGSpawnFlags = ^TGSpawnFlags;

  PPGStatBuf = ^PGStatBuf;
  PGStatBuf = ^TGStatBuf;

  TGStatBuf = record
  end;



  PPGStringChunk = ^PGStringChunk;
  PGStringChunk = ^TGStringChunk;
  TGStringChunk = object
  end;

  PPGTestCase = ^PGTestCase;
  PGTestCase = ^TGTestCase;

  TGTestCase = record
  end;



  PPGTestConfig = ^PGTestConfig;
  PGTestConfig = ^TGTestConfig;

  TGTestConfig = record
    test_initialized: gboolean;
    test_quick: gboolean;
    test_perf: gboolean;
    test_verbose: gboolean;
    test_quiet: gboolean;
    test_undefined: gboolean;
  end;


  TGTestDataFunc = procedure(user_data: Pgpointer); cdecl;
  TGTestFixtureFunc = procedure(fixture: gpointer; user_data: Pgpointer); cdecl;
  TGTestFunc = procedure; cdecl;

  PPGTestLogBuffer = ^PGTestLogBuffer;
  PGTestLogBuffer = ^TGTestLogBuffer;

  PPGTestLogMsg = ^PGTestLogMsg;
  PGTestLogMsg = ^TGTestLogMsg;
  TGTestLogBuffer = object
    data: PGString;
    msgs: PGSList;
  end;

  PPGTestLogType = ^PGTestLogType;
  PGTestLogType = ^TGTestLogType;
  TGTestLogMsg = object
    log_type: TGTestLogType;
    n_strings: guint;
    strings: PPgchar;
    n_nums: guint;
    nums: Pglong;
  end;
  TGTestLogFatalFunc = function(log_domain: Pgchar; log_level: TGLogLevelFlags; message: Pgchar; user_data: gpointer): gboolean; cdecl;

  PPGTestSuite = ^PGTestSuite;
  PGTestSuite = ^TGTestSuite;
  TGTestSuite = object
  end;

  PPGTestTrapFlags = ^PGTestTrapFlags;
  PGTestTrapFlags = ^TGTestTrapFlags;

  PPGThread = ^PGThread;
  PGThread = ^TGThread;
  TGThread = object
  end;

  PPGThreadError = ^PGThreadError;
  PGThreadError = ^TGThreadError;

  PPGThreadPool = ^PGThreadPool;
  PGThreadPool = ^TGThreadPool;
  TGThreadPool = object
    func: TGFunc;
    user_data: gpointer;
    exclusive: gboolean;
  end;

  PPGTimer = ^PGTimer;
  PGTimer = ^TGTimer;
  TGTimer = object
  end;

  PPGTrashStack = ^PGTrashStack;
  PGTrashStack = ^TGTrashStack;
  TGTrashStack = object
    next: PGTrashStack;
  end;
  TGTraverseFunc = function(key: gpointer; value: gpointer; data: gpointer): gboolean; cdecl;

  PPGTree = ^PGTree;
  PGTree = ^TGTree;

  PPGTraverseFunc = ^PGTraverseFunc;
  PGTraverseFunc = ^TGTraverseFunc;
  TGTree = object
  end;

  PPGUnicodeBreakType = ^PGUnicodeBreakType;
  PGUnicodeBreakType = ^TGUnicodeBreakType;

  PPGUnicodeScript = ^PGUnicodeScript;
  PGUnicodeScript = ^TGUnicodeScript;

  PPGUnicodeType = ^PGUnicodeType;
  PGUnicodeType = ^TGUnicodeType;
  TGUnixFDSourceFunc = function(fd: gint; condition: TGIOCondition; user_data: gpointer): gboolean; cdecl;

  PPGUserDirectory = ^PGUserDirectory;
  PGUserDirectory = ^TGUserDirectory;

  PPGVariant = ^PGVariant;
  PGVariant = ^TGVariant;

  PPGVariantType = ^PGVariantType;
  PGVariantType = ^TGVariantType;

  PPPgint16 = ^PPgint16;
  PPgint16 = ^Pgint16;
  Pgint16 = ^gint16;

  PPPguint16 = ^PPguint16;
  PPguint16 = ^Pguint16;
  Pguint16 = ^guint16;

  PPGVariantClass = ^PGVariantClass;
  PGVariantClass = ^TGVariantClass;

  PPGVariantIter = ^PGVariantIter;
  PGVariantIter = ^TGVariantIter;
  TGVariant = object
  end;
  TGVariantType = object
  end;
  TGVariantIter = object
    x: array [0..15] of gsize;
  end;

  PPGVariantBuilder = ^PGVariantBuilder;
  PGVariantBuilder = ^TGVariantBuilder;
  TGVariantBuilder = object
    x: array [0..15] of gsize;
  end;

  PPGVariantParseError = ^PGVariantParseError;
  PGVariantParseError = ^TGVariantParseError;
  TGVoidFunc = procedure; cdecl;

var
g_access: function(filename: Pgchar; mode: gint): gint; cdecl;
g_array_append_vals: function(array_: Pgpointer; data: Pgpointer; len: guint): Pgpointer; cdecl;
g_array_free: function(array_: Pgpointer; free_segment: gboolean): Pgchar; cdecl;
g_array_get_element_size: function(array_: Pgpointer): guint; cdecl;
g_array_get_type: function:TGType; cdecl;
g_array_insert_vals: function(array_: Pgpointer; index_: guint; data: Pgpointer; len: guint): Pgpointer; cdecl;
g_array_new: function(zero_terminated: gboolean; clear_: gboolean; element_size: guint): Pgpointer; cdecl;
g_array_prepend_vals: function(array_: Pgpointer; data: Pgpointer; len: guint): Pgpointer; cdecl;
g_array_ref: function(array_: Pgpointer): Pgpointer; cdecl;
g_array_remove_index: function(array_: Pgpointer; index_: guint): Pgpointer; cdecl;
g_array_remove_index_fast: function(array_: Pgpointer; index_: guint): Pgpointer; cdecl;
g_array_remove_range: function(array_: Pgpointer; index_: guint; length: guint): Pgpointer; cdecl;
g_array_set_clear_func: procedure(array_: Pgpointer; clear_func: TGDestroyNotify); cdecl;
g_array_set_size: function(array_: Pgpointer; length: guint): Pgpointer; cdecl;
g_array_sized_new: function(zero_terminated: gboolean; clear_: gboolean; element_size: guint; reserved_size: guint): Pgpointer; cdecl;
g_array_sort: procedure(array_: Pgpointer; compare_func: TGCompareFunc); cdecl;
g_array_sort_with_data: procedure(array_: Pgpointer; compare_func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_array_unref: procedure(array_: Pgpointer); cdecl;
g_ascii_digit_value: function(c: gchar): gint; cdecl;
g_ascii_dtostr: function(buffer: Pgchar; buf_len: gint; d: gdouble): Pgchar; cdecl;
g_ascii_formatd: function(buffer: Pgchar; buf_len: gint; format: Pgchar; d: gdouble): Pgchar; cdecl;
g_ascii_strcasecmp: function(s1: Pgchar; s2: Pgchar): gint; cdecl;
g_ascii_strdown: function(str: Pgchar; len: gssize): Pgchar; cdecl;
g_ascii_strncasecmp: function(s1: Pgchar; s2: Pgchar; n: gsize): gint; cdecl;
g_ascii_strtod: function(nptr: Pgchar; endptr: PPgchar): gdouble; cdecl;
g_ascii_strtoll: function(nptr: Pgchar; endptr: PPgchar; base: guint): gint64; cdecl;
g_ascii_strtoull: function(nptr: Pgchar; endptr: PPgchar; base: guint): guint64; cdecl;
g_ascii_strup: function(str: Pgchar; len: gssize): Pgchar; cdecl;
g_ascii_tolower: function(c: gchar): gchar; cdecl;
g_ascii_toupper: function(c: gchar): gchar; cdecl;
g_ascii_xdigit_value: function(c: gchar): gint; cdecl;
g_assert_warning: procedure(log_domain: Pgchar; file_: Pgchar; line: gint; pretty_function: Pgchar; expression: Pgchar); cdecl;
g_assertion_message: procedure(domain: Pgchar; file_: Pgchar; line: gint; func: Pgchar; message: Pgchar); cdecl;
g_assertion_message_cmpnum: procedure(domain: Pgchar; file_: Pgchar; line: gint; func: Pgchar; expr: Pgchar; arg1: long_double; cmp: Pgchar; arg2: long_double; numtype: gchar); cdecl;
g_assertion_message_cmpstr: procedure(domain: Pgchar; file_: Pgchar; line: gint; func: Pgchar; expr: Pgchar; arg1: Pgchar; cmp: Pgchar; arg2: Pgchar); cdecl;
g_assertion_message_error: procedure(domain: Pgchar; file_: Pgchar; line: gint; func: Pgchar; expr: Pgchar; error: PGError; error_domain: TGQuark; error_code: gint); cdecl;
g_assertion_message_expr: procedure(domain: Pgchar; file_: Pgchar; line: gint; func: Pgchar; expr: Pgchar); cdecl;
g_async_queue_length: function(queue: PGAsyncQueue): gint; cdecl;
g_async_queue_length_unlocked: function(queue: PGAsyncQueue): gint; cdecl;
g_async_queue_lock: procedure(queue: PGAsyncQueue); cdecl;
g_async_queue_new: function: PGAsyncQueue; cdecl;
g_async_queue_new_full: function(item_free_func: TGDestroyNotify): PGAsyncQueue; cdecl;
g_async_queue_pop: function(queue: PGAsyncQueue): gpointer; cdecl;
g_async_queue_pop_unlocked: function(queue: PGAsyncQueue): gpointer; cdecl;
g_async_queue_push: procedure(queue: PGAsyncQueue; data: gpointer); cdecl;
g_async_queue_push_sorted: procedure(queue: PGAsyncQueue; data: gpointer; func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_async_queue_push_sorted_unlocked: procedure(queue: PGAsyncQueue; data: gpointer; func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_async_queue_push_unlocked: procedure(queue: PGAsyncQueue; data: gpointer); cdecl;
g_async_queue_ref: function(queue: PGAsyncQueue): PGAsyncQueue; cdecl;
g_async_queue_sort: procedure(queue: PGAsyncQueue; func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_async_queue_sort_unlocked: procedure(queue: PGAsyncQueue; func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_async_queue_timeout_pop: function(queue: PGAsyncQueue; timeout: guint64): gpointer; cdecl;
g_async_queue_timeout_pop_unlocked: function(queue: PGAsyncQueue; timeout: guint64): gpointer; cdecl;
g_async_queue_try_pop: function(queue: PGAsyncQueue): gpointer; cdecl;
g_async_queue_try_pop_unlocked: function(queue: PGAsyncQueue): gpointer; cdecl;
g_async_queue_unlock: procedure(queue: PGAsyncQueue); cdecl;
g_async_queue_unref: procedure(queue: PGAsyncQueue); cdecl;
g_atexit: procedure(func: TGVoidFunc); cdecl;
g_atomic_int_add: function(atomic: Pgint; val: gint): gint; cdecl;
g_atomic_int_and: function(atomic: Pguint; val: guint): guint; cdecl;
g_atomic_int_compare_and_exchange: function(atomic: Pgint; oldval: gint; newval: gint): gboolean; cdecl;
g_atomic_int_dec_and_test: function(atomic: Pgint): gboolean; cdecl;
g_atomic_int_exchange_and_add: function(atomic: Pgint; val: gint): gint; cdecl;
g_atomic_int_get: function(atomic: Pgint): gint; cdecl;
g_atomic_int_inc: procedure(atomic: Pgint); cdecl;
g_atomic_int_or: function(atomic: Pguint; val: guint): guint; cdecl;
g_atomic_int_set: procedure(atomic: Pgint; newval: gint); cdecl;
g_atomic_int_xor: function(atomic: Pguint; val: guint): guint; cdecl;
g_atomic_pointer_add: function(atomic: Pgpointer; val: gssize): gssize; cdecl;
g_atomic_pointer_and: function(atomic: Pgpointer; val: gsize): gsize; cdecl;
g_atomic_pointer_compare_and_exchange: function(atomic: Pgpointer; oldval: gpointer; newval: gpointer): gboolean; cdecl;
g_atomic_pointer_get: function(atomic: Pgpointer): gpointer; cdecl;
g_atomic_pointer_or: function(atomic: Pgpointer; val: gsize): gsize; cdecl;
g_atomic_pointer_set: procedure(atomic: Pgpointer; newval: gpointer); cdecl;
g_atomic_pointer_xor: function(atomic: Pgpointer; val: gsize): gsize; cdecl;
g_base64_decode: function(text: Pgchar; out_len: Pgsize): Pguint8; cdecl;
g_base64_decode_inplace: function(text: Pgchar; out_len: Pgsize): Pguint8; cdecl;
g_base64_decode_step: function(in_: Pgchar; len: gsize; out_: Pguint8; state: Pgint; save: Pguint): gsize; cdecl;
g_base64_encode: function(data: Pguint8; len: gsize): Pgchar; cdecl;
g_base64_encode_close: function(break_lines: gboolean; out_: Pgchar; state: Pgint; save: Pgint): gsize; cdecl;
g_base64_encode_step: function(in_: Pguint8; len: gsize; break_lines: gboolean; out_: Pgchar; state: Pgint; save: Pgint): gsize; cdecl;
g_basename: function(file_name: Pgchar): Pgchar; cdecl;
g_bit_lock: procedure(address: Pgint; lock_bit: gint); cdecl;
g_bit_nth_lsf: function(mask: gulong; nth_bit: gint): gint; cdecl;
g_bit_nth_msf: function(mask: gulong; nth_bit: gint): gint; cdecl;
g_bit_storage: function(number: gulong): guint; cdecl;
g_bit_trylock: function(address: Pgint; lock_bit: gint): gboolean; cdecl;
g_bit_unlock: procedure(address: Pgint; lock_bit: gint); cdecl;
g_bookmark_file_add_application: procedure(bookmark: PGBookmarkFile; uri: Pgchar; name: Pgchar; exec: Pgchar); cdecl;
g_bookmark_file_add_group: procedure(bookmark: PGBookmarkFile; uri: Pgchar; group: Pgchar); cdecl;
g_bookmark_file_error_quark: function: TGQuark; cdecl;
g_bookmark_file_free: procedure(bookmark: PGBookmarkFile); cdecl;
g_bookmark_file_get_added: function(bookmark: PGBookmarkFile; uri: Pgchar; error: PPGError): glong; cdecl;
g_bookmark_file_get_app_info: function(bookmark: PGBookmarkFile; uri: Pgchar; name: Pgchar; exec: PPgchar; count: Pguint; stamp: Pglong; error: PPGError): gboolean; cdecl;
g_bookmark_file_get_applications: function(bookmark: PGBookmarkFile; uri: Pgchar; length: Pgsize; error: PPGError): PPgchar; cdecl;
g_bookmark_file_get_description: function(bookmark: PGBookmarkFile; uri: Pgchar; error: PPGError): Pgchar; cdecl;
g_bookmark_file_get_groups: function(bookmark: PGBookmarkFile; uri: Pgchar; length: Pgsize; error: PPGError): PPgchar; cdecl;
g_bookmark_file_get_icon: function(bookmark: PGBookmarkFile; uri: Pgchar; href: PPgchar; mime_type: PPgchar; error: PPGError): gboolean; cdecl;
g_bookmark_file_get_is_private: function(bookmark: PGBookmarkFile; uri: Pgchar; error: PPGError): gboolean; cdecl;
g_bookmark_file_get_mime_type: function(bookmark: PGBookmarkFile; uri: Pgchar; error: PPGError): Pgchar; cdecl;
g_bookmark_file_get_modified: function(bookmark: PGBookmarkFile; uri: Pgchar; error: PPGError): glong; cdecl;
g_bookmark_file_get_size: function(bookmark: PGBookmarkFile): gint; cdecl;
g_bookmark_file_get_title: function(bookmark: PGBookmarkFile; uri: Pgchar; error: PPGError): Pgchar; cdecl;
g_bookmark_file_get_uris: function(bookmark: PGBookmarkFile; length: Pgsize): PPgchar; cdecl;
g_bookmark_file_get_visited: function(bookmark: PGBookmarkFile; uri: Pgchar; error: PPGError): glong; cdecl;
g_bookmark_file_has_application: function(bookmark: PGBookmarkFile; uri: Pgchar; name: Pgchar; error: PPGError): gboolean; cdecl;
g_bookmark_file_has_group: function(bookmark: PGBookmarkFile; uri: Pgchar; group: Pgchar; error: PPGError): gboolean; cdecl;
g_bookmark_file_has_item: function(bookmark: PGBookmarkFile; uri: Pgchar): gboolean; cdecl;
g_bookmark_file_load_from_data: function(bookmark: PGBookmarkFile; data: Pgchar; length: gsize; error: PPGError): gboolean; cdecl;
g_bookmark_file_load_from_data_dirs: function(bookmark: PGBookmarkFile; file_: Pgchar; full_path: PPgchar; error: PPGError): gboolean; cdecl;
g_bookmark_file_load_from_file: function(bookmark: PGBookmarkFile; filename: Pgchar; error: PPGError): gboolean; cdecl;
g_bookmark_file_move_item: function(bookmark: PGBookmarkFile; old_uri: Pgchar; new_uri: Pgchar; error: PPGError): gboolean; cdecl;
g_bookmark_file_new: function: PGBookmarkFile; cdecl;
g_bookmark_file_remove_application: function(bookmark: PGBookmarkFile; uri: Pgchar; name: Pgchar; error: PPGError): gboolean; cdecl;
g_bookmark_file_remove_group: function(bookmark: PGBookmarkFile; uri: Pgchar; group: Pgchar; error: PPGError): gboolean; cdecl;
g_bookmark_file_remove_item: function(bookmark: PGBookmarkFile; uri: Pgchar; error: PPGError): gboolean; cdecl;
g_bookmark_file_set_added: procedure(bookmark: PGBookmarkFile; uri: Pgchar; added: glong); cdecl;
g_bookmark_file_set_app_info: function(bookmark: PGBookmarkFile; uri: Pgchar; name: Pgchar; exec: Pgchar; count: gint; stamp: glong; error: PPGError): gboolean; cdecl;
g_bookmark_file_set_description: procedure(bookmark: PGBookmarkFile; uri: Pgchar; description: Pgchar); cdecl;
g_bookmark_file_set_groups: procedure(bookmark: PGBookmarkFile; uri: Pgchar; groups: PPgchar; length: gsize); cdecl;
g_bookmark_file_set_icon: procedure(bookmark: PGBookmarkFile; uri: Pgchar; href: Pgchar; mime_type: Pgchar); cdecl;
g_bookmark_file_set_is_private: procedure(bookmark: PGBookmarkFile; uri: Pgchar; is_private: gboolean); cdecl;
g_bookmark_file_set_mime_type: procedure(bookmark: PGBookmarkFile; uri: Pgchar; mime_type: Pgchar); cdecl;
g_bookmark_file_set_modified: procedure(bookmark: PGBookmarkFile; uri: Pgchar; modified: glong); cdecl;
g_bookmark_file_set_title: procedure(bookmark: PGBookmarkFile; uri: Pgchar; title: Pgchar); cdecl;
g_bookmark_file_set_visited: procedure(bookmark: PGBookmarkFile; uri: Pgchar; visited: glong); cdecl;
g_bookmark_file_to_data: function(bookmark: PGBookmarkFile; length: Pgsize; error: PPGError): Pgchar; cdecl;
g_bookmark_file_to_file: function(bookmark: PGBookmarkFile; filename: Pgchar; error: PPGError): gboolean; cdecl;
g_build_filename: function(first_element: Pgchar; args: array of const): Pgchar; cdecl;
g_build_filenamev: function(args: PPgchar): Pgchar; cdecl;
g_build_path: function(separator: Pgchar; first_element: Pgchar; args: array of const): Pgchar; cdecl;
g_build_pathv: function(separator: Pgchar; args: PPgchar): Pgchar; cdecl;
g_byte_array_append: function(array_: Pguint8; data: Pguint8; len: guint): Pguint8; cdecl;
g_byte_array_free: function(array_: Pguint8; free_segment: gboolean): Pguint8; cdecl;
g_byte_array_free_to_bytes: function(array_: Pguint8): PGBytes; cdecl;
g_byte_array_get_type: function:TGType; cdecl;
g_byte_array_new: function: Pguint8; cdecl;
g_byte_array_new_take: function(data: Pguint8; len: gsize): Pguint8; cdecl;
g_byte_array_prepend: function(array_: Pguint8; data: Pguint8; len: guint): Pguint8; cdecl;
g_byte_array_ref: function(array_: Pguint8): Pguint8; cdecl;
g_byte_array_remove_index: function(array_: Pguint8; index_: guint): Pguint8; cdecl;
g_byte_array_remove_index_fast: function(array_: Pguint8; index_: guint): Pguint8; cdecl;
g_byte_array_remove_range: function(array_: Pguint8; index_: guint; length: guint): Pguint8; cdecl;
g_byte_array_set_size: function(array_: Pguint8; length: guint): Pguint8; cdecl;
g_byte_array_sized_new: function(reserved_size: guint): Pguint8; cdecl;
g_byte_array_sort: procedure(array_: Pguint8; compare_func: TGCompareFunc); cdecl;
g_byte_array_sort_with_data: procedure(array_: Pguint8; compare_func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_byte_array_unref: procedure(array_: Pguint8); cdecl;
g_bytes_compare: function(bytes1: PGBytes; bytes2: PGBytes): gint; cdecl;
g_bytes_equal: function(bytes1: PGBytes; bytes2: PGBytes): gboolean; cdecl;
g_bytes_get_data: function(bytes: PGBytes; size: Pgsize): guint8; cdecl;
g_bytes_get_size: function(bytes: PGBytes): gsize; cdecl;
g_bytes_get_type: function:TGType; cdecl;
g_bytes_hash: function(bytes: PGBytes): guint; cdecl;
g_bytes_new: function(data: guint8; size: gsize): PGBytes; cdecl;
g_bytes_new_from_bytes: function(bytes: PGBytes; offset: gsize; length: gsize): PGBytes; cdecl;
g_bytes_new_static: function(data: guint8; size: gsize): PGBytes; cdecl;
g_bytes_new_take: function(data: guint8; size: gsize): PGBytes; cdecl;
g_bytes_new_with_free_func: function(data: gpointer; size: gsize; free_func: TGDestroyNotify; user_data: gpointer): PGBytes; cdecl;
g_bytes_ref: function(bytes: PGBytes): PGBytes; cdecl;
g_bytes_unref: procedure(bytes: PGBytes); cdecl;
g_bytes_unref_to_array: function(bytes: PGBytes): Pguint8; cdecl;
g_bytes_unref_to_data: function(bytes: PGBytes; size: Pgsize): gpointer; cdecl;
g_chdir: function(path: Pgchar): gint; cdecl;
g_checksum_copy: function(checksum: PGChecksum): PGChecksum; cdecl;
g_checksum_free: procedure(checksum: PGChecksum); cdecl;
g_checksum_get_digest: procedure(checksum: PGChecksum; buffer: Pguint8; digest_len: Pgsize); cdecl;
g_checksum_get_string: function(checksum: PGChecksum): Pgchar; cdecl;
g_checksum_get_type: function:TGType; cdecl;
g_checksum_new: function(checksum_type: TGChecksumType): PGChecksum; cdecl;
g_checksum_reset: procedure(checksum: PGChecksum); cdecl;
g_checksum_type_get_length: function(checksum_type: TGChecksumType): gssize; cdecl;
g_checksum_update: procedure(checksum: PGChecksum; data: Pguint8; length: gssize); cdecl;
g_child_watch_add: function(pid: TGPid; function_: TGChildWatchFunc; data: gpointer): guint; cdecl;
g_child_watch_add_full: function(priority: gint; pid: TGPid; function_: TGChildWatchFunc; data: gpointer; notify: TGDestroyNotify): guint; cdecl;
g_child_watch_source_new: function(pid: TGPid): PGSource; cdecl;
g_clear_error: procedure; cdecl;
g_clear_pointer: procedure(pp: Pgpointer; destroy_: TGDestroyNotify); cdecl;
g_close: function(fd: gint; error: PPGError): gboolean; cdecl;
g_compute_checksum_for_bytes: function(checksum_type: TGChecksumType; data: PGBytes): Pgchar; cdecl;
g_compute_checksum_for_data: function(checksum_type: TGChecksumType; data: Pguint8; length: gsize): Pgchar; cdecl;
g_compute_checksum_for_string: function(checksum_type: TGChecksumType; str: Pgchar; length: gssize): Pgchar; cdecl;
g_compute_hmac_for_data: function(digest_type: TGChecksumType; key: Pguint8; key_len: gsize; data: Pguint8; length: gsize): Pgchar; cdecl;
g_compute_hmac_for_string: function(digest_type: TGChecksumType; key: Pguint8; key_len: gsize; str: Pgchar; length: gssize): Pgchar; cdecl;
g_cond_broadcast: procedure(cond: PGCond); cdecl;
g_cond_clear: procedure(cond: PGCond); cdecl;
g_cond_init: procedure(cond: PGCond); cdecl;
g_cond_signal: procedure(cond: PGCond); cdecl;
g_cond_wait: procedure(cond: PGCond; mutex: PGMutex); cdecl;
g_cond_wait_until: function(cond: PGCond; mutex: PGMutex; end_time: gint64): gboolean; cdecl;
g_convert: function(str: Pgchar; len: gssize; to_codeset: Pgchar; from_codeset: Pgchar; bytes_read: Pgsize; bytes_written: Pgsize; error: PPGError): Pgchar; cdecl;
g_convert_error_quark: function: TGQuark; cdecl;
g_convert_with_fallback: function(str: Pgchar; len: gssize; to_codeset: Pgchar; from_codeset: Pgchar; fallback: Pgchar; bytes_read: Pgsize; bytes_written: Pgsize; error: PPGError): Pgchar; cdecl;
g_convert_with_iconv: function(str: Pgchar; len: gssize; converter: TGIConv; bytes_read: Pgsize; bytes_written: Pgsize; error: PPGError): Pgchar; cdecl;
g_datalist_clear: procedure(datalist: PPGData); cdecl;
g_datalist_foreach: procedure(datalist: PPGData; func: TGDataForeachFunc; user_data: gpointer); cdecl;
g_datalist_get_data: function(datalist: PPGData; key: Pgchar): gpointer; cdecl;
g_datalist_get_flags: function(datalist: PPGData): guint; cdecl;
g_datalist_id_dup_data: function(datalist: PPGData; key_id: TGQuark; dup_func: TGDuplicateFunc; user_data: gpointer): gpointer; cdecl;
g_datalist_id_get_data: function(datalist: PPGData; key_id: TGQuark): gpointer; cdecl;
g_datalist_id_remove_no_notify: function(datalist: PPGData; key_id: TGQuark): gpointer; cdecl;
g_datalist_id_replace_data: function(datalist: PPGData; key_id: TGQuark; oldval: gpointer; newval: gpointer; destroy_: TGDestroyNotify; old_destroy: PGDestroyNotify): gboolean; cdecl;
g_datalist_id_set_data_full: procedure(datalist: PPGData; key_id: TGQuark; data: gpointer; destroy_func: TGDestroyNotify); cdecl;
g_datalist_init: procedure(datalist: PPGData); cdecl;
g_datalist_set_flags: procedure(datalist: PPGData; flags: guint); cdecl;
g_datalist_unset_flags: procedure(datalist: PPGData; flags: guint); cdecl;
g_dataset_destroy: procedure(dataset_location: Pgpointer); cdecl;
g_dataset_foreach: procedure(dataset_location: Pgpointer; func: TGDataForeachFunc; user_data: gpointer); cdecl;
g_dataset_id_get_data: function(dataset_location: Pgpointer; key_id: TGQuark): gpointer; cdecl;
g_dataset_id_remove_no_notify: function(dataset_location: Pgpointer; key_id: TGQuark): gpointer; cdecl;
g_dataset_id_set_data_full: procedure(dataset_location: Pgpointer; key_id: TGQuark; data: gpointer; destroy_func: TGDestroyNotify); cdecl;
g_date_add_days: procedure(date: PGDate; n_days: guint); cdecl;
g_date_add_months: procedure(date: PGDate; n_months: guint); cdecl;
g_date_add_years: procedure(date: PGDate; n_years: guint); cdecl;
g_date_clamp: procedure(date: PGDate; min_date: PGDate; max_date: PGDate); cdecl;
g_date_clear: procedure(date: PGDate; n_dates: guint); cdecl;
g_date_compare: function(lhs: PGDate; rhs: PGDate): gint; cdecl;
g_date_days_between: function(date1: PGDate; date2: PGDate): gint; cdecl;
g_date_free: procedure(date: PGDate); cdecl;
g_date_get_day: function(date: PGDate): TGDateDay; cdecl;
g_date_get_day_of_year: function(date: PGDate): guint; cdecl;
g_date_get_days_in_month: function(month: TGDateMonth; year: TGDateYear): guint8; cdecl;
g_date_get_iso8601_week_of_year: function(date: PGDate): guint; cdecl;
g_date_get_julian: function(date: PGDate): guint32; cdecl;
g_date_get_monday_week_of_year: function(date: PGDate): guint; cdecl;
g_date_get_monday_weeks_in_year: function(year: TGDateYear): guint8; cdecl;
g_date_get_month: function(date: PGDate): TGDateMonth; cdecl;
g_date_get_sunday_week_of_year: function(date: PGDate): guint; cdecl;
g_date_get_sunday_weeks_in_year: function(year: TGDateYear): guint8; cdecl;
g_date_get_type: function:TGType; cdecl;
g_date_get_weekday: function(date: PGDate): TGDateWeekday; cdecl;
g_date_get_year: function(date: PGDate): TGDateYear; cdecl;
g_date_is_first_of_month: function(date: PGDate): gboolean; cdecl;
g_date_is_last_of_month: function(date: PGDate): gboolean; cdecl;
g_date_is_leap_year: function(year: TGDateYear): gboolean; cdecl;
g_date_new: function: PGDate; cdecl;
g_date_new_dmy: function(day: TGDateDay; month: TGDateMonth; year: TGDateYear): PGDate; cdecl;
g_date_new_julian: function(julian_day: guint32): PGDate; cdecl;
g_date_order: procedure(date1: PGDate; date2: PGDate); cdecl;
g_date_set_day: procedure(date: PGDate; day: TGDateDay); cdecl;
g_date_set_dmy: procedure(date: PGDate; day: TGDateDay; month: TGDateMonth; y: TGDateYear); cdecl;
g_date_set_julian: procedure(date: PGDate; julian_date: guint32); cdecl;
g_date_set_month: procedure(date: PGDate; month: TGDateMonth); cdecl;
g_date_set_parse: procedure(date: PGDate; str: Pgchar); cdecl;
g_date_set_time_t: procedure(date: PGDate; timet: glong); cdecl;
g_date_set_time_val: procedure(date: PGDate; timeval: PGTimeVal); cdecl;
g_date_set_year: procedure(date: PGDate; year: TGDateYear); cdecl;
g_date_strftime: function(s: Pgchar; slen: gsize; format: Pgchar; date: PGDate): gsize; cdecl;
g_date_subtract_days: procedure(date: PGDate; n_days: guint); cdecl;
g_date_subtract_months: procedure(date: PGDate; n_months: guint); cdecl;
g_date_subtract_years: procedure(date: PGDate; n_years: guint); cdecl;
g_date_time_add: function(datetime: PGDateTime; timespan: TGTimeSpan): PGDateTime; cdecl;
g_date_time_add_days: function(datetime: PGDateTime; days: gint): PGDateTime; cdecl;
g_date_time_add_full: function(datetime: PGDateTime; years: gint; months: gint; days: gint; hours: gint; minutes: gint; seconds: gdouble): PGDateTime; cdecl;
g_date_time_add_hours: function(datetime: PGDateTime; hours: gint): PGDateTime; cdecl;
g_date_time_add_minutes: function(datetime: PGDateTime; minutes: gint): PGDateTime; cdecl;
g_date_time_add_months: function(datetime: PGDateTime; months: gint): PGDateTime; cdecl;
g_date_time_add_seconds: function(datetime: PGDateTime; seconds: gdouble): PGDateTime; cdecl;
g_date_time_add_weeks: function(datetime: PGDateTime; weeks: gint): PGDateTime; cdecl;
g_date_time_add_years: function(datetime: PGDateTime; years: gint): PGDateTime; cdecl;
g_date_time_compare: function(dt1: Pgpointer; dt2: Pgpointer): gint; cdecl;
g_date_time_difference: function(end_: PGDateTime; begin_: PGDateTime): TGTimeSpan; cdecl;
g_date_time_equal: function(dt1: Pgpointer; dt2: Pgpointer): gboolean; cdecl;
g_date_time_format: function(datetime: PGDateTime; format: Pgchar): Pgchar; cdecl;
g_date_time_get_day_of_month: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_day_of_week: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_day_of_year: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_hour: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_microsecond: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_minute: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_month: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_second: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_seconds: function(datetime: PGDateTime): gdouble; cdecl;
g_date_time_get_timezone_abbreviation: function(datetime: PGDateTime): Pgchar; cdecl;
g_date_time_get_type: function:TGType; cdecl;
g_date_time_get_utc_offset: function(datetime: PGDateTime): TGTimeSpan; cdecl;
g_date_time_get_week_numbering_year: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_week_of_year: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_year: function(datetime: PGDateTime): gint; cdecl;
g_date_time_get_ymd: procedure(datetime: PGDateTime; year: Pgint; month: Pgint; day: Pgint); cdecl;
g_date_time_hash: function(datetime: Pgpointer): guint; cdecl;
g_date_time_is_daylight_savings: function(datetime: PGDateTime): gboolean; cdecl;
g_date_time_new: function(tz: PGTimeZone; year: gint; month: gint; day: gint; hour: gint; minute: gint; seconds: gdouble): PGDateTime; cdecl;
g_date_time_new_from_timeval_local: function(tv: PGTimeVal): PGDateTime; cdecl;
g_date_time_new_from_timeval_utc: function(tv: PGTimeVal): PGDateTime; cdecl;
g_date_time_new_from_unix_local: function(t: gint64): PGDateTime; cdecl;
g_date_time_new_from_unix_utc: function(t: gint64): PGDateTime; cdecl;
g_date_time_new_local: function(year: gint; month: gint; day: gint; hour: gint; minute: gint; seconds: gdouble): PGDateTime; cdecl;
g_date_time_new_now: function(tz: PGTimeZone): PGDateTime; cdecl;
g_date_time_new_now_local: function: PGDateTime; cdecl;
g_date_time_new_now_utc: function: PGDateTime; cdecl;
g_date_time_new_utc: function(year: gint; month: gint; day: gint; hour: gint; minute: gint; seconds: gdouble): PGDateTime; cdecl;
g_date_time_ref: function(datetime: PGDateTime): PGDateTime; cdecl;
g_date_time_to_local: function(datetime: PGDateTime): PGDateTime; cdecl;
g_date_time_to_timeval: function(datetime: PGDateTime; tv: PGTimeVal): gboolean; cdecl;
g_date_time_to_timezone: function(datetime: PGDateTime; tz: PGTimeZone): PGDateTime; cdecl;
g_date_time_to_unix: function(datetime: PGDateTime): gint64; cdecl;
g_date_time_to_utc: function(datetime: PGDateTime): PGDateTime; cdecl;
g_date_time_unref: procedure(datetime: PGDateTime); cdecl;
g_date_to_struct_tm: procedure(date: PGDate; tm: Pgpointer); cdecl;
g_date_valid: function(date: PGDate): gboolean; cdecl;
g_date_valid_day: function(day: TGDateDay): gboolean; cdecl;
g_date_valid_dmy: function(day: TGDateDay; month: TGDateMonth; year: TGDateYear): gboolean; cdecl;
g_date_valid_julian: function(julian_date: guint32): gboolean; cdecl;
g_date_valid_month: function(month: TGDateMonth): gboolean; cdecl;
g_date_valid_weekday: function(weekday: TGDateWeekday): gboolean; cdecl;
g_date_valid_year: function(year: TGDateYear): gboolean; cdecl;
g_dcgettext: function(domain: Pgchar; msgid: Pgchar; category: gint): Pgchar; cdecl;
g_dgettext: function(domain: Pgchar; msgid: Pgchar): Pgchar; cdecl;
g_dir_close: procedure(dir: PGDir); cdecl;
g_dir_make_tmp: function(tmpl: Pgchar; error: PPGError): Pgchar; cdecl;
g_dir_open: function(path: Pgchar; flags: guint; error: PPGError): PGDir; cdecl;
g_dir_read_name: function(dir: PGDir): Pgchar; cdecl;
g_dir_rewind: procedure(dir: PGDir); cdecl;
g_direct_equal: function(v1: Pgpointer; v2: Pgpointer): gboolean; cdecl;
g_direct_hash: function(v: Pgpointer): guint; cdecl;
g_dngettext: function(domain: Pgchar; msgid: Pgchar; msgid_plural: Pgchar; n: gulong): Pgchar; cdecl;
g_double_equal: function(v1: Pgpointer; v2: Pgpointer): gboolean; cdecl;
g_double_hash: function(v: Pgpointer): guint; cdecl;
g_dpgettext2: function(domain: Pgchar; context: Pgchar; msgid: Pgchar): Pgchar; cdecl;
g_dpgettext: function(domain: Pgchar; msgctxtid: Pgchar; msgidoffset: gsize): Pgchar; cdecl;
g_environ_getenv: function(envp: PPgchar; variable: Pgchar): Pgchar; cdecl;
g_environ_setenv: function(envp: PPgchar; variable: Pgchar; value: Pgchar; overwrite: gboolean): PPgchar; cdecl;
g_environ_unsetenv: function(envp: PPgchar; variable: Pgchar): PPgchar; cdecl;
g_error_copy: function(error: PGError): PGError; cdecl;
g_error_free: procedure(error: PGError); cdecl;
g_error_get_type: function:TGType; cdecl;
g_error_matches: function(error: PGError; domain: TGQuark; code: gint): gboolean; cdecl;
g_error_new: function(domain: TGQuark; code: gint; format: Pgchar; args: array of const): PGError; cdecl;
g_error_new_literal: function(domain: TGQuark; code: gint; message: Pgchar): PGError; cdecl;
g_error_new_valist: function(domain: TGQuark; code: gint; format: Pgchar; args: Tva_list): PGError; cdecl;
g_file_error_from_errno: function(err_no: gint): TGFileError; cdecl;
g_file_error_quark: function: TGQuark; cdecl;
g_file_get_contents: function(filename: Pgchar; contents: PPgchar; length: Pgsize; error: PPGError): gboolean; cdecl;
g_file_open_tmp: function(tmpl: Pgchar; name_used: PPgchar; error: PPGError): gint; cdecl;
g_file_read_link: function(filename: Pgchar; error: PPGError): Pgchar; cdecl;
g_file_set_contents: function(filename: Pgchar; contents: Pgchar; length: gssize; error: PPGError): gboolean; cdecl;
g_file_test: function(filename: Pgchar; test: TGFileTest): gboolean; cdecl;
g_filename_display_basename: function(filename: Pgchar): Pgchar; cdecl;
g_filename_display_name: function(filename: Pgchar): Pgchar; cdecl;
g_filename_from_uri: function(uri: Pgchar; hostname: PPgchar; error: PPGError): Pgchar; cdecl;
g_filename_from_utf8: function(utf8string: Pgchar; len: gssize; bytes_read: Pgsize; bytes_written: Pgsize; error: PPGError): Pgchar; cdecl;
g_filename_to_uri: function(filename: Pgchar; hostname: Pgchar; error: PPGError): Pgchar; cdecl;
g_filename_to_utf8: function(opsysstring: Pgchar; len: gssize; bytes_read: Pgsize; bytes_written: Pgsize; error: PPGError): Pgchar; cdecl;
g_find_program_in_path: function(program_: Pgchar): Pgchar; cdecl;
g_format_size: function(size: guint64): Pgchar; cdecl;
g_format_size_for_display: function(size: gint64): Pgchar; cdecl;
g_format_size_full: function(size: guint64; flags: TGFormatSizeFlags): Pgchar; cdecl;
g_fprintf: function(file_: Pgpointer; format: Pgchar; args: array of const): gint; cdecl;
g_free: procedure(mem: gpointer); cdecl;
g_get_application_name: function: Pgchar; cdecl;
g_get_charset: function(charset: PPgchar): gboolean; cdecl;
g_get_codeset: function: Pgchar; cdecl;
g_get_current_dir: function: Pgchar; cdecl;
g_get_current_time: procedure(result_: PGTimeVal); cdecl;
g_get_environ: function: PPgchar; cdecl;
g_get_filename_charsets: function(charsets: PPPgchar): gboolean; cdecl;
g_get_home_dir: function: Pgchar; cdecl;
g_get_host_name: function: Pgchar; cdecl;
g_get_language_names: function: PPgchar; cdecl;
g_get_locale_variants: function(locale: Pgchar): PPgchar; cdecl;
g_get_monotonic_time: function: gint64; cdecl;
g_get_num_processors: function: guint; cdecl;
g_get_prgname: function: Pgchar; cdecl;
g_get_real_name: function: Pgchar; cdecl;
g_get_real_time: function: gint64; cdecl;
g_get_system_config_dirs: function: PPgchar; cdecl;
g_get_system_data_dirs: function: PPgchar; cdecl;
g_get_tmp_dir: function: Pgchar; cdecl;
g_get_user_cache_dir: function: Pgchar; cdecl;
g_get_user_config_dir: function: Pgchar; cdecl;
g_get_user_data_dir: function: Pgchar; cdecl;
g_get_user_name: function: Pgchar; cdecl;
g_get_user_runtime_dir: function: Pgchar; cdecl;
g_get_user_special_dir: function(directory: TGUserDirectory): Pgchar; cdecl;
g_getenv: function(variable: Pgchar): Pgchar; cdecl;
g_gstring_get_type: function:TGType; cdecl;
g_hash_table_add: procedure(hash_table: PGHashTable; key: gpointer); cdecl;
g_hash_table_contains: function(hash_table: PGHashTable; key: Pgpointer): gboolean; cdecl;
g_hash_table_destroy: procedure(hash_table: PGHashTable); cdecl;
g_hash_table_find: function(hash_table: PGHashTable; predicate: TGHRFunc; user_data: gpointer): gpointer; cdecl;
g_hash_table_foreach: procedure(hash_table: PGHashTable; func: TGHFunc; user_data: gpointer); cdecl;
g_hash_table_foreach_remove: function(hash_table: PGHashTable; func: TGHRFunc; user_data: gpointer): guint; cdecl;
g_hash_table_foreach_steal: function(hash_table: PGHashTable; func: TGHRFunc; user_data: gpointer): guint; cdecl;
g_hash_table_get_keys: function(hash_table: PGHashTable): PGList; cdecl;
g_hash_table_get_type: function:TGType; cdecl;
g_hash_table_get_values: function(hash_table: PGHashTable): PGList; cdecl;
g_hash_table_insert: procedure(hash_table: PGHashTable; key: gpointer; value: gpointer); cdecl;
g_hash_table_iter_get_hash_table: function(iter: PGHashTableIter): PGHashTable; cdecl;
g_hash_table_iter_init: procedure(iter: PGHashTableIter; hash_table: PGHashTable); cdecl;
g_hash_table_iter_next: function(iter: PGHashTableIter; key: Pgpointer; value: Pgpointer): gboolean; cdecl;
g_hash_table_iter_remove: procedure(iter: PGHashTableIter); cdecl;
g_hash_table_iter_replace: procedure(iter: PGHashTableIter; value: gpointer); cdecl;
g_hash_table_iter_steal: procedure(iter: PGHashTableIter); cdecl;
g_hash_table_lookup: function(hash_table: PGHashTable; key: Pgpointer): gpointer; cdecl;
g_hash_table_lookup_extended: function(hash_table: PGHashTable; lookup_key: Pgpointer; orig_key: Pgpointer; value: Pgpointer): gboolean; cdecl;
g_hash_table_new: function(hash_func: TGHashFunc; key_equal_func: TGEqualFunc): PGHashTable; cdecl;
g_hash_table_new_full: function(hash_func: TGHashFunc; key_equal_func: TGEqualFunc; key_destroy_func: TGDestroyNotify; value_destroy_func: TGDestroyNotify): PGHashTable; cdecl;
g_hash_table_ref: function(hash_table: PGHashTable): PGHashTable; cdecl;
g_hash_table_remove: function(hash_table: PGHashTable; key: Pgpointer): gboolean; cdecl;
g_hash_table_remove_all: procedure(hash_table: PGHashTable); cdecl;
g_hash_table_replace: procedure(hash_table: PGHashTable; key: gpointer; value: gpointer); cdecl;
g_hash_table_size: function(hash_table: PGHashTable): guint; cdecl;
g_hash_table_steal: function(hash_table: PGHashTable; key: Pgpointer): gboolean; cdecl;
g_hash_table_steal_all: procedure(hash_table: PGHashTable); cdecl;
g_hash_table_unref: procedure(hash_table: PGHashTable); cdecl;
g_hmac_copy: function(hmac: PGHmac): PGHmac; cdecl;
g_hmac_get_digest: procedure(hmac: PGHmac; buffer: Pguint8; digest_len: Pgsize); cdecl;
g_hmac_get_string: function(hmac: PGHmac): Pgchar; cdecl;
g_hmac_new: function(digest_type: TGChecksumType; key: Pguint8; key_len: gsize): PGHmac; cdecl;
g_hmac_ref: function(hmac: PGHmac): PGHmac; cdecl;
g_hmac_unref: procedure(hmac: PGHmac); cdecl;
g_hmac_update: procedure(hmac: PGHmac; data: Pguint8; length: gssize); cdecl;
g_hook_alloc: function(hook_list: PGHookList): PGHook; cdecl;
g_hook_compare_ids: function(new_hook: PGHook; sibling: PGHook): gint; cdecl;
g_hook_destroy: function(hook_list: PGHookList; hook_id: gulong): gboolean; cdecl;
g_hook_destroy_link: procedure(hook_list: PGHookList; hook: PGHook); cdecl;
g_hook_find: function(hook_list: PGHookList; need_valids: gboolean; func: TGHookFindFunc; data: gpointer): PGHook; cdecl;
g_hook_find_data: function(hook_list: PGHookList; need_valids: gboolean; data: gpointer): PGHook; cdecl;
g_hook_find_func: function(hook_list: PGHookList; need_valids: gboolean; func: gpointer): PGHook; cdecl;
g_hook_find_func_data: function(hook_list: PGHookList; need_valids: gboolean; func: gpointer; data: gpointer): PGHook; cdecl;
g_hook_first_valid: function(hook_list: PGHookList; may_be_in_call: gboolean): PGHook; cdecl;
g_hook_free: procedure(hook_list: PGHookList; hook: PGHook); cdecl;
g_hook_get: function(hook_list: PGHookList; hook_id: gulong): PGHook; cdecl;
g_hook_insert_before: procedure(hook_list: PGHookList; sibling: PGHook; hook: PGHook); cdecl;
g_hook_insert_sorted: procedure(hook_list: PGHookList; hook: PGHook; func: TGHookCompareFunc); cdecl;
g_hook_list_clear: procedure(hook_list: PGHookList); cdecl;
g_hook_list_init: procedure(hook_list: PGHookList; hook_size: guint); cdecl;
g_hook_list_invoke: procedure(hook_list: PGHookList; may_recurse: gboolean); cdecl;
g_hook_list_invoke_check: procedure(hook_list: PGHookList; may_recurse: gboolean); cdecl;
g_hook_list_marshal: procedure(hook_list: PGHookList; may_recurse: gboolean; marshaller: TGHookMarshaller; marshal_data: gpointer); cdecl;
g_hook_list_marshal_check: procedure(hook_list: PGHookList; may_recurse: gboolean; marshaller: TGHookCheckMarshaller; marshal_data: gpointer); cdecl;
g_hook_next_valid: function(hook_list: PGHookList; hook: PGHook; may_be_in_call: gboolean): PGHook; cdecl;
g_hook_prepend: procedure(hook_list: PGHookList; hook: PGHook); cdecl;
g_hook_ref: function(hook_list: PGHookList; hook: PGHook): PGHook; cdecl;
g_hook_unref: procedure(hook_list: PGHookList; hook: PGHook); cdecl;
g_hostname_is_ascii_encoded: function(hostname: Pgchar): gboolean; cdecl;
g_hostname_is_ip_address: function(hostname: Pgchar): gboolean; cdecl;
g_hostname_is_non_ascii: function(hostname: Pgchar): gboolean; cdecl;
g_hostname_to_ascii: function(hostname: Pgchar): Pgchar; cdecl;
g_hostname_to_unicode: function(hostname: Pgchar): Pgchar; cdecl;
g_iconv: function(converter: TGIConv; inbuf: PPgchar; inbytes_left: Pgsize; outbuf: PPgchar; outbytes_left: Pgsize): gsize; cdecl;
g_iconv_close: function(converter: TGIConv): gint; cdecl;
g_iconv_open: function(to_codeset: Pgchar; from_codeset: Pgchar): TGIConv; cdecl;
g_idle_add: function(function_: TGSourceFunc; data: gpointer): guint; cdecl;
g_idle_add_full: function(priority: gint; function_: TGSourceFunc; data: gpointer; notify: TGDestroyNotify): guint; cdecl;
g_idle_remove_by_data: function(data: gpointer): gboolean; cdecl;
g_idle_source_new: function: PGSource; cdecl;
g_int64_equal: function(v1: Pgpointer; v2: Pgpointer): gboolean; cdecl;
g_int64_hash: function(v: Pgpointer): guint; cdecl;
g_int_equal: function(v1: Pgpointer; v2: Pgpointer): gboolean; cdecl;
g_int_hash: function(v: Pgpointer): guint; cdecl;
g_intern_static_string: function(string_: Pgchar): Pgchar; cdecl;
g_intern_string: function(string_: Pgchar): Pgchar; cdecl;
g_io_add_watch: function(channel: PGIOChannel; condition: TGIOCondition; func: TGIOFunc; user_data: gpointer): guint; cdecl;
g_io_add_watch_full: function(channel: PGIOChannel; priority: gint; condition: TGIOCondition; func: TGIOFunc; user_data: gpointer; notify: TGDestroyNotify): guint; cdecl;
g_io_channel_error_from_errno: function(en: gint): TGIOChannelError; cdecl;
g_io_channel_error_quark: function: TGQuark; cdecl;
g_io_channel_flush: function(channel: PGIOChannel; error: PPGError): TGIOStatus; cdecl;
g_io_channel_get_buffer_condition: function(channel: PGIOChannel): TGIOCondition; cdecl;
g_io_channel_get_buffer_size: function(channel: PGIOChannel): gsize; cdecl;
g_io_channel_get_buffered: function(channel: PGIOChannel): gboolean; cdecl;
g_io_channel_get_close_on_unref: function(channel: PGIOChannel): gboolean; cdecl;
g_io_channel_get_encoding: function(channel: PGIOChannel): Pgchar; cdecl;
g_io_channel_get_flags: function(channel: PGIOChannel): TGIOFlags; cdecl;
g_io_channel_get_line_term: function(channel: PGIOChannel; length: Pgint): Pgchar; cdecl;
g_io_channel_get_type: function:TGType; cdecl;
g_io_channel_init: procedure(channel: PGIOChannel); cdecl;
g_io_channel_new_file: function(filename: Pgchar; mode: Pgchar; error: PPGError): PGIOChannel; cdecl;
g_io_channel_read_chars: function(channel: PGIOChannel; buf: Pgchar; count: gsize; bytes_read: Pgsize; error: PPGError): TGIOStatus; cdecl;
g_io_channel_read_line: function(channel: PGIOChannel; str_return: PPgchar; length: Pgsize; terminator_pos: Pgsize; error: PPGError): TGIOStatus; cdecl;
g_io_channel_read_line_string: function(channel: PGIOChannel; buffer: PGString; terminator_pos: Pgsize; error: PPGError): TGIOStatus; cdecl;
g_io_channel_read_to_end: function(channel: PGIOChannel; str_return: PPgchar; length: Pgsize; error: PPGError): TGIOStatus; cdecl;
g_io_channel_read_unichar: function(channel: PGIOChannel; thechar: Pgunichar; error: PPGError): TGIOStatus; cdecl;
g_io_channel_ref: function(channel: PGIOChannel): PGIOChannel; cdecl;
g_io_channel_seek_position: function(channel: PGIOChannel; offset: gint64; type_: TGSeekType; error: PPGError): TGIOStatus; cdecl;
g_io_channel_set_buffer_size: procedure(channel: PGIOChannel; size: gsize); cdecl;
g_io_channel_set_buffered: procedure(channel: PGIOChannel; buffered: gboolean); cdecl;
g_io_channel_set_close_on_unref: procedure(channel: PGIOChannel; do_close: gboolean); cdecl;
g_io_channel_set_encoding: function(channel: PGIOChannel; encoding: Pgchar; error: PPGError): TGIOStatus; cdecl;
g_io_channel_set_flags: function(channel: PGIOChannel; flags: TGIOFlags; error: PPGError): TGIOStatus; cdecl;
g_io_channel_set_line_term: procedure(channel: PGIOChannel; line_term: Pgchar; length: gint); cdecl;
g_io_channel_shutdown: function(channel: PGIOChannel; flush: gboolean; error: PPGError): TGIOStatus; cdecl;
g_io_channel_unix_get_fd: function(channel: PGIOChannel): gint; cdecl;
g_io_channel_unix_new: function(fd: gint): PGIOChannel; cdecl;
g_io_channel_unref: procedure(channel: PGIOChannel); cdecl;
g_io_channel_write_chars: function(channel: PGIOChannel; buf: Pgchar; count: gssize; bytes_written: Pgsize; error: PPGError): TGIOStatus; cdecl;
g_io_channel_write_unichar: function(channel: PGIOChannel; thechar: gunichar; error: PPGError): TGIOStatus; cdecl;
g_io_create_watch: function(channel: PGIOChannel; condition: TGIOCondition): PGSource; cdecl;
g_key_file_error_quark: function: TGQuark; cdecl;
g_key_file_free: procedure(key_file: PGKeyFile); cdecl;
g_key_file_get_boolean: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): gboolean; cdecl;
g_key_file_get_boolean_list: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; length: Pgsize; error: PPGError): Pgboolean; cdecl;
g_key_file_get_comment: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): Pgchar; cdecl;
g_key_file_get_double: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): gdouble; cdecl;
g_key_file_get_double_list: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; length: Pgsize; error: PPGError): Pgdouble; cdecl;
g_key_file_get_groups: function(key_file: PGKeyFile; length: Pgsize): PPgchar; cdecl;
g_key_file_get_int64: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): gint64; cdecl;
g_key_file_get_integer: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): gint; cdecl;
g_key_file_get_integer_list: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; length: Pgsize; error: PPGError): Pgint; cdecl;
g_key_file_get_keys: function(key_file: PGKeyFile; group_name: Pgchar; length: Pgsize; error: PPGError): PPgchar; cdecl;
g_key_file_get_locale_string: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; locale: Pgchar; error: PPGError): Pgchar; cdecl;
g_key_file_get_locale_string_list: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; locale: Pgchar; length: Pgsize; error: PPGError): PPgchar; cdecl;
g_key_file_get_start_group: function(key_file: PGKeyFile): Pgchar; cdecl;
g_key_file_get_string: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): Pgchar; cdecl;
g_key_file_get_string_list: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; length: Pgsize; error: PPGError): PPgchar; cdecl;
g_key_file_get_type: function:TGType; cdecl;
g_key_file_get_uint64: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): guint64; cdecl;
g_key_file_get_value: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): Pgchar; cdecl;
g_key_file_has_group: function(key_file: PGKeyFile; group_name: Pgchar): gboolean; cdecl;
g_key_file_has_key: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): gboolean; cdecl;
g_key_file_load_from_data: function(key_file: PGKeyFile; data: Pgchar; length: gsize; flags: TGKeyFileFlags; error: PPGError): gboolean; cdecl;
g_key_file_load_from_data_dirs: function(key_file: PGKeyFile; file_: Pgchar; full_path: PPgchar; flags: TGKeyFileFlags; error: PPGError): gboolean; cdecl;
g_key_file_load_from_dirs: function(key_file: PGKeyFile; file_: Pgchar; search_dirs: PPgchar; full_path: PPgchar; flags: TGKeyFileFlags; error: PPGError): gboolean; cdecl;
g_key_file_load_from_file: function(key_file: PGKeyFile; file_: Pgchar; flags: TGKeyFileFlags; error: PPGError): gboolean; cdecl;
g_key_file_new: function: PGKeyFile; cdecl;
g_key_file_ref: function(key_file: PGKeyFile): PGKeyFile; cdecl;
g_key_file_remove_comment: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): gboolean; cdecl;
g_key_file_remove_group: function(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): gboolean; cdecl;
g_key_file_remove_key: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; error: PPGError): gboolean; cdecl;
g_key_file_set_boolean: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; value: gboolean); cdecl;
g_key_file_set_boolean_list: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; list: gboolean; length: gsize); cdecl;
g_key_file_set_comment: function(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; comment: Pgchar; error: PPGError): gboolean; cdecl;
g_key_file_set_double: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; value: gdouble); cdecl;
g_key_file_set_double_list: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; list: gdouble; length: gsize); cdecl;
g_key_file_set_int64: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; value: gint64); cdecl;
g_key_file_set_integer: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; value: gint); cdecl;
g_key_file_set_integer_list: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; list: gint; length: gsize); cdecl;
g_key_file_set_list_separator: procedure(key_file: PGKeyFile; separator: gchar); cdecl;
g_key_file_set_locale_string: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; locale: Pgchar; string_: Pgchar); cdecl;
g_key_file_set_locale_string_list: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; locale: Pgchar; list: Pgchar; length: gsize); cdecl;
g_key_file_set_string: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; string_: Pgchar); cdecl;
g_key_file_set_string_list: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; list: Pgchar; length: gsize); cdecl;
g_key_file_set_uint64: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; value: guint64); cdecl;
g_key_file_set_value: procedure(key_file: PGKeyFile; group_name: Pgchar; key: Pgchar; value: Pgchar); cdecl;
g_key_file_to_data: function(key_file: PGKeyFile; length: Pgsize; error: PPGError): Pgchar; cdecl;
g_key_file_unref: procedure(key_file: PGKeyFile); cdecl;
g_list_alloc: function: PGList; cdecl;
g_list_append: function(list: PGList; data: gpointer): PGList; cdecl;
g_list_concat: function(list1: PGList; list2: PGList): PGList; cdecl;
g_list_copy: function(list: PGList): PGList; cdecl;
g_list_copy_deep: function(list: PGList; func: TGCopyFunc; user_data: gpointer): PGList; cdecl;
g_list_delete_link: function(list: PGList; link_: PGList): PGList; cdecl;
g_list_find: function(list: PGList; data: Pgpointer): PGList; cdecl;
g_list_find_custom: function(list: PGList; data: Pgpointer; func: TGCompareFunc): PGList; cdecl;
g_list_first: function(list: PGList): PGList; cdecl;
g_list_foreach: procedure(list: PGList; func: TGFunc; user_data: gpointer); cdecl;
g_list_free: procedure(list: PGList); cdecl;
g_list_free_1: procedure(list: PGList); cdecl;
g_list_free_full: procedure(list: PGList; free_func: TGDestroyNotify); cdecl;
g_list_index: function(list: PGList; data: Pgpointer): gint; cdecl;
g_list_insert: function(list: PGList; data: gpointer; position: gint): PGList; cdecl;
g_list_insert_before: function(list: PGList; sibling: PGList; data: gpointer): PGList; cdecl;
g_list_insert_sorted: function(list: PGList; data: gpointer; func: TGCompareFunc): PGList; cdecl;
g_list_insert_sorted_with_data: function(list: PGList; data: gpointer; func: TGCompareDataFunc; user_data: gpointer): PGList; cdecl;
g_list_last: function(list: PGList): PGList; cdecl;
g_list_length: function(list: PGList): guint; cdecl;
g_list_nth: function(list: PGList; n: guint): PGList; cdecl;
g_list_nth_data: function(list: PGList; n: guint): gpointer; cdecl;
g_list_nth_prev: function(list: PGList; n: guint): PGList; cdecl;
g_list_position: function(list: PGList; llink: PGList): gint; cdecl;
g_list_prepend: function(list: PGList; data: gpointer): PGList; cdecl;
g_list_remove: function(list: PGList; data: Pgpointer): PGList; cdecl;
g_list_remove_all: function(list: PGList; data: Pgpointer): PGList; cdecl;
g_list_remove_link: function(list: PGList; llink: PGList): PGList; cdecl;
g_list_reverse: function(list: PGList): PGList; cdecl;
g_list_sort: function(list: PGList; compare_func: TGCompareFunc): PGList; cdecl;
g_list_sort_with_data: function(list: PGList; compare_func: TGCompareDataFunc; user_data: gpointer): PGList; cdecl;
g_listenv: function: PPgchar; cdecl;
g_locale_from_utf8: function(utf8string: Pgchar; len: gssize; bytes_read: Pgsize; bytes_written: Pgsize; error: PPGError): Pgchar; cdecl;
g_locale_to_utf8: function(opsysstring: Pgchar; len: gssize; bytes_read: Pgsize; bytes_written: Pgsize; error: PPGError): Pgchar; cdecl;
g_log: procedure(log_domain: Pgchar; log_level: TGLogLevelFlags; format: Pgchar; args: array of const); cdecl;
g_log_default_handler: procedure(log_domain: Pgchar; log_level: TGLogLevelFlags; message: Pgchar; unused_data: gpointer); cdecl;
g_log_remove_handler: procedure(log_domain: Pgchar; handler_id: guint); cdecl;
g_log_set_always_fatal: function(fatal_mask: TGLogLevelFlags): TGLogLevelFlags; cdecl;
g_log_set_default_handler: function(log_func: TGLogFunc; user_data: gpointer): TGLogFunc; cdecl;
g_log_set_fatal_mask: function(log_domain: Pgchar; fatal_mask: TGLogLevelFlags): TGLogLevelFlags; cdecl;
g_log_set_handler: function(log_domain: Pgchar; log_levels: TGLogLevelFlags; log_func: TGLogFunc; user_data: gpointer): guint; cdecl;
g_logv: procedure(log_domain: Pgchar; log_level: TGLogLevelFlags; format: Pgchar; args: Tva_list); cdecl;
g_main_context_acquire: function(context: PGMainContext): gboolean; cdecl;
g_main_context_add_poll: procedure(context: PGMainContext; fd: PGPollFD; priority: gint); cdecl;
g_main_context_check: function(context: PGMainContext; max_priority: gint; fds: PGPollFD; n_fds: gint): gint; cdecl;
g_main_context_default: function: PGMainContext; cdecl;
g_main_context_dispatch: procedure(context: PGMainContext); cdecl;
g_main_context_find_source_by_funcs_user_data: function(context: PGMainContext; funcs: PGSourceFuncs; user_data: gpointer): PGSource; cdecl;
g_main_context_find_source_by_id: function(context: PGMainContext; source_id: guint): PGSource; cdecl;
g_main_context_find_source_by_user_data: function(context: PGMainContext; user_data: gpointer): PGSource; cdecl;
g_main_context_get_poll_func: function(context: PGMainContext): TGPollFunc; cdecl;
g_main_context_get_thread_default: function: PGMainContext; cdecl;
g_main_context_get_type: function:TGType; cdecl;
g_main_context_invoke: procedure(context: PGMainContext; function_: TGSourceFunc; data: gpointer); cdecl;
g_main_context_invoke_full: procedure(context: PGMainContext; priority: gint; function_: TGSourceFunc; data: gpointer; notify: TGDestroyNotify); cdecl;
g_main_context_is_owner: function(context: PGMainContext): gboolean; cdecl;
g_main_context_iteration: function(context: PGMainContext; may_block: gboolean): gboolean; cdecl;
g_main_context_new: function: PGMainContext; cdecl;
g_main_context_pending: function(context: PGMainContext): gboolean; cdecl;
g_main_context_pop_thread_default: procedure(context: PGMainContext); cdecl;
g_main_context_prepare: function(context: PGMainContext; priority: Pgint): gboolean; cdecl;
g_main_context_push_thread_default: procedure(context: PGMainContext); cdecl;
g_main_context_query: function(context: PGMainContext; max_priority: gint; timeout_: Pgint; fds: PGPollFD; n_fds: gint): gint; cdecl;
g_main_context_ref: function(context: PGMainContext): PGMainContext; cdecl;
g_main_context_ref_thread_default: function: PGMainContext; cdecl;
g_main_context_release: procedure(context: PGMainContext); cdecl;
g_main_context_remove_poll: procedure(context: PGMainContext; fd: PGPollFD); cdecl;
g_main_context_set_poll_func: procedure(context: PGMainContext; func: TGPollFunc); cdecl;
g_main_context_unref: procedure(context: PGMainContext); cdecl;
g_main_context_wait: function(context: PGMainContext; cond: PGCond; mutex: PGMutex): gboolean; cdecl;
g_main_context_wakeup: procedure(context: PGMainContext); cdecl;
g_main_current_source: function: PGSource; cdecl;
g_main_depth: function: gint; cdecl;
g_main_loop_get_context: function(loop: PGMainLoop): PGMainContext; cdecl;
g_main_loop_get_type: function:TGType; cdecl;
g_main_loop_is_running: function(loop: PGMainLoop): gboolean; cdecl;
g_main_loop_new: function(context: PGMainContext; is_running: gboolean): PGMainLoop; cdecl;
g_main_loop_quit: procedure(loop: PGMainLoop); cdecl;
g_main_loop_ref: function(loop: PGMainLoop): PGMainLoop; cdecl;
g_main_loop_run: procedure(loop: PGMainLoop); cdecl;
g_main_loop_unref: procedure(loop: PGMainLoop); cdecl;
g_malloc0: function(n_bytes: gsize): gpointer; cdecl;
g_malloc0_n: function(n_blocks: gsize; n_block_bytes: gsize): gpointer; cdecl;
g_malloc: function(n_bytes: gsize): gpointer; cdecl;
g_malloc_n: function(n_blocks: gsize; n_block_bytes: gsize): gpointer; cdecl;
g_mapped_file_get_bytes: function(file_: PGMappedFile): PGBytes; cdecl;
g_mapped_file_get_contents: function(file_: PGMappedFile): Pgchar; cdecl;
g_mapped_file_get_length: function(file_: PGMappedFile): gsize; cdecl;
g_mapped_file_new: function(filename: Pgchar; writable: gboolean; error: PPGError): PGMappedFile; cdecl;
g_mapped_file_new_from_fd: function(fd: gint; writable: gboolean; error: PPGError): PGMappedFile; cdecl;
g_mapped_file_ref: function(file_: PGMappedFile): PGMappedFile; cdecl;
g_mapped_file_unref: procedure(file_: PGMappedFile); cdecl;
g_markup_collect_attributes: function(element_name: Pgchar; attribute_names: PPgchar; attribute_values: PPgchar; error: PPGError; first_type: TGMarkupCollectType; first_attr: Pgchar; args: array of const): gboolean; cdecl;
g_markup_error_quark: function: TGQuark; cdecl;
g_markup_escape_text: function(text: Pgchar; length: gssize): Pgchar; cdecl;
g_markup_parse_context_end_parse: function(context: PGMarkupParseContext; error: PPGError): gboolean; cdecl;
g_markup_parse_context_free: procedure(context: PGMarkupParseContext); cdecl;
g_markup_parse_context_get_element: function(context: PGMarkupParseContext): Pgchar; cdecl;
g_markup_parse_context_get_element_stack: function(context: PGMarkupParseContext): PGSList; cdecl;
g_markup_parse_context_get_position: procedure(context: PGMarkupParseContext; line_number: Pgint; char_number: Pgint); cdecl;
g_markup_parse_context_get_type: function:TGType; cdecl;
g_markup_parse_context_get_user_data: function(context: PGMarkupParseContext): gpointer; cdecl;
g_markup_parse_context_new: function(parser: PGMarkupParser; flags: TGMarkupParseFlags; user_data: gpointer; user_data_dnotify: TGDestroyNotify): PGMarkupParseContext; cdecl;
g_markup_parse_context_parse: function(context: PGMarkupParseContext; text: Pgchar; text_len: gssize; error: PPGError): gboolean; cdecl;
g_markup_parse_context_pop: function(context: PGMarkupParseContext): gpointer; cdecl;
g_markup_parse_context_push: procedure(context: PGMarkupParseContext; parser: PGMarkupParser; user_data: gpointer); cdecl;
g_markup_parse_context_ref: function(context: PGMarkupParseContext): PGMarkupParseContext; cdecl;
g_markup_parse_context_unref: procedure(context: PGMarkupParseContext); cdecl;
g_markup_printf_escaped: function(format: Pgchar; args: array of const): Pgchar; cdecl;
g_markup_vprintf_escaped: function(format: Pgchar; args: Tva_list): Pgchar; cdecl;
g_match_info_expand_references: function(match_info: PGMatchInfo; string_to_expand: Pgchar; error: PPGError): Pgchar; cdecl;
g_match_info_fetch: function(match_info: PGMatchInfo; match_num: gint): Pgchar; cdecl;
g_match_info_fetch_all: function(match_info: PGMatchInfo): PPgchar; cdecl;
g_match_info_fetch_named: function(match_info: PGMatchInfo; name: Pgchar): Pgchar; cdecl;
g_match_info_fetch_named_pos: function(match_info: PGMatchInfo; name: Pgchar; start_pos: Pgint; end_pos: Pgint): gboolean; cdecl;
g_match_info_fetch_pos: function(match_info: PGMatchInfo; match_num: gint; start_pos: Pgint; end_pos: Pgint): gboolean; cdecl;
g_match_info_free: procedure(match_info: PGMatchInfo); cdecl;
g_match_info_get_match_count: function(match_info: PGMatchInfo): gint; cdecl;
g_match_info_get_regex: function(match_info: PGMatchInfo): PGRegex; cdecl;
g_match_info_get_string: function(match_info: PGMatchInfo): Pgchar; cdecl;
g_match_info_get_type: function:TGType; cdecl;
g_match_info_is_partial_match: function(match_info: PGMatchInfo): gboolean; cdecl;
g_match_info_matches: function(match_info: PGMatchInfo): gboolean; cdecl;
g_match_info_next: function(match_info: PGMatchInfo; error: PPGError): gboolean; cdecl;
g_match_info_ref: function(match_info: PGMatchInfo): PGMatchInfo; cdecl;
g_match_info_unref: procedure(match_info: PGMatchInfo); cdecl;
g_mem_is_system_malloc: function: gboolean; cdecl;
g_mem_profile: procedure; cdecl;
g_mem_set_vtable: procedure(vtable: PGMemVTable); cdecl;
g_memdup: function(mem: Pgpointer; byte_size: guint): gpointer; cdecl;
g_mkdir_with_parents: function(pathname: Pgchar; mode: gint): gint; cdecl;
g_mkdtemp: function(tmpl: Pgchar): Pgchar; cdecl;
g_mkdtemp_full: function(tmpl: Pgchar; mode: gint): Pgchar; cdecl;
g_mkstemp: function(tmpl: Pgchar): gint; cdecl;
g_mkstemp_full: function(tmpl: Pgchar; flags: gint; mode: gint): gint; cdecl;
g_mutex_clear: procedure(mutex: PGMutex); cdecl;
g_mutex_init: procedure(mutex: PGMutex); cdecl;
g_mutex_lock: procedure(mutex: PGMutex); cdecl;
g_mutex_trylock: function(mutex: PGMutex): gboolean; cdecl;
g_mutex_unlock: procedure(mutex: PGMutex); cdecl;
g_node_child_index: function(node: PGNode; data: gpointer): gint; cdecl;
g_node_child_position: function(node: PGNode; child: PGNode): gint; cdecl;
g_node_children_foreach: procedure(node: PGNode; flags: TGTraverseFlags; func: TGNodeForeachFunc; data: gpointer); cdecl;
g_node_copy: function(node: PGNode): PGNode; cdecl;
g_node_copy_deep: function(node: PGNode; copy_func: TGCopyFunc; data: gpointer): PGNode; cdecl;
g_node_depth: function(node: PGNode): guint; cdecl;
g_node_destroy: procedure(root: PGNode); cdecl;
g_node_find: function(root: PGNode; order: TGTraverseType; flags: TGTraverseFlags; data: gpointer): PGNode; cdecl;
g_node_find_child: function(node: PGNode; flags: TGTraverseFlags; data: gpointer): PGNode; cdecl;
g_node_first_sibling: function(node: PGNode): PGNode; cdecl;
g_node_get_root: function(node: PGNode): PGNode; cdecl;
g_node_insert: function(parent: PGNode; position: gint; node: PGNode): PGNode; cdecl;
g_node_insert_after: function(parent: PGNode; sibling: PGNode; node: PGNode): PGNode; cdecl;
g_node_insert_before: function(parent: PGNode; sibling: PGNode; node: PGNode): PGNode; cdecl;
g_node_is_ancestor: function(node: PGNode; descendant: PGNode): gboolean; cdecl;
g_node_last_child: function(node: PGNode): PGNode; cdecl;
g_node_last_sibling: function(node: PGNode): PGNode; cdecl;
g_node_max_height: function(root: PGNode): guint; cdecl;
g_node_n_children: function(node: PGNode): guint; cdecl;
g_node_n_nodes: function(root: PGNode; flags: TGTraverseFlags): guint; cdecl;
g_node_new: function(data: gpointer): PGNode; cdecl;
g_node_nth_child: function(node: PGNode; n: guint): PGNode; cdecl;
g_node_prepend: function(parent: PGNode; node: PGNode): PGNode; cdecl;
g_node_reverse_children: procedure(node: PGNode); cdecl;
g_node_traverse: procedure(root: PGNode; order: TGTraverseType; flags: TGTraverseFlags; max_depth: gint; func: TGNodeTraverseFunc; data: gpointer); cdecl;
g_node_unlink: procedure(node: PGNode); cdecl;
g_nullify_pointer: procedure(nullify_location: Pgpointer); cdecl;
g_on_error_query: procedure(prg_name: Pgchar); cdecl;
g_on_error_stack_trace: procedure(prg_name: Pgchar); cdecl;
g_once_impl: function(once: PGOnce; func: TGThreadFunc; arg: gpointer): gpointer; cdecl;
g_once_init_enter: function(location: Pgpointer): gboolean; cdecl;
g_once_init_leave: procedure(location: Pgpointer; result_: gsize); cdecl;
g_option_context_add_group: procedure(context: PGOptionContext; group: PGOptionGroup); cdecl;
g_option_context_add_main_entries: procedure(context: PGOptionContext; entries: PGOptionEntry; translation_domain: Pgchar); cdecl;
g_option_context_free: procedure(context: PGOptionContext); cdecl;
g_option_context_get_description: function(context: PGOptionContext): Pgchar; cdecl;
g_option_context_get_help: function(context: PGOptionContext; main_help: gboolean; group: PGOptionGroup): Pgchar; cdecl;
g_option_context_get_help_enabled: function(context: PGOptionContext): gboolean; cdecl;
g_option_context_get_ignore_unknown_options: function(context: PGOptionContext): gboolean; cdecl;
g_option_context_get_main_group: function(context: PGOptionContext): PGOptionGroup; cdecl;
g_option_context_get_summary: function(context: PGOptionContext): Pgchar; cdecl;
g_option_context_new: function(parameter_string: Pgchar): PGOptionContext; cdecl;
g_option_context_parse: function(context: PGOptionContext; argc: Pgint; argv: PPPgchar; error: PPGError): gboolean; cdecl;
g_option_context_set_description: procedure(context: PGOptionContext; description: Pgchar); cdecl;
g_option_context_set_help_enabled: procedure(context: PGOptionContext; help_enabled: gboolean); cdecl;
g_option_context_set_ignore_unknown_options: procedure(context: PGOptionContext; ignore_unknown: gboolean); cdecl;
g_option_context_set_main_group: procedure(context: PGOptionContext; group: PGOptionGroup); cdecl;
g_option_context_set_summary: procedure(context: PGOptionContext; summary: Pgchar); cdecl;
g_option_context_set_translate_func: procedure(context: PGOptionContext; func: TGTranslateFunc; data: gpointer; destroy_notify: TGDestroyNotify); cdecl;
g_option_context_set_translation_domain: procedure(context: PGOptionContext; domain: Pgchar); cdecl;
g_option_error_quark: function: TGQuark; cdecl;
g_option_group_add_entries: procedure(group: PGOptionGroup; entries: PGOptionEntry); cdecl;
g_option_group_free: procedure(group: PGOptionGroup); cdecl;
g_option_group_new: function(name: Pgchar; description: Pgchar; help_description: Pgchar; user_data: gpointer; destroy_: TGDestroyNotify): PGOptionGroup; cdecl;
g_option_group_set_error_hook: procedure(group: PGOptionGroup; error_func: TGOptionErrorFunc); cdecl;
g_option_group_set_parse_hooks: procedure(group: PGOptionGroup; pre_parse_func: TGOptionParseFunc; post_parse_func: TGOptionParseFunc); cdecl;
g_option_group_set_translate_func: procedure(group: PGOptionGroup; func: TGTranslateFunc; data: gpointer; destroy_notify: TGDestroyNotify); cdecl;
g_option_group_set_translation_domain: procedure(group: PGOptionGroup; domain: Pgchar); cdecl;
g_parse_debug_string: function(string_: Pgchar; keys: PGDebugKey; nkeys: guint): guint; cdecl;
g_path_get_basename: function(file_name: Pgchar): Pgchar; cdecl;
g_path_get_dirname: function(file_name: Pgchar): Pgchar; cdecl;
g_path_is_absolute: function(file_name: Pgchar): gboolean; cdecl;
g_path_skip_root: function(file_name: Pgchar): Pgchar; cdecl;
g_pattern_match: function(pspec: PGPatternSpec; string_length: guint; string_: Pgchar; string_reversed: Pgchar): gboolean; cdecl;
g_pattern_match_simple: function(pattern: Pgchar; string_: Pgchar): gboolean; cdecl;
g_pattern_match_string: function(pspec: PGPatternSpec; string_: Pgchar): gboolean; cdecl;
g_pattern_spec_equal: function(pspec1: PGPatternSpec; pspec2: PGPatternSpec): gboolean; cdecl;
g_pattern_spec_free: procedure(pspec: PGPatternSpec); cdecl;
g_pattern_spec_new: function(pattern: Pgchar): PGPatternSpec; cdecl;
g_pointer_bit_lock: procedure(address: Pgpointer; lock_bit: gint); cdecl;
g_pointer_bit_trylock: function(address: Pgpointer; lock_bit: gint): gboolean; cdecl;
g_pointer_bit_unlock: procedure(address: Pgpointer; lock_bit: gint); cdecl;
g_poll: function(fds: PGPollFD; nfds: guint; timeout: gint): gint; cdecl;
g_pollfd_get_type: function:TGType; cdecl;
g_prefix_error: procedure(err: PPGError; format: Pgchar; args: array of const); cdecl;
g_print: procedure(format: Pgchar; args: array of const); cdecl;
g_printerr: procedure(format: Pgchar; args: array of const); cdecl;
g_printf: function(format: Pgchar; args: array of const): gint; cdecl;
g_printf_string_upper_bound: function(format: Pgchar; args: Tva_list): gsize; cdecl;
g_private_get: function(key: PGPrivate): gpointer; cdecl;
g_private_replace: procedure(key: PGPrivate; value: gpointer); cdecl;
g_private_set: procedure(key: PGPrivate; value: gpointer); cdecl;
g_propagate_error: procedure(dest: PPGError; src: PGError); cdecl;
g_propagate_prefixed_error: procedure(dest: PPGError; src: PGError; format: Pgchar; args: array of const); cdecl;
g_ptr_array_add: procedure(array_: Pgpointer; data: gpointer); cdecl;
g_ptr_array_foreach: procedure(array_: Pgpointer; func: TGFunc; user_data: gpointer); cdecl;
g_ptr_array_free: function(array_: Pgpointer; free_seg: gboolean): Pgpointer; cdecl;
g_ptr_array_get_type: function:TGType; cdecl;
g_ptr_array_new: function: Pgpointer; cdecl;
g_ptr_array_new_full: function(reserved_size: guint; element_free_func: TGDestroyNotify): Pgpointer; cdecl;
g_ptr_array_new_with_free_func: function(element_free_func: TGDestroyNotify): Pgpointer; cdecl;
g_ptr_array_ref: function(array_: Pgpointer): Pgpointer; cdecl;
g_ptr_array_remove: function(array_: Pgpointer; data: gpointer): gboolean; cdecl;
g_ptr_array_remove_fast: function(array_: Pgpointer; data: gpointer): gboolean; cdecl;
g_ptr_array_remove_index: function(array_: Pgpointer; index_: guint): gpointer; cdecl;
g_ptr_array_remove_index_fast: function(array_: Pgpointer; index_: guint): gpointer; cdecl;
g_ptr_array_remove_range: procedure(array_: Pgpointer; index_: guint; length: guint); cdecl;
g_ptr_array_set_free_func: procedure(array_: Pgpointer; element_free_func: TGDestroyNotify); cdecl;
g_ptr_array_set_size: procedure(array_: Pgpointer; length: gint); cdecl;
g_ptr_array_sized_new: function(reserved_size: guint): Pgpointer; cdecl;
g_ptr_array_sort: procedure(array_: Pgpointer; compare_func: TGCompareFunc); cdecl;
g_ptr_array_sort_with_data: procedure(array_: Pgpointer; compare_func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_ptr_array_unref: procedure(array_: Pgpointer); cdecl;
g_qsort_with_data: procedure(pbase: Pgpointer; total_elems: gint; size: gsize; compare_func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_quark_from_static_string: function(string_: Pgchar): TGQuark; cdecl;
g_quark_from_string: function(string_: Pgchar): TGQuark; cdecl;
g_quark_to_string: function(quark: TGQuark): Pgchar; cdecl;
g_quark_try_string: function(string_: Pgchar): TGQuark; cdecl;
g_queue_clear: procedure(queue: PGQueue); cdecl;
g_queue_copy: function(queue: PGQueue): PGQueue; cdecl;
g_queue_delete_link: procedure(queue: PGQueue; link_: PGList); cdecl;
g_queue_find: function(queue: PGQueue; data: Pgpointer): PGList; cdecl;
g_queue_find_custom: function(queue: PGQueue; data: Pgpointer; func: TGCompareFunc): PGList; cdecl;
g_queue_foreach: procedure(queue: PGQueue; func: TGFunc; user_data: gpointer); cdecl;
g_queue_free: procedure(queue: PGQueue); cdecl;
g_queue_free_full: procedure(queue: PGQueue; free_func: TGDestroyNotify); cdecl;
g_queue_get_length: function(queue: PGQueue): guint; cdecl;
g_queue_index: function(queue: PGQueue; data: Pgpointer): gint; cdecl;
g_queue_init: procedure(queue: PGQueue); cdecl;
g_queue_insert_after: procedure(queue: PGQueue; sibling: PGList; data: gpointer); cdecl;
g_queue_insert_before: procedure(queue: PGQueue; sibling: PGList; data: gpointer); cdecl;
g_queue_insert_sorted: procedure(queue: PGQueue; data: gpointer; func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_queue_is_empty: function(queue: PGQueue): gboolean; cdecl;
g_queue_link_index: function(queue: PGQueue; link_: PGList): gint; cdecl;
g_queue_new: function: PGQueue; cdecl;
g_queue_peek_head: function(queue: PGQueue): gpointer; cdecl;
g_queue_peek_head_link: function(queue: PGQueue): PGList; cdecl;
g_queue_peek_nth: function(queue: PGQueue; n: guint): gpointer; cdecl;
g_queue_peek_nth_link: function(queue: PGQueue; n: guint): PGList; cdecl;
g_queue_peek_tail: function(queue: PGQueue): gpointer; cdecl;
g_queue_peek_tail_link: function(queue: PGQueue): PGList; cdecl;
g_queue_pop_head: function(queue: PGQueue): gpointer; cdecl;
g_queue_pop_head_link: function(queue: PGQueue): PGList; cdecl;
g_queue_pop_nth: function(queue: PGQueue; n: guint): gpointer; cdecl;
g_queue_pop_nth_link: function(queue: PGQueue; n: guint): PGList; cdecl;
g_queue_pop_tail: function(queue: PGQueue): gpointer; cdecl;
g_queue_pop_tail_link: function(queue: PGQueue): PGList; cdecl;
g_queue_push_head: procedure(queue: PGQueue; data: gpointer); cdecl;
g_queue_push_head_link: procedure(queue: PGQueue; link_: PGList); cdecl;
g_queue_push_nth: procedure(queue: PGQueue; data: gpointer; n: gint); cdecl;
g_queue_push_nth_link: procedure(queue: PGQueue; n: gint; link_: PGList); cdecl;
g_queue_push_tail: procedure(queue: PGQueue; data: gpointer); cdecl;
g_queue_push_tail_link: procedure(queue: PGQueue; link_: PGList); cdecl;
g_queue_remove: function(queue: PGQueue; data: Pgpointer): gboolean; cdecl;
g_queue_remove_all: function(queue: PGQueue; data: Pgpointer): guint; cdecl;
g_queue_reverse: procedure(queue: PGQueue); cdecl;
g_queue_sort: procedure(queue: PGQueue; compare_func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_queue_unlink: procedure(queue: PGQueue; link_: PGList); cdecl;
g_rand_copy: function(rand_: PGRand): PGRand; cdecl;
g_rand_double: function(rand_: PGRand): gdouble; cdecl;
g_rand_double_range: function(rand_: PGRand; begin_: gdouble; end_: gdouble): gdouble; cdecl;
g_rand_free: procedure(rand_: PGRand); cdecl;
g_rand_int: function(rand_: PGRand): guint32; cdecl;
g_rand_int_range: function(rand_: PGRand; begin_: gint32; end_: gint32): gint32; cdecl;
g_rand_new: function: PGRand; cdecl;
g_rand_new_with_seed: function(seed: guint32): PGRand; cdecl;
g_rand_new_with_seed_array: function(seed: Pguint32; seed_length: guint): PGRand; cdecl;
g_rand_set_seed: procedure(rand_: PGRand; seed: guint32); cdecl;
g_rand_set_seed_array: procedure(rand_: PGRand; seed: Pguint32; seed_length: guint); cdecl;
g_random_double: function: gdouble; cdecl;
g_random_double_range: function(begin_: gdouble; end_: gdouble): gdouble; cdecl;
g_random_int: function: guint32; cdecl;
g_random_int_range: function(begin_: gint32; end_: gint32): gint32; cdecl;
g_random_set_seed: procedure(seed: guint32); cdecl;
g_realloc: function(mem: gpointer; n_bytes: gsize): gpointer; cdecl;
g_realloc_n: function(mem: gpointer; n_blocks: gsize; n_block_bytes: gsize): gpointer; cdecl;
g_rec_mutex_clear: procedure(rec_mutex: PGRecMutex); cdecl;
g_rec_mutex_init: procedure(rec_mutex: PGRecMutex); cdecl;
g_rec_mutex_lock: procedure(rec_mutex: PGRecMutex); cdecl;
g_rec_mutex_trylock: function(rec_mutex: PGRecMutex): gboolean; cdecl;
g_rec_mutex_unlock: procedure(rec_mutex: PGRecMutex); cdecl;
g_regex_check_replacement: function(replacement: Pgchar; has_references: Pgboolean; error: PPGError): gboolean; cdecl;
g_regex_error_quark: function: TGQuark; cdecl;
g_regex_escape_nul: function(string_: Pgchar; length: gint): Pgchar; cdecl;
g_regex_escape_string: function(string_: Pgchar; length: gint): Pgchar; cdecl;
g_regex_get_capture_count: function(regex: PGRegex): gint; cdecl;
g_regex_get_compile_flags: function(regex: PGRegex): TGRegexCompileFlags; cdecl;
g_regex_get_has_cr_or_lf: function(regex: PGRegex): gboolean; cdecl;
g_regex_get_match_flags: function(regex: PGRegex): TGRegexMatchFlags; cdecl;
g_regex_get_max_backref: function(regex: PGRegex): gint; cdecl;
g_regex_get_pattern: function(regex: PGRegex): Pgchar; cdecl;
g_regex_get_string_number: function(regex: PGRegex; name: Pgchar): gint; cdecl;
g_regex_get_type: function:TGType; cdecl;
g_regex_match: function(regex: PGRegex; string_: Pgchar; match_options: TGRegexMatchFlags; match_info: PPGMatchInfo): gboolean; cdecl;
g_regex_match_all: function(regex: PGRegex; string_: Pgchar; match_options: TGRegexMatchFlags; match_info: PPGMatchInfo): gboolean; cdecl;
g_regex_match_all_full: function(regex: PGRegex; string_: Pgchar; string_len: gssize; start_position: gint; match_options: TGRegexMatchFlags; match_info: PPGMatchInfo; error: PPGError): gboolean; cdecl;
g_regex_match_full: function(regex: PGRegex; string_: Pgchar; string_len: gssize; start_position: gint; match_options: TGRegexMatchFlags; match_info: PPGMatchInfo; error: PPGError): gboolean; cdecl;
g_regex_match_simple: function(pattern: Pgchar; string_: Pgchar; compile_options: TGRegexCompileFlags; match_options: TGRegexMatchFlags): gboolean; cdecl;
g_regex_new: function(pattern: Pgchar; compile_options: TGRegexCompileFlags; match_options: TGRegexMatchFlags; error: PPGError): PGRegex; cdecl;
g_regex_ref: function(regex: PGRegex): PGRegex; cdecl;
g_regex_replace: function(regex: PGRegex; string_: Pgchar; string_len: gssize; start_position: gint; replacement: Pgchar; match_options: TGRegexMatchFlags; error: PPGError): Pgchar; cdecl;
g_regex_replace_eval: function(regex: PGRegex; string_: Pgchar; string_len: gssize; start_position: gint; match_options: TGRegexMatchFlags; eval: TGRegexEvalCallback; user_data: gpointer; error: PPGError): Pgchar; cdecl;
g_regex_replace_literal: function(regex: PGRegex; string_: Pgchar; string_len: gssize; start_position: gint; replacement: Pgchar; match_options: TGRegexMatchFlags; error: PPGError): Pgchar; cdecl;
g_regex_split: function(regex: PGRegex; string_: Pgchar; match_options: TGRegexMatchFlags): PPgchar; cdecl;
g_regex_split_full: function(regex: PGRegex; string_: Pgchar; string_len: gssize; start_position: gint; match_options: TGRegexMatchFlags; max_tokens: gint; error: PPGError): PPgchar; cdecl;
g_regex_split_simple: function(pattern: Pgchar; string_: Pgchar; compile_options: TGRegexCompileFlags; match_options: TGRegexMatchFlags): PPgchar; cdecl;
g_regex_unref: procedure(regex: PGRegex); cdecl;
g_reload_user_special_dirs_cache: procedure; cdecl;
g_return_if_fail_warning: procedure(log_domain: Pgchar; pretty_function: Pgchar; expression: Pgchar); cdecl;
g_rmdir: function(filename: Pgchar): gint; cdecl;
g_rw_lock_clear: procedure(rw_lock: PGRWLock); cdecl;
g_rw_lock_init: procedure(rw_lock: PGRWLock); cdecl;
g_rw_lock_reader_lock: procedure(rw_lock: PGRWLock); cdecl;
g_rw_lock_reader_trylock: function(rw_lock: PGRWLock): gboolean; cdecl;
g_rw_lock_reader_unlock: procedure(rw_lock: PGRWLock); cdecl;
g_rw_lock_writer_lock: procedure(rw_lock: PGRWLock); cdecl;
g_rw_lock_writer_trylock: function(rw_lock: PGRWLock): gboolean; cdecl;
g_rw_lock_writer_unlock: procedure(rw_lock: PGRWLock); cdecl;
g_scanner_cur_line: function(scanner: PGScanner): guint; cdecl;
g_scanner_cur_position: function(scanner: PGScanner): guint; cdecl;
g_scanner_cur_token: function(scanner: PGScanner): TGTokenType; cdecl;
g_scanner_cur_value: function(scanner: PGScanner): TGTokenValue; cdecl;
g_scanner_destroy: procedure(scanner: PGScanner); cdecl;
g_scanner_eof: function(scanner: PGScanner): gboolean; cdecl;
g_scanner_error: procedure(scanner: PGScanner; format: Pgchar; args: array of const); cdecl;
g_scanner_get_next_token: function(scanner: PGScanner): TGTokenType; cdecl;
g_scanner_input_file: procedure(scanner: PGScanner; input_fd: gint); cdecl;
g_scanner_input_text: procedure(scanner: PGScanner; text: Pgchar; text_len: guint); cdecl;
g_scanner_lookup_symbol: function(scanner: PGScanner; symbol: Pgchar): gpointer; cdecl;
g_scanner_new: function(config_templ: PGScannerConfig): PGScanner; cdecl;
g_scanner_peek_next_token: function(scanner: PGScanner): TGTokenType; cdecl;
g_scanner_scope_add_symbol: procedure(scanner: PGScanner; scope_id: guint; symbol: Pgchar; value: gpointer); cdecl;
g_scanner_scope_foreach_symbol: procedure(scanner: PGScanner; scope_id: guint; func: TGHFunc; user_data: gpointer); cdecl;
g_scanner_scope_lookup_symbol: function(scanner: PGScanner; scope_id: guint; symbol: Pgchar): gpointer; cdecl;
g_scanner_scope_remove_symbol: procedure(scanner: PGScanner; scope_id: guint; symbol: Pgchar); cdecl;
g_scanner_set_scope: function(scanner: PGScanner; scope_id: guint): guint; cdecl;
g_scanner_sync_file_offset: procedure(scanner: PGScanner); cdecl;
g_scanner_unexp_token: procedure(scanner: PGScanner; expected_token: TGTokenType; identifier_spec: Pgchar; symbol_spec: Pgchar; symbol_name: Pgchar; message: Pgchar; is_error: gint); cdecl;
g_scanner_warn: procedure(scanner: PGScanner; format: Pgchar; args: array of const); cdecl;
g_sequence_append: function(seq: PGSequence; data: gpointer): PGSequenceIter; cdecl;
g_sequence_foreach: procedure(seq: PGSequence; func: TGFunc; user_data: gpointer); cdecl;
g_sequence_foreach_range: procedure(begin_: PGSequenceIter; end_: PGSequenceIter; func: TGFunc; user_data: gpointer); cdecl;
g_sequence_free: procedure(seq: PGSequence); cdecl;
g_sequence_get: function(iter: PGSequenceIter): gpointer; cdecl;
g_sequence_get_begin_iter: function(seq: PGSequence): PGSequenceIter; cdecl;
g_sequence_get_end_iter: function(seq: PGSequence): PGSequenceIter; cdecl;
g_sequence_get_iter_at_pos: function(seq: PGSequence; pos: gint): PGSequenceIter; cdecl;
g_sequence_get_length: function(seq: PGSequence): gint; cdecl;
g_sequence_insert_before: function(iter: PGSequenceIter; data: gpointer): PGSequenceIter; cdecl;
g_sequence_insert_sorted: function(seq: PGSequence; data: gpointer; cmp_func: TGCompareDataFunc; cmp_data: gpointer): PGSequenceIter; cdecl;
g_sequence_insert_sorted_iter: function(seq: PGSequence; data: gpointer; iter_cmp: TGSequenceIterCompareFunc; cmp_data: gpointer): PGSequenceIter; cdecl;
g_sequence_iter_compare: function(a: PGSequenceIter; b: PGSequenceIter): gint; cdecl;
g_sequence_iter_get_position: function(iter: PGSequenceIter): gint; cdecl;
g_sequence_iter_get_sequence: function(iter: PGSequenceIter): PGSequence; cdecl;
g_sequence_iter_is_begin: function(iter: PGSequenceIter): gboolean; cdecl;
g_sequence_iter_is_end: function(iter: PGSequenceIter): gboolean; cdecl;
g_sequence_iter_move: function(iter: PGSequenceIter; delta: gint): PGSequenceIter; cdecl;
g_sequence_iter_next: function(iter: PGSequenceIter): PGSequenceIter; cdecl;
g_sequence_iter_prev: function(iter: PGSequenceIter): PGSequenceIter; cdecl;
g_sequence_lookup: function(seq: PGSequence; data: gpointer; cmp_func: TGCompareDataFunc; cmp_data: gpointer): PGSequenceIter; cdecl;
g_sequence_lookup_iter: function(seq: PGSequence; data: gpointer; iter_cmp: TGSequenceIterCompareFunc; cmp_data: gpointer): PGSequenceIter; cdecl;
g_sequence_move: procedure(src: PGSequenceIter; dest: PGSequenceIter); cdecl;
g_sequence_move_range: procedure(dest: PGSequenceIter; begin_: PGSequenceIter; end_: PGSequenceIter); cdecl;
g_sequence_new: function(data_destroy: TGDestroyNotify): PGSequence; cdecl;
g_sequence_prepend: function(seq: PGSequence; data: gpointer): PGSequenceIter; cdecl;
g_sequence_range_get_midpoint: function(begin_: PGSequenceIter; end_: PGSequenceIter): PGSequenceIter; cdecl;
g_sequence_remove: procedure(iter: PGSequenceIter); cdecl;
g_sequence_remove_range: procedure(begin_: PGSequenceIter; end_: PGSequenceIter); cdecl;
g_sequence_search: function(seq: PGSequence; data: gpointer; cmp_func: TGCompareDataFunc; cmp_data: gpointer): PGSequenceIter; cdecl;
g_sequence_search_iter: function(seq: PGSequence; data: gpointer; iter_cmp: TGSequenceIterCompareFunc; cmp_data: gpointer): PGSequenceIter; cdecl;
g_sequence_set: procedure(iter: PGSequenceIter; data: gpointer); cdecl;
g_sequence_sort: procedure(seq: PGSequence; cmp_func: TGCompareDataFunc; cmp_data: gpointer); cdecl;
g_sequence_sort_changed: procedure(iter: PGSequenceIter; cmp_func: TGCompareDataFunc; cmp_data: gpointer); cdecl;
g_sequence_sort_changed_iter: procedure(iter: PGSequenceIter; iter_cmp: TGSequenceIterCompareFunc; cmp_data: gpointer); cdecl;
g_sequence_sort_iter: procedure(seq: PGSequence; cmp_func: TGSequenceIterCompareFunc; cmp_data: gpointer); cdecl;
g_sequence_swap: procedure(a: PGSequenceIter; b: PGSequenceIter); cdecl;
g_set_application_name: procedure(application_name: Pgchar); cdecl;
g_set_error: procedure(err: PPGError; domain: TGQuark; code: gint; format: Pgchar; args: array of const); cdecl;
g_set_error_literal: procedure(err: PPGError; domain: TGQuark; code: gint; message: Pgchar); cdecl;
g_set_prgname: procedure(prgname: Pgchar); cdecl;
g_set_print_handler: function(func: TGPrintFunc): TGPrintFunc; cdecl;
g_set_printerr_handler: function(func: TGPrintFunc): TGPrintFunc; cdecl;
g_setenv: function(variable: Pgchar; value: Pgchar; overwrite: gboolean): gboolean; cdecl;
g_shell_error_quark: function: TGQuark; cdecl;
g_shell_parse_argv: function(command_line: Pgchar; argcp: Pgint; argvp: PPPgchar; error: PPGError): gboolean; cdecl;
g_shell_quote: function(unquoted_string: Pgchar): Pgchar; cdecl;
g_shell_unquote: function(quoted_string: Pgchar; error: PPGError): Pgchar; cdecl;
g_slice_alloc0: function(block_size: gsize): gpointer; cdecl;
g_slice_alloc: function(block_size: gsize): gpointer; cdecl;
g_slice_copy: function(block_size: gsize; mem_block: Pgpointer): gpointer; cdecl;
g_slice_free1: procedure(block_size: gsize; mem_block: gpointer); cdecl;
g_slice_free_chain_with_offset: procedure(block_size: gsize; mem_chain: gpointer; next_offset: gsize); cdecl;
g_slice_get_config: function(ckey: TGSliceConfig): gint64; cdecl;
g_slice_get_config_state: function(ckey: TGSliceConfig; address: gint64; n_values: Pguint): Pgint64; cdecl;
g_slice_set_config: procedure(ckey: TGSliceConfig; value: gint64); cdecl;
g_slist_alloc: function: PGSList; cdecl;
g_slist_append: function(list: PGSList; data: gpointer): PGSList; cdecl;
g_slist_concat: function(list1: PGSList; list2: PGSList): PGSList; cdecl;
g_slist_copy: function(list: PGSList): PGSList; cdecl;
g_slist_copy_deep: function(list: PGSList; func: TGCopyFunc; user_data: gpointer): PGSList; cdecl;
g_slist_delete_link: function(list: PGSList; link_: PGSList): PGSList; cdecl;
g_slist_find: function(list: PGSList; data: Pgpointer): PGSList; cdecl;
g_slist_find_custom: function(list: PGSList; data: Pgpointer; func: TGCompareFunc): PGSList; cdecl;
g_slist_foreach: procedure(list: PGSList; func: TGFunc; user_data: gpointer); cdecl;
g_slist_free: procedure(list: PGSList); cdecl;
g_slist_free_1: procedure(list: PGSList); cdecl;
g_slist_free_full: procedure(list: PGSList; free_func: TGDestroyNotify); cdecl;
g_slist_index: function(list: PGSList; data: Pgpointer): gint; cdecl;
g_slist_insert: function(list: PGSList; data: gpointer; position: gint): PGSList; cdecl;
g_slist_insert_before: function(slist: PGSList; sibling: PGSList; data: gpointer): PGSList; cdecl;
g_slist_insert_sorted: function(list: PGSList; data: gpointer; func: TGCompareFunc): PGSList; cdecl;
g_slist_insert_sorted_with_data: function(list: PGSList; data: gpointer; func: TGCompareDataFunc; user_data: gpointer): PGSList; cdecl;
g_slist_last: function(list: PGSList): PGSList; cdecl;
g_slist_length: function(list: PGSList): guint; cdecl;
g_slist_nth: function(list: PGSList; n: guint): PGSList; cdecl;
g_slist_nth_data: function(list: PGSList; n: guint): gpointer; cdecl;
g_slist_position: function(list: PGSList; llink: PGSList): gint; cdecl;
g_slist_prepend: function(list: PGSList; data: gpointer): PGSList; cdecl;
g_slist_remove: function(list: PGSList; data: Pgpointer): PGSList; cdecl;
g_slist_remove_all: function(list: PGSList; data: Pgpointer): PGSList; cdecl;
g_slist_remove_link: function(list: PGSList; link_: PGSList): PGSList; cdecl;
g_slist_reverse: function(list: PGSList): PGSList; cdecl;
g_slist_sort: function(list: PGSList; compare_func: TGCompareFunc): PGSList; cdecl;
g_slist_sort_with_data: function(list: PGSList; compare_func: TGCompareDataFunc; user_data: gpointer): PGSList; cdecl;
g_snprintf: function(string_: Pgchar; n: gulong; format: Pgchar; args: array of const): gint; cdecl;
g_source_add_child_source: procedure(source: PGSource; child_source: PGSource); cdecl;
g_source_add_poll: procedure(source: PGSource; fd: PGPollFD); cdecl;
g_source_add_unix_fd: function(source: PGSource; fd: gint; events: TGIOCondition): gpointer; cdecl;
g_source_attach: function(source: PGSource; context: PGMainContext): guint; cdecl;
g_source_destroy: procedure(source: PGSource); cdecl;
g_source_get_can_recurse: function(source: PGSource): gboolean; cdecl;
g_source_get_context: function(source: PGSource): PGMainContext; cdecl;
g_source_get_id: function(source: PGSource): guint; cdecl;
g_source_get_name: function(source: PGSource): Pgchar; cdecl;
g_source_get_priority: function(source: PGSource): gint; cdecl;
g_source_get_ready_time: function(source: PGSource): gint64; cdecl;
g_source_get_time: function(source: PGSource): gint64; cdecl;
g_source_get_type: function:TGType; cdecl;
g_source_is_destroyed: function(source: PGSource): gboolean; cdecl;
g_source_modify_unix_fd: procedure(source: PGSource; tag: gpointer; new_events: TGIOCondition); cdecl;
g_source_new: function(source_funcs: PGSourceFuncs; struct_size: guint): PGSource; cdecl;
g_source_query_unix_fd: function(source: PGSource; tag: gpointer): TGIOCondition; cdecl;
g_source_ref: function(source: PGSource): PGSource; cdecl;
g_source_remove: function(tag: guint): gboolean; cdecl;
g_source_remove_by_funcs_user_data: function(funcs: PGSourceFuncs; user_data: gpointer): gboolean; cdecl;
g_source_remove_by_user_data: function(user_data: gpointer): gboolean; cdecl;
g_source_remove_child_source: procedure(source: PGSource; child_source: PGSource); cdecl;
g_source_remove_poll: procedure(source: PGSource; fd: PGPollFD); cdecl;
g_source_remove_unix_fd: procedure(source: PGSource; tag: gpointer); cdecl;
g_source_set_callback: procedure(source: PGSource; func: TGSourceFunc; data: gpointer; notify: TGDestroyNotify); cdecl;
g_source_set_callback_indirect: procedure(source: PGSource; callback_data: gpointer; callback_funcs: PGSourceCallbackFuncs); cdecl;
g_source_set_can_recurse: procedure(source: PGSource; can_recurse: gboolean); cdecl;
g_source_set_funcs: procedure(source: PGSource; funcs: PGSourceFuncs); cdecl;
g_source_set_name: procedure(source: PGSource; name: Pgchar); cdecl;
g_source_set_name_by_id: procedure(tag: guint; name: Pgchar); cdecl;
g_source_set_priority: procedure(source: PGSource; priority: gint); cdecl;
g_source_set_ready_time: procedure(source: PGSource; ready_time: gint64); cdecl;
g_source_unref: procedure(source: PGSource); cdecl;
g_spaced_primes_closest: function(num: guint): guint; cdecl;
g_spawn_async: function(working_directory: Pgchar; argv: PPgchar; envp: PPgchar; flags: TGSpawnFlags; child_setup: TGSpawnChildSetupFunc; user_data: gpointer; child_pid: PGPid; error: PPGError): gboolean; cdecl;
g_spawn_async_with_pipes: function(working_directory: Pgchar; argv: PPgchar; envp: PPgchar; flags: TGSpawnFlags; child_setup: TGSpawnChildSetupFunc; user_data: gpointer; child_pid: PGPid; standard_input: Pgint; standard_output: Pgint; standard_error: Pgint; error: PPGError): gboolean; cdecl;
g_spawn_check_exit_status: function(exit_status: gint; error: PPGError): gboolean; cdecl;
g_spawn_close_pid: procedure(pid: TGPid); cdecl;
g_spawn_command_line_async: function(command_line: Pgchar; error: PPGError): gboolean; cdecl;
g_spawn_command_line_sync: function(command_line: Pgchar; standard_output: PPgchar; standard_error: PPgchar; exit_status: Pgint; error: PPGError): gboolean; cdecl;
g_spawn_error_quark: function: TGQuark; cdecl;
g_spawn_exit_error_quark: function: TGQuark; cdecl;
g_spawn_sync: function(working_directory: Pgchar; argv: PPgchar; envp: PPgchar; flags: TGSpawnFlags; child_setup: TGSpawnChildSetupFunc; user_data: gpointer; standard_output: PPgchar; standard_error: PPgchar; exit_status: Pgint; error: PPGError): gboolean; cdecl;
g_sprintf: function(string_: Pgchar; format: Pgchar; args: array of const): gint; cdecl;
g_stpcpy: function(dest: Pgchar; src: Pgchar): Pgchar; cdecl;
g_str_equal: function(v1: Pgpointer; v2: Pgpointer): gboolean; cdecl;
g_str_has_prefix: function(str: Pgchar; prefix: Pgchar): gboolean; cdecl;
g_str_has_suffix: function(str: Pgchar; suffix: Pgchar): gboolean; cdecl;
g_str_hash: function(v: Pgpointer): guint; cdecl;
g_strcanon: function(string_: Pgchar; valid_chars: Pgchar; substitutor: gchar): Pgchar; cdecl;
g_strcasecmp: function(s1: Pgchar; s2: Pgchar): gint; cdecl;
g_strchomp: function(string_: Pgchar): Pgchar; cdecl;
g_strchug: function(string_: Pgchar): Pgchar; cdecl;
g_strcmp0: function(str1: Pgchar; str2: Pgchar): gint; cdecl;
g_strcompress: function(source: Pgchar): Pgchar; cdecl;
g_strconcat: function(string1: Pgchar; args: array of const): Pgchar; cdecl;
g_strdelimit: function(string_: Pgchar; delimiters: Pgchar; new_delimiter: gchar): Pgchar; cdecl;
g_strdown: function(string_: Pgchar): Pgchar; cdecl;
g_strdup: function(str: Pgchar): Pgchar; cdecl;
g_strdup_printf: function(format: Pgchar; args: array of const): Pgchar; cdecl;
g_strdup_vprintf: function(format: Pgchar; args: Tva_list): Pgchar; cdecl;
g_strdupv: function(str_array: PPgchar): PPgchar; cdecl;
g_strerror: function(errnum: gint): Pgchar; cdecl;
g_strescape: function(source: Pgchar; exceptions: Pgchar): Pgchar; cdecl;
g_strfreev: procedure(str_array: PPgchar); cdecl;
g_string_append: function(string_: PGString; val: Pgchar): PGString; cdecl;
g_string_append_c: function(string_: PGString; c: gchar): PGString; cdecl;
g_string_append_len: function(string_: PGString; val: Pgchar; len: gssize): PGString; cdecl;
g_string_append_printf: procedure(string_: PGString; format: Pgchar; args: array of const); cdecl;
g_string_append_unichar: function(string_: PGString; wc: gunichar): PGString; cdecl;
g_string_append_uri_escaped: function(string_: PGString; unescaped: Pgchar; reserved_chars_allowed: Pgchar; allow_utf8: gboolean): PGString; cdecl;
g_string_append_vprintf: procedure(string_: PGString; format: Pgchar; args: Tva_list); cdecl;
g_string_ascii_down: function(string_: PGString): PGString; cdecl;
g_string_ascii_up: function(string_: PGString): PGString; cdecl;
g_string_assign: function(string_: PGString; rval: Pgchar): PGString; cdecl;
g_string_chunk_clear: procedure(chunk: PGStringChunk); cdecl;
g_string_chunk_free: procedure(chunk: PGStringChunk); cdecl;
g_string_chunk_insert: function(chunk: PGStringChunk; string_: Pgchar): Pgchar; cdecl;
g_string_chunk_insert_const: function(chunk: PGStringChunk; string_: Pgchar): Pgchar; cdecl;
g_string_chunk_insert_len: function(chunk: PGStringChunk; string_: Pgchar; len: gssize): Pgchar; cdecl;
g_string_chunk_new: function(size: gsize): PGStringChunk; cdecl;
g_string_equal: function(v: PGString; v2: PGString): gboolean; cdecl;
g_string_erase: function(string_: PGString; pos: gssize; len: gssize): PGString; cdecl;
g_string_free: function(string_: PGString; free_segment: gboolean): Pgchar; cdecl;
g_string_free_to_bytes: function(string_: PGString): PGBytes; cdecl;
g_string_hash: function(str: PGString): guint; cdecl;
g_string_insert: function(string_: PGString; pos: gssize; val: Pgchar): PGString; cdecl;
g_string_insert_c: function(string_: PGString; pos: gssize; c: gchar): PGString; cdecl;
g_string_insert_len: function(string_: PGString; pos: gssize; val: Pgchar; len: gssize): PGString; cdecl;
g_string_insert_unichar: function(string_: PGString; pos: gssize; wc: gunichar): PGString; cdecl;
g_string_new: function(init: Pgchar): PGString; cdecl;
g_string_new_len: function(init: Pgchar; len: gssize): PGString; cdecl;
g_string_overwrite: function(string_: PGString; pos: gsize; val: Pgchar): PGString; cdecl;
g_string_overwrite_len: function(string_: PGString; pos: gsize; val: Pgchar; len: gssize): PGString; cdecl;
g_string_prepend: function(string_: PGString; val: Pgchar): PGString; cdecl;
g_string_prepend_c: function(string_: PGString; c: gchar): PGString; cdecl;
g_string_prepend_len: function(string_: PGString; val: Pgchar; len: gssize): PGString; cdecl;
g_string_prepend_unichar: function(string_: PGString; wc: gunichar): PGString; cdecl;
g_string_printf: procedure(string_: PGString; format: Pgchar; args: array of const); cdecl;
g_string_set_size: function(string_: PGString; len: gsize): PGString; cdecl;
g_string_sized_new: function(dfl_size: gsize): PGString; cdecl;
g_string_truncate: function(string_: PGString; len: gsize): PGString; cdecl;
g_string_vprintf: procedure(string_: PGString; format: Pgchar; args: Tva_list); cdecl;
g_strip_context: function(msgid: Pgchar; msgval: Pgchar): Pgchar; cdecl;
g_strjoin: function(separator: Pgchar; args: array of const): Pgchar; cdecl;
g_strjoinv: function(separator: Pgchar; str_array: PPgchar): Pgchar; cdecl;
g_strlcat: function(dest: Pgchar; src: Pgchar; dest_size: gsize): gsize; cdecl;
g_strlcpy: function(dest: Pgchar; src: Pgchar; dest_size: gsize): gsize; cdecl;
g_strncasecmp: function(s1: Pgchar; s2: Pgchar; n: guint): gint; cdecl;
g_strndup: function(str: Pgchar; n: gsize): Pgchar; cdecl;
g_strnfill: function(length: gsize; fill_char: gchar): Pgchar; cdecl;
g_strreverse: function(string_: Pgchar): Pgchar; cdecl;
g_strrstr: function(haystack: Pgchar; needle: Pgchar): Pgchar; cdecl;
g_strrstr_len: function(haystack: Pgchar; haystack_len: gssize; needle: Pgchar): Pgchar; cdecl;
g_strsignal: function(signum: gint): Pgchar; cdecl;
g_strsplit: function(string_: Pgchar; delimiter: Pgchar; max_tokens: gint): PPgchar; cdecl;
g_strsplit_set: function(string_: Pgchar; delimiters: Pgchar; max_tokens: gint): PPgchar; cdecl;
g_strstr_len: function(haystack: Pgchar; haystack_len: gssize; needle: Pgchar): Pgchar; cdecl;
g_strtod: function(nptr: Pgchar; endptr: PPgchar): gdouble; cdecl;
g_strup: function(string_: Pgchar): Pgchar; cdecl;
g_strv_get_type: function: TGType; cdecl;
g_strv_length: function(str_array: PPgchar): guint; cdecl;
g_test_add_data_func: procedure(testpath: Pgchar; test_data: Pgpointer; test_func: TGTestDataFunc); cdecl;
g_test_add_data_func_full: procedure(testpath: Pgchar; test_data: gpointer; test_func: TGTestDataFunc; data_free_func: TGDestroyNotify); cdecl;
g_test_add_func: procedure(testpath: Pgchar; test_func: TGTestFunc); cdecl;
g_test_add_vtable: procedure(testpath: Pgchar; data_size: gsize; test_data: Pgpointer; data_setup: TGTestFixtureFunc; data_test: TGTestFixtureFunc; data_teardown: TGTestFixtureFunc); cdecl;
g_test_assert_expected_messages_internal: procedure(domain: Pgchar; file_: Pgchar; line: gint; func: Pgchar); cdecl;
g_test_bug: procedure(bug_uri_snippet: Pgchar); cdecl;
g_test_bug_base: procedure(uri_pattern: Pgchar); cdecl;
g_test_create_case: function(test_name: Pgchar; data_size: gsize; test_data: Pgpointer; data_setup: TGTestFixtureFunc; data_test: TGTestFixtureFunc; data_teardown: TGTestFixtureFunc): PGTestCase; cdecl;
g_test_create_suite: function(suite_name: Pgchar): PGTestSuite; cdecl;
g_test_expect_message: procedure(log_domain: Pgchar; log_level: TGLogLevelFlags; pattern: Pgchar); cdecl;
g_test_fail: procedure; cdecl;
g_test_get_root: function: PGTestSuite; cdecl;
g_test_init: procedure(argc: Pgint; argv: PPPgchar; args: array of const); cdecl;
g_test_log_buffer_free: procedure(tbuffer: PGTestLogBuffer); cdecl;
g_test_log_buffer_new: function: PGTestLogBuffer; cdecl;
g_test_log_buffer_pop: function(tbuffer: PGTestLogBuffer): PGTestLogMsg; cdecl;
g_test_log_buffer_push: procedure(tbuffer: PGTestLogBuffer; n_bytes: guint; bytes: Pguint8); cdecl;
g_test_log_msg_free: procedure(tmsg: PGTestLogMsg); cdecl;
g_test_log_set_fatal_handler: procedure(log_func: TGTestLogFatalFunc; user_data: gpointer); cdecl;
g_test_log_type_name: function(log_type: TGTestLogType): Pgchar; cdecl;
g_test_maximized_result: procedure(maximized_quantity: gdouble; format: Pgchar; args: array of const); cdecl;
g_test_message: procedure(format: Pgchar; args: array of const); cdecl;
g_test_minimized_result: procedure(minimized_quantity: gdouble; format: Pgchar; args: array of const); cdecl;
g_test_queue_destroy: procedure(destroy_func: TGDestroyNotify; destroy_data: gpointer); cdecl;
g_test_queue_free: procedure(gfree_pointer: gpointer); cdecl;
g_test_rand_double: function: gdouble; cdecl;
g_test_rand_double_range: function(range_start: gdouble; range_end: gdouble): gdouble; cdecl;
g_test_rand_int: function: gint32; cdecl;
g_test_rand_int_range: function(begin_: gint32; end_: gint32): gint32; cdecl;
g_test_run: function: gint; cdecl;
g_test_run_suite: function(suite: PGTestSuite): gint; cdecl;
g_test_suite_add: procedure(suite: PGTestSuite; test_case: PGTestCase); cdecl;
g_test_suite_add_suite: procedure(suite: PGTestSuite; nestedsuite: PGTestSuite); cdecl;
g_test_timer_elapsed: function: gdouble; cdecl;
g_test_timer_last: function: gdouble; cdecl;
g_test_timer_start: procedure; cdecl;
g_test_trap_assertions: procedure(domain: Pgchar; file_: Pgchar; line: gint; func: Pgchar; assertion_flags: guint64; pattern: Pgchar); cdecl;
g_test_trap_fork: function(usec_timeout: guint64; test_trap_flags: TGTestTrapFlags): gboolean; cdecl;
g_test_trap_has_passed: function: gboolean; cdecl;
g_test_trap_reached_timeout: function: gboolean; cdecl;
g_thread_error_quark: function: TGQuark; cdecl;
g_thread_exit: procedure(retval: gpointer); cdecl;
g_thread_get_type: function:TGType; cdecl;
g_thread_join: function(thread: PGThread): gpointer; cdecl;
g_thread_new: function(name: Pgchar; func: TGThreadFunc; data: gpointer): PGThread; cdecl;
g_thread_pool_free: procedure(pool: PGThreadPool; immediate: gboolean; wait_: gboolean); cdecl;
g_thread_pool_get_max_idle_time: function: guint; cdecl;
g_thread_pool_get_max_threads: function(pool: PGThreadPool): gint; cdecl;
g_thread_pool_get_max_unused_threads: function: gint; cdecl;
g_thread_pool_get_num_threads: function(pool: PGThreadPool): guint; cdecl;
g_thread_pool_get_num_unused_threads: function: guint; cdecl;
g_thread_pool_new: function(func: TGFunc; user_data: gpointer; max_threads: gint; exclusive: gboolean; error: PPGError): PGThreadPool; cdecl;
g_thread_pool_push: function(pool: PGThreadPool; data: gpointer; error: PPGError): gboolean; cdecl;
g_thread_pool_set_max_idle_time: procedure(interval: guint); cdecl;
g_thread_pool_set_max_threads: function(pool: PGThreadPool; max_threads: gint; error: PPGError): gboolean; cdecl;
g_thread_pool_set_max_unused_threads: procedure(max_threads: gint); cdecl;
g_thread_pool_set_sort_function: procedure(pool: PGThreadPool; func: TGCompareDataFunc; user_data: gpointer); cdecl;
g_thread_pool_stop_unused_threads: procedure; cdecl;
g_thread_pool_unprocessed: function(pool: PGThreadPool): guint; cdecl;
g_thread_ref: function(thread: PGThread): PGThread; cdecl;
g_thread_self: function: PGThread; cdecl;
g_thread_try_new: function(name: Pgchar; func: TGThreadFunc; data: gpointer; error: PPGError): PGThread; cdecl;
g_thread_unref: procedure(thread: PGThread); cdecl;
g_thread_yield: procedure; cdecl;
g_time_val_add: procedure(time_: PGTimeVal; microseconds: glong); cdecl;
g_time_val_from_iso8601: function(iso_date: Pgchar; time_: PGTimeVal): gboolean; cdecl;
g_time_val_to_iso8601: function(time_: PGTimeVal): Pgchar; cdecl;
g_time_zone_adjust_time: function(tz: PGTimeZone; type_: TGTimeType; time_: Pgint64): gint; cdecl;
g_time_zone_find_interval: function(tz: PGTimeZone; type_: TGTimeType; time_: gint64): gint; cdecl;
g_time_zone_get_abbreviation: function(tz: PGTimeZone; interval: gint): Pgchar; cdecl;
g_time_zone_get_offset: function(tz: PGTimeZone; interval: gint): gint32; cdecl;
g_time_zone_get_type: function:TGType; cdecl;
g_time_zone_is_dst: function(tz: PGTimeZone; interval: gint): gboolean; cdecl;
g_time_zone_new: function(identifier: Pgchar): PGTimeZone; cdecl;
g_time_zone_new_local: function: PGTimeZone; cdecl;
g_time_zone_new_utc: function: PGTimeZone; cdecl;
g_time_zone_ref: function(tz: PGTimeZone): PGTimeZone; cdecl;
g_time_zone_unref: procedure(tz: PGTimeZone); cdecl;
g_timeout_add: function(interval: guint; function_: TGSourceFunc; data: gpointer): guint; cdecl;
g_timeout_add_full: function(priority: gint; interval: guint; function_: TGSourceFunc; data: gpointer; notify: TGDestroyNotify): guint; cdecl;
g_timeout_add_seconds: function(interval: guint; function_: TGSourceFunc; data: gpointer): guint; cdecl;
g_timeout_add_seconds_full: function(priority: gint; interval: guint; function_: TGSourceFunc; data: gpointer; notify: TGDestroyNotify): guint; cdecl;
g_timeout_source_new: function(interval: guint): PGSource; cdecl;
g_timeout_source_new_seconds: function(interval: guint): PGSource; cdecl;
g_timer_continue: procedure(timer: PGTimer); cdecl;
g_timer_destroy: procedure(timer: PGTimer); cdecl;
g_timer_elapsed: function(timer: PGTimer; microseconds: Pgulong): gdouble; cdecl;
g_timer_new: function: PGTimer; cdecl;
g_timer_reset: procedure(timer: PGTimer); cdecl;
g_timer_start: procedure(timer: PGTimer); cdecl;
g_timer_stop: procedure(timer: PGTimer); cdecl;
g_trash_stack_height: function(stack_p: PPGTrashStack): guint; cdecl;
g_trash_stack_peek: function(stack_p: PPGTrashStack): gpointer; cdecl;
g_trash_stack_pop: function(stack_p: PPGTrashStack): gpointer; cdecl;
g_trash_stack_push: procedure(stack_p: PPGTrashStack; data_p: gpointer); cdecl;
g_tree_destroy: procedure(tree: PGTree); cdecl;
g_tree_foreach: procedure(tree: PGTree; func: TGTraverseFunc; user_data: gpointer); cdecl;
g_tree_height: function(tree: PGTree): gint; cdecl;
g_tree_insert: procedure(tree: PGTree; key: gpointer; value: gpointer); cdecl;
g_tree_lookup: function(tree: PGTree; key: Pgpointer): gpointer; cdecl;
g_tree_lookup_extended: function(tree: PGTree; lookup_key: Pgpointer; orig_key: Pgpointer; value: Pgpointer): gboolean; cdecl;
g_tree_new: function(key_compare_func: TGCompareFunc): PGTree; cdecl;
g_tree_new_full: function(key_compare_func: TGCompareDataFunc; key_compare_data: gpointer; key_destroy_func: TGDestroyNotify; value_destroy_func: TGDestroyNotify): PGTree; cdecl;
g_tree_new_with_data: function(key_compare_func: TGCompareDataFunc; key_compare_data: gpointer): PGTree; cdecl;
g_tree_nnodes: function(tree: PGTree): gint; cdecl;
g_tree_ref: function(tree: PGTree): PGTree; cdecl;
g_tree_remove: function(tree: PGTree; key: Pgpointer): gboolean; cdecl;
g_tree_replace: procedure(tree: PGTree; key: gpointer; value: gpointer); cdecl;
g_tree_search: function(tree: PGTree; search_func: TGCompareFunc; user_data: Pgpointer): gpointer; cdecl;
g_tree_steal: function(tree: PGTree; key: Pgpointer): gboolean; cdecl;
g_tree_unref: procedure(tree: PGTree); cdecl;
g_try_malloc0: function(n_bytes: gsize): gpointer; cdecl;
g_try_malloc0_n: function(n_blocks: gsize; n_block_bytes: gsize): gpointer; cdecl;
g_try_malloc: function(n_bytes: gsize): gpointer; cdecl;
g_try_malloc_n: function(n_blocks: gsize; n_block_bytes: gsize): gpointer; cdecl;
g_try_realloc: function(mem: gpointer; n_bytes: gsize): gpointer; cdecl;
g_try_realloc_n: function(mem: gpointer; n_blocks: gsize; n_block_bytes: gsize): gpointer; cdecl;
g_ucs4_to_utf16: function(str: Pgunichar; len: glong; items_read: Pglong; items_written: Pglong; error: PPGError): Pguint16; cdecl;
g_ucs4_to_utf8: function(str: Pgunichar; len: glong; items_read: Pglong; items_written: Pglong; error: PPGError): Pgchar; cdecl;
g_unichar_break_type: function(c: gunichar): TGUnicodeBreakType; cdecl;
g_unichar_combining_class: function(uc: gunichar): gint; cdecl;
g_unichar_compose: function(a: gunichar; b: gunichar; ch: Pgunichar): gboolean; cdecl;
g_unichar_decompose: function(ch: gunichar; a: Pgunichar; b: Pgunichar): gboolean; cdecl;
g_unichar_digit_value: function(c: gunichar): gint; cdecl;
g_unichar_fully_decompose: function(ch: gunichar; compat: gboolean; result_: Pgunichar; result_len: gsize): gsize; cdecl;
g_unichar_get_mirror_char: function(ch: gunichar; mirrored_ch: Pgunichar): gboolean; cdecl;
g_unichar_get_script: function(ch: gunichar): TGUnicodeScript; cdecl;
g_unichar_isalnum: function(c: gunichar): gboolean; cdecl;
g_unichar_isalpha: function(c: gunichar): gboolean; cdecl;
g_unichar_iscntrl: function(c: gunichar): gboolean; cdecl;
g_unichar_isdefined: function(c: gunichar): gboolean; cdecl;
g_unichar_isdigit: function(c: gunichar): gboolean; cdecl;
g_unichar_isgraph: function(c: gunichar): gboolean; cdecl;
g_unichar_islower: function(c: gunichar): gboolean; cdecl;
g_unichar_ismark: function(c: gunichar): gboolean; cdecl;
g_unichar_isprint: function(c: gunichar): gboolean; cdecl;
g_unichar_ispunct: function(c: gunichar): gboolean; cdecl;
g_unichar_isspace: function(c: gunichar): gboolean; cdecl;
g_unichar_istitle: function(c: gunichar): gboolean; cdecl;
g_unichar_isupper: function(c: gunichar): gboolean; cdecl;
g_unichar_iswide: function(c: gunichar): gboolean; cdecl;
g_unichar_iswide_cjk: function(c: gunichar): gboolean; cdecl;
g_unichar_isxdigit: function(c: gunichar): gboolean; cdecl;
g_unichar_iszerowidth: function(c: gunichar): gboolean; cdecl;
g_unichar_to_utf8: function(c: gunichar; outbuf: Pgchar): gint; cdecl;
g_unichar_tolower: function(c: gunichar): gunichar; cdecl;
g_unichar_totitle: function(c: gunichar): gunichar; cdecl;
g_unichar_toupper: function(c: gunichar): gunichar; cdecl;
g_unichar_type: function(c: gunichar): TGUnicodeType; cdecl;
g_unichar_validate: function(ch: gunichar): gboolean; cdecl;
g_unichar_xdigit_value: function(c: gunichar): gint; cdecl;
g_unicode_canonical_decomposition: function(ch: gunichar; result_len: Pgsize): Pgunichar; cdecl;
g_unicode_canonical_ordering: procedure(string_: Pgunichar; len: gsize); cdecl;
g_unicode_script_from_iso15924: function(iso15924: guint32): TGUnicodeScript; cdecl;
g_unicode_script_to_iso15924: function(script: TGUnicodeScript): guint32; cdecl;
g_unix_error_quark: function: TGQuark; cdecl;
g_unix_fd_add: function(fd: gint; condition: TGIOCondition; function_: TGUnixFDSourceFunc; user_data: gpointer): guint; cdecl;
g_unix_fd_add_full: function(priority: gint; fd: gint; condition: TGIOCondition; function_: TGUnixFDSourceFunc; user_data: gpointer; notify: TGDestroyNotify): guint; cdecl;
g_unix_fd_source_new: function(fd: gint; condition: TGIOCondition): PGSource; cdecl;
g_unix_open_pipe: function(fds: Pgint; flags: gint; error: PPGError): gboolean; cdecl;
g_unix_set_fd_nonblocking: function(fd: gint; nonblock: gboolean; error: PPGError): gboolean; cdecl;
g_unix_signal_add: function(signum: gint; handler: TGSourceFunc; user_data: gpointer): guint; cdecl;
g_unix_signal_add_full: function(priority: gint; signum: gint; handler: TGSourceFunc; user_data: gpointer; notify: TGDestroyNotify): guint; cdecl;
g_unix_signal_source_new: function(signum: gint): PGSource; cdecl;
g_unlink: function(filename: Pgchar): gint; cdecl;
g_unsetenv: procedure(variable: Pgchar); cdecl;
g_uri_escape_string: function(unescaped: Pgchar; reserved_chars_allowed: Pgchar; allow_utf8: gboolean): Pgchar; cdecl;
g_uri_list_extract_uris: function(uri_list: Pgchar): PPgchar; cdecl;
g_uri_parse_scheme: function(uri: Pgchar): Pgchar; cdecl;
g_uri_unescape_segment: function(escaped_string: Pgchar; escaped_string_end: Pgchar; illegal_characters: Pgchar): Pgchar; cdecl;
g_uri_unescape_string: function(escaped_string: Pgchar; illegal_characters: Pgchar): Pgchar; cdecl;
g_usleep: procedure(microseconds: gulong); cdecl;
g_utf16_to_ucs4: function(str: Pguint16; len: glong; items_read: Pglong; items_written: Pglong; error: PPGError): Pgunichar; cdecl;
g_utf16_to_utf8: function(str: Pguint16; len: glong; items_read: Pglong; items_written: Pglong; error: PPGError): Pgchar; cdecl;
g_utf8_casefold: function(str: Pgchar; len: gssize): Pgchar; cdecl;
g_utf8_collate: function(str1: Pgchar; str2: Pgchar): gint; cdecl;
g_utf8_collate_key: function(str: Pgchar; len: gssize): Pgchar; cdecl;
g_utf8_collate_key_for_filename: function(str: Pgchar; len: gssize): Pgchar; cdecl;
g_utf8_find_next_char: function(p: Pgchar; end_: Pgchar): Pgchar; cdecl;
g_utf8_find_prev_char: function(str: Pgchar; p: Pgchar): Pgchar; cdecl;
g_utf8_get_char: function(p: Pgchar): gunichar; cdecl;
g_utf8_get_char_validated: function(p: Pgchar; max_len: gssize): gunichar; cdecl;
g_utf8_normalize: function(str: Pgchar; len: gssize; mode: TGNormalizeMode): Pgchar; cdecl;
g_utf8_offset_to_pointer: function(str: Pgchar; offset: glong): Pgchar; cdecl;
g_utf8_pointer_to_offset: function(str: Pgchar; pos: Pgchar): glong; cdecl;
g_utf8_prev_char: function(p: Pgchar): Pgchar; cdecl;
g_utf8_strchr: function(p: Pgchar; len: gssize; c: gunichar): Pgchar; cdecl;
g_utf8_strdown: function(str: Pgchar; len: gssize): Pgchar; cdecl;
g_utf8_strlen: function(p: Pgchar; max: gssize): glong; cdecl;
g_utf8_strncpy: function(dest: Pgchar; src: Pgchar; n: gsize): Pgchar; cdecl;
g_utf8_strrchr: function(p: Pgchar; len: gssize; c: gunichar): Pgchar; cdecl;
g_utf8_strreverse: function(str: Pgchar; len: gssize): Pgchar; cdecl;
g_utf8_strup: function(str: Pgchar; len: gssize): Pgchar; cdecl;
g_utf8_substring: function(str: Pgchar; start_pos: glong; end_pos: glong): Pgchar; cdecl;
g_utf8_to_ucs4: function(str: Pgchar; len: glong; items_read: Pglong; items_written: Pglong; error: PPGError): Pgunichar; cdecl;
g_utf8_to_ucs4_fast: function(str: Pgchar; len: glong; items_written: Pglong): Pgunichar; cdecl;
g_utf8_to_utf16: function(str: Pgchar; len: glong; items_read: Pglong; items_written: Pglong; error: PPGError): Pguint16; cdecl;
g_utf8_validate: function(str: Pgchar; max_len: gssize; end_: PPgchar): gboolean; cdecl;
g_variant_builder_add: procedure(builder: PGVariantBuilder; format_string: Pgchar; args: array of const); cdecl;
g_variant_builder_add_parsed: procedure(builder: PGVariantBuilder; format: Pgchar; args: array of const); cdecl;
g_variant_builder_add_value: procedure(builder: PGVariantBuilder; value: PGVariant); cdecl;
g_variant_builder_clear: procedure(builder: PGVariantBuilder); cdecl;
g_variant_builder_close: procedure(builder: PGVariantBuilder); cdecl;
g_variant_builder_end: function(builder: PGVariantBuilder): PGVariant; cdecl;
g_variant_builder_get_type: function:TGType; cdecl;
g_variant_builder_init: procedure(builder: PGVariantBuilder; type_: PGVariantType); cdecl;
g_variant_builder_new: function(type_: PGVariantType): PGVariantBuilder; cdecl;
g_variant_builder_open: procedure(builder: PGVariantBuilder; type_: PGVariantType); cdecl;
g_variant_builder_ref: function(builder: PGVariantBuilder): PGVariantBuilder; cdecl;
g_variant_builder_unref: procedure(builder: PGVariantBuilder); cdecl;
g_variant_byteswap: function(value: PGVariant): PGVariant; cdecl;
g_variant_check_format_string: function(value: PGVariant; format_string: Pgchar; copy_only: gboolean): gboolean; cdecl;
g_variant_classify: function(value: PGVariant): TGVariantClass; cdecl;
g_variant_compare: function(one: PGVariant; two: PGVariant): gint; cdecl;
g_variant_dup_bytestring: function(value: PGVariant; length: Pgsize): Pgchar; cdecl;
g_variant_dup_bytestring_array: function(value: PGVariant; length: Pgsize): PPgchar; cdecl;
g_variant_dup_objv: function(value: PGVariant; length: Pgsize): PPgchar; cdecl;
g_variant_dup_string: function(value: PGVariant; length: Pgsize): Pgchar; cdecl;
g_variant_dup_strv: function(value: PGVariant; length: Pgsize): PPgchar; cdecl;
g_variant_equal: function(one: PGVariant; two: PGVariant): gboolean; cdecl;
g_variant_get: procedure(value: PGVariant; format_string: Pgchar; args: array of const); cdecl;
g_variant_get_boolean: function(value: PGVariant): gboolean; cdecl;
g_variant_get_byte: function(value: PGVariant): guint8; cdecl;
g_variant_get_bytestring: function(value: PGVariant): Pgchar; cdecl;
g_variant_get_bytestring_array: function(value: PGVariant; length: Pgsize): PPgchar; cdecl;
g_variant_get_child: procedure(value: PGVariant; index_: gsize; format_string: Pgchar; args: array of const); cdecl;
g_variant_get_child_value: function(value: PGVariant; index_: gsize): PGVariant; cdecl;
g_variant_get_data: function(value: PGVariant): Pgpointer; cdecl;
g_variant_get_data_as_bytes: function(value: PGVariant): PGBytes; cdecl;
g_variant_get_double: function(value: PGVariant): gdouble; cdecl;
g_variant_get_fixed_array: function(value: PGVariant; n_elements: Pgsize; element_size: gsize): gpointer; cdecl;
g_variant_get_gtype: function: TGType; cdecl;
g_variant_get_handle: function(value: PGVariant): gint32; cdecl;
g_variant_get_int16: function(value: PGVariant): gint16; cdecl;
g_variant_get_int32: function(value: PGVariant): gint32; cdecl;
g_variant_get_int64: function(value: PGVariant): gint64; cdecl;
g_variant_get_maybe: function(value: PGVariant): PGVariant; cdecl;
g_variant_get_normal_form: function(value: PGVariant): PGVariant; cdecl;
g_variant_get_objv: function(value: PGVariant; length: Pgsize): PPgchar; cdecl;
g_variant_get_size: function(value: PGVariant): gsize; cdecl;
g_variant_get_string: function(value: PGVariant; length: Pgsize): Pgchar; cdecl;
g_variant_get_strv: function(value: PGVariant; length: Pgsize): PPgchar; cdecl;
g_variant_get_type: function(value: PGVariant): PGVariantType; cdecl;
g_variant_get_type_string: function(value: PGVariant): Pgchar; cdecl;
g_variant_get_uint16: function(value: PGVariant): guint16; cdecl;
g_variant_get_uint32: function(value: PGVariant): guint32; cdecl;
g_variant_get_uint64: function(value: PGVariant): guint64; cdecl;
g_variant_get_va: procedure(value: PGVariant; format_string: Pgchar; endptr: PPgchar; app: Pva_list); cdecl;
g_variant_get_variant: function(value: PGVariant): PGVariant; cdecl;
g_variant_hash: function(value: PGVariant): guint; cdecl;
g_variant_is_container: function(value: PGVariant): gboolean; cdecl;
g_variant_is_floating: function(value: PGVariant): gboolean; cdecl;
g_variant_is_normal_form: function(value: PGVariant): gboolean; cdecl;
g_variant_is_object_path: function(string_: Pgchar): gboolean; cdecl;
g_variant_is_of_type: function(value: PGVariant; type_: PGVariantType): gboolean; cdecl;
g_variant_is_signature: function(string_: Pgchar): gboolean; cdecl;
g_variant_iter_copy: function(iter: PGVariantIter): PGVariantIter; cdecl;
g_variant_iter_free: procedure(iter: PGVariantIter); cdecl;
g_variant_iter_init: function(iter: PGVariantIter; value: PGVariant): gsize; cdecl;
g_variant_iter_loop: function(iter: PGVariantIter; format_string: Pgchar; args: array of const): gboolean; cdecl;
g_variant_iter_n_children: function(iter: PGVariantIter): gsize; cdecl;
g_variant_iter_new: function(value: PGVariant): PGVariantIter; cdecl;
g_variant_iter_next: function(iter: PGVariantIter; format_string: Pgchar; args: array of const): gboolean; cdecl;
g_variant_iter_next_value: function(iter: PGVariantIter): PGVariant; cdecl;
g_variant_lookup: function(dictionary: PGVariant; key: Pgchar; format_string: Pgchar; args: array of const): gboolean; cdecl;
g_variant_lookup_value: function(dictionary: PGVariant; key: Pgchar; expected_type: PGVariantType): PGVariant; cdecl;
g_variant_n_children: function(value: PGVariant): gsize; cdecl;
g_variant_new: function(format_string: Pgchar; args: array of const): PGVariant; cdecl;
g_variant_new_array: function(child_type: PGVariantType; children: PPGVariant; n_children: gsize): PGVariant; cdecl;
g_variant_new_boolean: function(value: gboolean): PGVariant; cdecl;
g_variant_new_byte: function(value: guint8): PGVariant; cdecl;
g_variant_new_bytestring: function(string_: Pgchar): PGVariant; cdecl;
g_variant_new_bytestring_array: function(strv: PPgchar; length: gssize): PGVariant; cdecl;
g_variant_new_dict_entry: function(key: PGVariant; value: PGVariant): PGVariant; cdecl;
g_variant_new_double: function(value: gdouble): PGVariant; cdecl;
g_variant_new_fixed_array: function(element_type: PGVariantType; elements: Pgpointer; n_elements: gsize; element_size: gsize): PGVariant; cdecl;
g_variant_new_from_bytes: function(type_: PGVariantType; bytes: PGBytes; trusted: gboolean): PGVariant; cdecl;
g_variant_new_from_data: function(type_: PGVariantType; data: guint8; size: gsize; trusted: gboolean; notify: TGDestroyNotify; user_data: gpointer): PGVariant; cdecl;
g_variant_new_handle: function(value: gint32): PGVariant; cdecl;
g_variant_new_int16: function(value: gint16): PGVariant; cdecl;
g_variant_new_int32: function(value: gint32): PGVariant; cdecl;
g_variant_new_int64: function(value: gint64): PGVariant; cdecl;
g_variant_new_maybe: function(child_type: PGVariantType; child: PGVariant): PGVariant; cdecl;
g_variant_new_object_path: function(object_path: Pgchar): PGVariant; cdecl;
g_variant_new_objv: function(strv: PPgchar; length: gssize): PGVariant; cdecl;
g_variant_new_parsed: function(format: Pgchar; args: array of const): PGVariant; cdecl;
g_variant_new_parsed_va: function(format: Pgchar; app: Pva_list): PGVariant; cdecl;
g_variant_new_signature: function(signature: Pgchar): PGVariant; cdecl;
g_variant_new_string: function(string_: Pgchar): PGVariant; cdecl;
g_variant_new_strv: function(strv: PPgchar; length: gssize): PGVariant; cdecl;
g_variant_new_tuple: function(children: PPGVariant; n_children: gsize): PGVariant; cdecl;
g_variant_new_uint16: function(value: guint16): PGVariant; cdecl;
g_variant_new_uint32: function(value: guint32): PGVariant; cdecl;
g_variant_new_uint64: function(value: guint64): PGVariant; cdecl;
g_variant_new_va: function(format_string: Pgchar; endptr: PPgchar; app: Pva_list): PGVariant; cdecl;
g_variant_new_variant: function(value: PGVariant): PGVariant; cdecl;
g_variant_parse: function(type_: PGVariantType; text: Pgchar; limit: Pgchar; endptr: PPgchar; error: PPGError): PGVariant; cdecl;
g_variant_parser_get_error_quark: function: TGQuark; cdecl;
g_variant_print: function(value: PGVariant; type_annotate: gboolean): Pgchar; cdecl;
g_variant_print_string: function(value: PGVariant; string_: PGString; type_annotate: gboolean): PGString; cdecl;
g_variant_ref: function(value: PGVariant): PGVariant; cdecl;
g_variant_ref_sink: function(value: PGVariant): PGVariant; cdecl;
g_variant_store: procedure(value: PGVariant; data: gpointer); cdecl;
g_variant_take_ref: function(value: PGVariant): PGVariant; cdecl;
g_variant_type_checked_: function(arg0: Pgchar): PGVariantType; cdecl;
g_variant_type_copy: function(type_: PGVariantType): PGVariantType; cdecl;
g_variant_type_dup_string: function(type_: PGVariantType): Pgchar; cdecl;
g_variant_type_element: function(type_: PGVariantType): PGVariantType; cdecl;
g_variant_type_equal: function(type1: PGVariantType; type2: PGVariantType): gboolean; cdecl;
g_variant_type_first: function(type_: PGVariantType): PGVariantType; cdecl;
g_variant_type_free: procedure(type_: PGVariantType); cdecl;
g_variant_type_get_gtype: function:TGType; cdecl;
g_variant_type_get_string_length: function(type_: PGVariantType): gsize; cdecl;
g_variant_type_hash: function(type_: PGVariantType): guint; cdecl;
g_variant_type_is_array: function(type_: PGVariantType): gboolean; cdecl;
g_variant_type_is_basic: function(type_: PGVariantType): gboolean; cdecl;
g_variant_type_is_container: function(type_: PGVariantType): gboolean; cdecl;
g_variant_type_is_definite: function(type_: PGVariantType): gboolean; cdecl;
g_variant_type_is_dict_entry: function(type_: PGVariantType): gboolean; cdecl;
g_variant_type_is_maybe: function(type_: PGVariantType): gboolean; cdecl;
g_variant_type_is_subtype_of: function(type_: PGVariantType; supertype: PGVariantType): gboolean; cdecl;
g_variant_type_is_tuple: function(type_: PGVariantType): gboolean; cdecl;
g_variant_type_is_variant: function(type_: PGVariantType): gboolean; cdecl;
g_variant_type_key: function(type_: PGVariantType): PGVariantType; cdecl;
g_variant_type_n_items: function(type_: PGVariantType): gsize; cdecl;
g_variant_type_new: function(type_string: Pgchar): PGVariantType; cdecl;
g_variant_type_new_array: function(element: PGVariantType): PGVariantType; cdecl;
g_variant_type_new_dict_entry: function(key: PGVariantType; value: PGVariantType): PGVariantType; cdecl;
g_variant_type_new_maybe: function(element: PGVariantType): PGVariantType; cdecl;
g_variant_type_new_tuple: function(items: PPGVariantType; length: gint): PGVariantType; cdecl;
g_variant_type_next: function(type_: PGVariantType): PGVariantType; cdecl;
g_variant_type_peek_string: function(type_: PGVariantType): Pgchar; cdecl;
g_variant_type_string_is_valid: function(type_string: Pgchar): gboolean; cdecl;
g_variant_type_string_scan: function(string_: Pgchar; limit: Pgchar; endptr: PPgchar): gboolean; cdecl;
g_variant_type_value: function(type_: PGVariantType): PGVariantType; cdecl;
g_variant_unref: procedure(value: PGVariant); cdecl;
g_vasprintf: function(string_: PPgchar; format: Pgchar; args: Tva_list): gint; cdecl;
g_vfprintf: function(file_: Pgpointer; format: Pgchar; args: Tva_list): gint; cdecl;
g_vprintf: function(format: Pgchar; args: Tva_list): gint; cdecl;
g_vsnprintf: function(string_: Pgchar; n: gulong; format: Pgchar; args: Tva_list): gint; cdecl;
g_vsprintf: function(string_: Pgchar; format: Pgchar; args: Tva_list): gint; cdecl;
g_warn_message: procedure(domain: Pgchar; file_: Pgchar; line: gint; func: Pgchar; warnexpr: Pgchar); cdecl;
glib_check_version: function(required_major: guint; required_minor: guint; required_micro: guint): Pgchar; cdecl;
implementation
uses
  DynLibs;


var
  libglib_2_0_so_0: TLibHandle;
  libgobject_2_0_so_0: TLibHandle;
procedure LoadLibraries;
begin
  libglib_2_0_so_0 := SafeLoadLibrary('libglib-2.0.so.0');
  libgobject_2_0_so_0 := SafeLoadLibrary('libgobject-2.0.so.0');
end;

procedure LoadProcs;
  procedure LoadProc(var AProc: Pointer; AName: String);
  var
    ProcPtr: Pointer;
  begin
    ProcPtr := GetProcedureAddress(libglib_2_0_so_0, AName);
      if ProcPtr = nil then
        ProcPtr := GetProcedureAddress(libgobject_2_0_so_0, AName);
    AProc := ProcPtr;
  end;
begin
  LoadProc(Pointer(g_access), 'g_access');
  LoadProc(Pointer(g_array_append_vals), 'g_array_append_vals');
  LoadProc(Pointer(g_array_free), 'g_array_free');
  LoadProc(Pointer(g_array_get_element_size), 'g_array_get_element_size');
  LoadProc(Pointer(g_array_get_type), 'g_array_get_type');
  LoadProc(Pointer(g_array_insert_vals), 'g_array_insert_vals');
  LoadProc(Pointer(g_array_new), 'g_array_new');
  LoadProc(Pointer(g_array_prepend_vals), 'g_array_prepend_vals');
  LoadProc(Pointer(g_array_ref), 'g_array_ref');
  LoadProc(Pointer(g_array_remove_index), 'g_array_remove_index');
  LoadProc(Pointer(g_array_remove_index_fast), 'g_array_remove_index_fast');
  LoadProc(Pointer(g_array_remove_range), 'g_array_remove_range');
  LoadProc(Pointer(g_array_set_clear_func), 'g_array_set_clear_func');
  LoadProc(Pointer(g_array_set_size), 'g_array_set_size');
  LoadProc(Pointer(g_array_sized_new), 'g_array_sized_new');
  LoadProc(Pointer(g_array_sort), 'g_array_sort');
  LoadProc(Pointer(g_array_sort_with_data), 'g_array_sort_with_data');
  LoadProc(Pointer(g_array_unref), 'g_array_unref');
  LoadProc(Pointer(g_ascii_digit_value), 'g_ascii_digit_value');
  LoadProc(Pointer(g_ascii_dtostr), 'g_ascii_dtostr');
  LoadProc(Pointer(g_ascii_formatd), 'g_ascii_formatd');
  LoadProc(Pointer(g_ascii_strcasecmp), 'g_ascii_strcasecmp');
  LoadProc(Pointer(g_ascii_strdown), 'g_ascii_strdown');
  LoadProc(Pointer(g_ascii_strncasecmp), 'g_ascii_strncasecmp');
  LoadProc(Pointer(g_ascii_strtod), 'g_ascii_strtod');
  LoadProc(Pointer(g_ascii_strtoll), 'g_ascii_strtoll');
  LoadProc(Pointer(g_ascii_strtoull), 'g_ascii_strtoull');
  LoadProc(Pointer(g_ascii_strup), 'g_ascii_strup');
  LoadProc(Pointer(g_ascii_tolower), 'g_ascii_tolower');
  LoadProc(Pointer(g_ascii_toupper), 'g_ascii_toupper');
  LoadProc(Pointer(g_ascii_xdigit_value), 'g_ascii_xdigit_value');
  LoadProc(Pointer(g_assert_warning), 'g_assert_warning');
  LoadProc(Pointer(g_assertion_message), 'g_assertion_message');
  LoadProc(Pointer(g_assertion_message_cmpnum), 'g_assertion_message_cmpnum');
  LoadProc(Pointer(g_assertion_message_cmpstr), 'g_assertion_message_cmpstr');
  LoadProc(Pointer(g_assertion_message_error), 'g_assertion_message_error');
  LoadProc(Pointer(g_assertion_message_expr), 'g_assertion_message_expr');
  LoadProc(Pointer(g_async_queue_length), 'g_async_queue_length');
  LoadProc(Pointer(g_async_queue_length_unlocked), 'g_async_queue_length_unlocked');
  LoadProc(Pointer(g_async_queue_lock), 'g_async_queue_lock');
  LoadProc(Pointer(g_async_queue_new), 'g_async_queue_new');
  LoadProc(Pointer(g_async_queue_new_full), 'g_async_queue_new_full');
  LoadProc(Pointer(g_async_queue_pop), 'g_async_queue_pop');
  LoadProc(Pointer(g_async_queue_pop_unlocked), 'g_async_queue_pop_unlocked');
  LoadProc(Pointer(g_async_queue_push), 'g_async_queue_push');
  LoadProc(Pointer(g_async_queue_push_sorted), 'g_async_queue_push_sorted');
  LoadProc(Pointer(g_async_queue_push_sorted_unlocked), 'g_async_queue_push_sorted_unlocked');
  LoadProc(Pointer(g_async_queue_push_unlocked), 'g_async_queue_push_unlocked');
  LoadProc(Pointer(g_async_queue_ref), 'g_async_queue_ref');
  LoadProc(Pointer(g_async_queue_sort), 'g_async_queue_sort');
  LoadProc(Pointer(g_async_queue_sort_unlocked), 'g_async_queue_sort_unlocked');
  LoadProc(Pointer(g_async_queue_timeout_pop), 'g_async_queue_timeout_pop');
  LoadProc(Pointer(g_async_queue_timeout_pop_unlocked), 'g_async_queue_timeout_pop_unlocked');
  LoadProc(Pointer(g_async_queue_try_pop), 'g_async_queue_try_pop');
  LoadProc(Pointer(g_async_queue_try_pop_unlocked), 'g_async_queue_try_pop_unlocked');
  LoadProc(Pointer(g_async_queue_unlock), 'g_async_queue_unlock');
  LoadProc(Pointer(g_async_queue_unref), 'g_async_queue_unref');
  LoadProc(Pointer(g_atexit), 'g_atexit');
  LoadProc(Pointer(g_atomic_int_add), 'g_atomic_int_add');
  LoadProc(Pointer(g_atomic_int_and), 'g_atomic_int_and');
  LoadProc(Pointer(g_atomic_int_compare_and_exchange), 'g_atomic_int_compare_and_exchange');
  LoadProc(Pointer(g_atomic_int_dec_and_test), 'g_atomic_int_dec_and_test');
  LoadProc(Pointer(g_atomic_int_exchange_and_add), 'g_atomic_int_exchange_and_add');
  LoadProc(Pointer(g_atomic_int_get), 'g_atomic_int_get');
  LoadProc(Pointer(g_atomic_int_inc), 'g_atomic_int_inc');
  LoadProc(Pointer(g_atomic_int_or), 'g_atomic_int_or');
  LoadProc(Pointer(g_atomic_int_set), 'g_atomic_int_set');
  LoadProc(Pointer(g_atomic_int_xor), 'g_atomic_int_xor');
  LoadProc(Pointer(g_atomic_pointer_add), 'g_atomic_pointer_add');
  LoadProc(Pointer(g_atomic_pointer_and), 'g_atomic_pointer_and');
  LoadProc(Pointer(g_atomic_pointer_compare_and_exchange), 'g_atomic_pointer_compare_and_exchange');
  LoadProc(Pointer(g_atomic_pointer_get), 'g_atomic_pointer_get');
  LoadProc(Pointer(g_atomic_pointer_or), 'g_atomic_pointer_or');
  LoadProc(Pointer(g_atomic_pointer_set), 'g_atomic_pointer_set');
  LoadProc(Pointer(g_atomic_pointer_xor), 'g_atomic_pointer_xor');
  LoadProc(Pointer(g_base64_decode), 'g_base64_decode');
  LoadProc(Pointer(g_base64_decode_inplace), 'g_base64_decode_inplace');
  LoadProc(Pointer(g_base64_decode_step), 'g_base64_decode_step');
  LoadProc(Pointer(g_base64_encode), 'g_base64_encode');
  LoadProc(Pointer(g_base64_encode_close), 'g_base64_encode_close');
  LoadProc(Pointer(g_base64_encode_step), 'g_base64_encode_step');
  LoadProc(Pointer(g_basename), 'g_basename');
  LoadProc(Pointer(g_bit_lock), 'g_bit_lock');
  LoadProc(Pointer(g_bit_nth_lsf), 'g_bit_nth_lsf');
  LoadProc(Pointer(g_bit_nth_msf), 'g_bit_nth_msf');
  LoadProc(Pointer(g_bit_storage), 'g_bit_storage');
  LoadProc(Pointer(g_bit_trylock), 'g_bit_trylock');
  LoadProc(Pointer(g_bit_unlock), 'g_bit_unlock');
  LoadProc(Pointer(g_bookmark_file_add_application), 'g_bookmark_file_add_application');
  LoadProc(Pointer(g_bookmark_file_add_group), 'g_bookmark_file_add_group');
  LoadProc(Pointer(g_bookmark_file_error_quark), 'g_bookmark_file_error_quark');
  LoadProc(Pointer(g_bookmark_file_free), 'g_bookmark_file_free');
  LoadProc(Pointer(g_bookmark_file_get_added), 'g_bookmark_file_get_added');
  LoadProc(Pointer(g_bookmark_file_get_app_info), 'g_bookmark_file_get_app_info');
  LoadProc(Pointer(g_bookmark_file_get_applications), 'g_bookmark_file_get_applications');
  LoadProc(Pointer(g_bookmark_file_get_description), 'g_bookmark_file_get_description');
  LoadProc(Pointer(g_bookmark_file_get_groups), 'g_bookmark_file_get_groups');
  LoadProc(Pointer(g_bookmark_file_get_icon), 'g_bookmark_file_get_icon');
  LoadProc(Pointer(g_bookmark_file_get_is_private), 'g_bookmark_file_get_is_private');
  LoadProc(Pointer(g_bookmark_file_get_mime_type), 'g_bookmark_file_get_mime_type');
  LoadProc(Pointer(g_bookmark_file_get_modified), 'g_bookmark_file_get_modified');
  LoadProc(Pointer(g_bookmark_file_get_size), 'g_bookmark_file_get_size');
  LoadProc(Pointer(g_bookmark_file_get_title), 'g_bookmark_file_get_title');
  LoadProc(Pointer(g_bookmark_file_get_uris), 'g_bookmark_file_get_uris');
  LoadProc(Pointer(g_bookmark_file_get_visited), 'g_bookmark_file_get_visited');
  LoadProc(Pointer(g_bookmark_file_has_application), 'g_bookmark_file_has_application');
  LoadProc(Pointer(g_bookmark_file_has_group), 'g_bookmark_file_has_group');
  LoadProc(Pointer(g_bookmark_file_has_item), 'g_bookmark_file_has_item');
  LoadProc(Pointer(g_bookmark_file_load_from_data), 'g_bookmark_file_load_from_data');
  LoadProc(Pointer(g_bookmark_file_load_from_data_dirs), 'g_bookmark_file_load_from_data_dirs');
  LoadProc(Pointer(g_bookmark_file_load_from_file), 'g_bookmark_file_load_from_file');
  LoadProc(Pointer(g_bookmark_file_move_item), 'g_bookmark_file_move_item');
  LoadProc(Pointer(g_bookmark_file_new), 'g_bookmark_file_new');
  LoadProc(Pointer(g_bookmark_file_remove_application), 'g_bookmark_file_remove_application');
  LoadProc(Pointer(g_bookmark_file_remove_group), 'g_bookmark_file_remove_group');
  LoadProc(Pointer(g_bookmark_file_remove_item), 'g_bookmark_file_remove_item');
  LoadProc(Pointer(g_bookmark_file_set_added), 'g_bookmark_file_set_added');
  LoadProc(Pointer(g_bookmark_file_set_app_info), 'g_bookmark_file_set_app_info');
  LoadProc(Pointer(g_bookmark_file_set_description), 'g_bookmark_file_set_description');
  LoadProc(Pointer(g_bookmark_file_set_groups), 'g_bookmark_file_set_groups');
  LoadProc(Pointer(g_bookmark_file_set_icon), 'g_bookmark_file_set_icon');
  LoadProc(Pointer(g_bookmark_file_set_is_private), 'g_bookmark_file_set_is_private');
  LoadProc(Pointer(g_bookmark_file_set_mime_type), 'g_bookmark_file_set_mime_type');
  LoadProc(Pointer(g_bookmark_file_set_modified), 'g_bookmark_file_set_modified');
  LoadProc(Pointer(g_bookmark_file_set_title), 'g_bookmark_file_set_title');
  LoadProc(Pointer(g_bookmark_file_set_visited), 'g_bookmark_file_set_visited');
  LoadProc(Pointer(g_bookmark_file_to_data), 'g_bookmark_file_to_data');
  LoadProc(Pointer(g_bookmark_file_to_file), 'g_bookmark_file_to_file');
  LoadProc(Pointer(g_build_filename), 'g_build_filename');
  LoadProc(Pointer(g_build_filenamev), 'g_build_filenamev');
  LoadProc(Pointer(g_build_path), 'g_build_path');
  LoadProc(Pointer(g_build_pathv), 'g_build_pathv');
  LoadProc(Pointer(g_byte_array_append), 'g_byte_array_append');
  LoadProc(Pointer(g_byte_array_free), 'g_byte_array_free');
  LoadProc(Pointer(g_byte_array_free_to_bytes), 'g_byte_array_free_to_bytes');
  LoadProc(Pointer(g_byte_array_get_type), 'g_byte_array_get_type');
  LoadProc(Pointer(g_byte_array_new), 'g_byte_array_new');
  LoadProc(Pointer(g_byte_array_new_take), 'g_byte_array_new_take');
  LoadProc(Pointer(g_byte_array_prepend), 'g_byte_array_prepend');
  LoadProc(Pointer(g_byte_array_ref), 'g_byte_array_ref');
  LoadProc(Pointer(g_byte_array_remove_index), 'g_byte_array_remove_index');
  LoadProc(Pointer(g_byte_array_remove_index_fast), 'g_byte_array_remove_index_fast');
  LoadProc(Pointer(g_byte_array_remove_range), 'g_byte_array_remove_range');
  LoadProc(Pointer(g_byte_array_set_size), 'g_byte_array_set_size');
  LoadProc(Pointer(g_byte_array_sized_new), 'g_byte_array_sized_new');
  LoadProc(Pointer(g_byte_array_sort), 'g_byte_array_sort');
  LoadProc(Pointer(g_byte_array_sort_with_data), 'g_byte_array_sort_with_data');
  LoadProc(Pointer(g_byte_array_unref), 'g_byte_array_unref');
  LoadProc(Pointer(g_bytes_compare), 'g_bytes_compare');
  LoadProc(Pointer(g_bytes_equal), 'g_bytes_equal');
  LoadProc(Pointer(g_bytes_get_data), 'g_bytes_get_data');
  LoadProc(Pointer(g_bytes_get_size), 'g_bytes_get_size');
  LoadProc(Pointer(g_bytes_get_type), 'g_bytes_get_type');
  LoadProc(Pointer(g_bytes_hash), 'g_bytes_hash');
  LoadProc(Pointer(g_bytes_new), 'g_bytes_new');
  LoadProc(Pointer(g_bytes_new_from_bytes), 'g_bytes_new_from_bytes');
  LoadProc(Pointer(g_bytes_new_static), 'g_bytes_new_static');
  LoadProc(Pointer(g_bytes_new_take), 'g_bytes_new_take');
  LoadProc(Pointer(g_bytes_new_with_free_func), 'g_bytes_new_with_free_func');
  LoadProc(Pointer(g_bytes_ref), 'g_bytes_ref');
  LoadProc(Pointer(g_bytes_unref), 'g_bytes_unref');
  LoadProc(Pointer(g_bytes_unref_to_array), 'g_bytes_unref_to_array');
  LoadProc(Pointer(g_bytes_unref_to_data), 'g_bytes_unref_to_data');
  LoadProc(Pointer(g_chdir), 'g_chdir');
  LoadProc(Pointer(g_checksum_copy), 'g_checksum_copy');
  LoadProc(Pointer(g_checksum_free), 'g_checksum_free');
  LoadProc(Pointer(g_checksum_get_digest), 'g_checksum_get_digest');
  LoadProc(Pointer(g_checksum_get_string), 'g_checksum_get_string');
  LoadProc(Pointer(g_checksum_get_type), 'g_checksum_get_type');
  LoadProc(Pointer(g_checksum_new), 'g_checksum_new');
  LoadProc(Pointer(g_checksum_reset), 'g_checksum_reset');
  LoadProc(Pointer(g_checksum_type_get_length), 'g_checksum_type_get_length');
  LoadProc(Pointer(g_checksum_update), 'g_checksum_update');
  LoadProc(Pointer(g_child_watch_add), 'g_child_watch_add');
  LoadProc(Pointer(g_child_watch_add_full), 'g_child_watch_add_full');
  LoadProc(Pointer(g_child_watch_source_new), 'g_child_watch_source_new');
  LoadProc(Pointer(g_clear_error), 'g_clear_error');
  LoadProc(Pointer(g_clear_pointer), 'g_clear_pointer');
  LoadProc(Pointer(g_close), 'g_close');
  LoadProc(Pointer(g_compute_checksum_for_bytes), 'g_compute_checksum_for_bytes');
  LoadProc(Pointer(g_compute_checksum_for_data), 'g_compute_checksum_for_data');
  LoadProc(Pointer(g_compute_checksum_for_string), 'g_compute_checksum_for_string');
  LoadProc(Pointer(g_compute_hmac_for_data), 'g_compute_hmac_for_data');
  LoadProc(Pointer(g_compute_hmac_for_string), 'g_compute_hmac_for_string');
  LoadProc(Pointer(g_cond_broadcast), 'g_cond_broadcast');
  LoadProc(Pointer(g_cond_clear), 'g_cond_clear');
  LoadProc(Pointer(g_cond_init), 'g_cond_init');
  LoadProc(Pointer(g_cond_signal), 'g_cond_signal');
  LoadProc(Pointer(g_cond_wait), 'g_cond_wait');
  LoadProc(Pointer(g_cond_wait_until), 'g_cond_wait_until');
  LoadProc(Pointer(g_convert), 'g_convert');
  LoadProc(Pointer(g_convert_error_quark), 'g_convert_error_quark');
  LoadProc(Pointer(g_convert_with_fallback), 'g_convert_with_fallback');
  LoadProc(Pointer(g_convert_with_iconv), 'g_convert_with_iconv');
  LoadProc(Pointer(g_datalist_clear), 'g_datalist_clear');
  LoadProc(Pointer(g_datalist_foreach), 'g_datalist_foreach');
  LoadProc(Pointer(g_datalist_get_data), 'g_datalist_get_data');
  LoadProc(Pointer(g_datalist_get_flags), 'g_datalist_get_flags');
  LoadProc(Pointer(g_datalist_id_dup_data), 'g_datalist_id_dup_data');
  LoadProc(Pointer(g_datalist_id_get_data), 'g_datalist_id_get_data');
  LoadProc(Pointer(g_datalist_id_remove_no_notify), 'g_datalist_id_remove_no_notify');
  LoadProc(Pointer(g_datalist_id_replace_data), 'g_datalist_id_replace_data');
  LoadProc(Pointer(g_datalist_id_set_data_full), 'g_datalist_id_set_data_full');
  LoadProc(Pointer(g_datalist_init), 'g_datalist_init');
  LoadProc(Pointer(g_datalist_set_flags), 'g_datalist_set_flags');
  LoadProc(Pointer(g_datalist_unset_flags), 'g_datalist_unset_flags');
  LoadProc(Pointer(g_dataset_destroy), 'g_dataset_destroy');
  LoadProc(Pointer(g_dataset_foreach), 'g_dataset_foreach');
  LoadProc(Pointer(g_dataset_id_get_data), 'g_dataset_id_get_data');
  LoadProc(Pointer(g_dataset_id_remove_no_notify), 'g_dataset_id_remove_no_notify');
  LoadProc(Pointer(g_dataset_id_set_data_full), 'g_dataset_id_set_data_full');
  LoadProc(Pointer(g_date_add_days), 'g_date_add_days');
  LoadProc(Pointer(g_date_add_months), 'g_date_add_months');
  LoadProc(Pointer(g_date_add_years), 'g_date_add_years');
  LoadProc(Pointer(g_date_clamp), 'g_date_clamp');
  LoadProc(Pointer(g_date_clear), 'g_date_clear');
  LoadProc(Pointer(g_date_compare), 'g_date_compare');
  LoadProc(Pointer(g_date_days_between), 'g_date_days_between');
  LoadProc(Pointer(g_date_free), 'g_date_free');
  LoadProc(Pointer(g_date_get_day), 'g_date_get_day');
  LoadProc(Pointer(g_date_get_day_of_year), 'g_date_get_day_of_year');
  LoadProc(Pointer(g_date_get_days_in_month), 'g_date_get_days_in_month');
  LoadProc(Pointer(g_date_get_iso8601_week_of_year), 'g_date_get_iso8601_week_of_year');
  LoadProc(Pointer(g_date_get_julian), 'g_date_get_julian');
  LoadProc(Pointer(g_date_get_monday_week_of_year), 'g_date_get_monday_week_of_year');
  LoadProc(Pointer(g_date_get_monday_weeks_in_year), 'g_date_get_monday_weeks_in_year');
  LoadProc(Pointer(g_date_get_month), 'g_date_get_month');
  LoadProc(Pointer(g_date_get_sunday_week_of_year), 'g_date_get_sunday_week_of_year');
  LoadProc(Pointer(g_date_get_sunday_weeks_in_year), 'g_date_get_sunday_weeks_in_year');
  LoadProc(Pointer(g_date_get_type), 'g_date_get_type');
  LoadProc(Pointer(g_date_get_weekday), 'g_date_get_weekday');
  LoadProc(Pointer(g_date_get_year), 'g_date_get_year');
  LoadProc(Pointer(g_date_is_first_of_month), 'g_date_is_first_of_month');
  LoadProc(Pointer(g_date_is_last_of_month), 'g_date_is_last_of_month');
  LoadProc(Pointer(g_date_is_leap_year), 'g_date_is_leap_year');
  LoadProc(Pointer(g_date_new), 'g_date_new');
  LoadProc(Pointer(g_date_new_dmy), 'g_date_new_dmy');
  LoadProc(Pointer(g_date_new_julian), 'g_date_new_julian');
  LoadProc(Pointer(g_date_order), 'g_date_order');
  LoadProc(Pointer(g_date_set_day), 'g_date_set_day');
  LoadProc(Pointer(g_date_set_dmy), 'g_date_set_dmy');
  LoadProc(Pointer(g_date_set_julian), 'g_date_set_julian');
  LoadProc(Pointer(g_date_set_month), 'g_date_set_month');
  LoadProc(Pointer(g_date_set_parse), 'g_date_set_parse');
  LoadProc(Pointer(g_date_set_time_t), 'g_date_set_time_t');
  LoadProc(Pointer(g_date_set_time_val), 'g_date_set_time_val');
  LoadProc(Pointer(g_date_set_year), 'g_date_set_year');
  LoadProc(Pointer(g_date_strftime), 'g_date_strftime');
  LoadProc(Pointer(g_date_subtract_days), 'g_date_subtract_days');
  LoadProc(Pointer(g_date_subtract_months), 'g_date_subtract_months');
  LoadProc(Pointer(g_date_subtract_years), 'g_date_subtract_years');
  LoadProc(Pointer(g_date_time_add), 'g_date_time_add');
  LoadProc(Pointer(g_date_time_add_days), 'g_date_time_add_days');
  LoadProc(Pointer(g_date_time_add_full), 'g_date_time_add_full');
  LoadProc(Pointer(g_date_time_add_hours), 'g_date_time_add_hours');
  LoadProc(Pointer(g_date_time_add_minutes), 'g_date_time_add_minutes');
  LoadProc(Pointer(g_date_time_add_months), 'g_date_time_add_months');
  LoadProc(Pointer(g_date_time_add_seconds), 'g_date_time_add_seconds');
  LoadProc(Pointer(g_date_time_add_weeks), 'g_date_time_add_weeks');
  LoadProc(Pointer(g_date_time_add_years), 'g_date_time_add_years');
  LoadProc(Pointer(g_date_time_compare), 'g_date_time_compare');
  LoadProc(Pointer(g_date_time_difference), 'g_date_time_difference');
  LoadProc(Pointer(g_date_time_equal), 'g_date_time_equal');
  LoadProc(Pointer(g_date_time_format), 'g_date_time_format');
  LoadProc(Pointer(g_date_time_get_day_of_month), 'g_date_time_get_day_of_month');
  LoadProc(Pointer(g_date_time_get_day_of_week), 'g_date_time_get_day_of_week');
  LoadProc(Pointer(g_date_time_get_day_of_year), 'g_date_time_get_day_of_year');
  LoadProc(Pointer(g_date_time_get_hour), 'g_date_time_get_hour');
  LoadProc(Pointer(g_date_time_get_microsecond), 'g_date_time_get_microsecond');
  LoadProc(Pointer(g_date_time_get_minute), 'g_date_time_get_minute');
  LoadProc(Pointer(g_date_time_get_month), 'g_date_time_get_month');
  LoadProc(Pointer(g_date_time_get_second), 'g_date_time_get_second');
  LoadProc(Pointer(g_date_time_get_seconds), 'g_date_time_get_seconds');
  LoadProc(Pointer(g_date_time_get_timezone_abbreviation), 'g_date_time_get_timezone_abbreviation');
  LoadProc(Pointer(g_date_time_get_type), 'g_date_time_get_type');
  LoadProc(Pointer(g_date_time_get_utc_offset), 'g_date_time_get_utc_offset');
  LoadProc(Pointer(g_date_time_get_week_numbering_year), 'g_date_time_get_week_numbering_year');
  LoadProc(Pointer(g_date_time_get_week_of_year), 'g_date_time_get_week_of_year');
  LoadProc(Pointer(g_date_time_get_year), 'g_date_time_get_year');
  LoadProc(Pointer(g_date_time_get_ymd), 'g_date_time_get_ymd');
  LoadProc(Pointer(g_date_time_hash), 'g_date_time_hash');
  LoadProc(Pointer(g_date_time_is_daylight_savings), 'g_date_time_is_daylight_savings');
  LoadProc(Pointer(g_date_time_new), 'g_date_time_new');
  LoadProc(Pointer(g_date_time_new_from_timeval_local), 'g_date_time_new_from_timeval_local');
  LoadProc(Pointer(g_date_time_new_from_timeval_utc), 'g_date_time_new_from_timeval_utc');
  LoadProc(Pointer(g_date_time_new_from_unix_local), 'g_date_time_new_from_unix_local');
  LoadProc(Pointer(g_date_time_new_from_unix_utc), 'g_date_time_new_from_unix_utc');
  LoadProc(Pointer(g_date_time_new_local), 'g_date_time_new_local');
  LoadProc(Pointer(g_date_time_new_now), 'g_date_time_new_now');
  LoadProc(Pointer(g_date_time_new_now_local), 'g_date_time_new_now_local');
  LoadProc(Pointer(g_date_time_new_now_utc), 'g_date_time_new_now_utc');
  LoadProc(Pointer(g_date_time_new_utc), 'g_date_time_new_utc');
  LoadProc(Pointer(g_date_time_ref), 'g_date_time_ref');
  LoadProc(Pointer(g_date_time_to_local), 'g_date_time_to_local');
  LoadProc(Pointer(g_date_time_to_timeval), 'g_date_time_to_timeval');
  LoadProc(Pointer(g_date_time_to_timezone), 'g_date_time_to_timezone');
  LoadProc(Pointer(g_date_time_to_unix), 'g_date_time_to_unix');
  LoadProc(Pointer(g_date_time_to_utc), 'g_date_time_to_utc');
  LoadProc(Pointer(g_date_time_unref), 'g_date_time_unref');
  LoadProc(Pointer(g_date_to_struct_tm), 'g_date_to_struct_tm');
  LoadProc(Pointer(g_date_valid), 'g_date_valid');
  LoadProc(Pointer(g_date_valid_day), 'g_date_valid_day');
  LoadProc(Pointer(g_date_valid_dmy), 'g_date_valid_dmy');
  LoadProc(Pointer(g_date_valid_julian), 'g_date_valid_julian');
  LoadProc(Pointer(g_date_valid_month), 'g_date_valid_month');
  LoadProc(Pointer(g_date_valid_weekday), 'g_date_valid_weekday');
  LoadProc(Pointer(g_date_valid_year), 'g_date_valid_year');
  LoadProc(Pointer(g_dcgettext), 'g_dcgettext');
  LoadProc(Pointer(g_dgettext), 'g_dgettext');
  LoadProc(Pointer(g_dir_close), 'g_dir_close');
  LoadProc(Pointer(g_dir_make_tmp), 'g_dir_make_tmp');
  LoadProc(Pointer(g_dir_open), 'g_dir_open');
  LoadProc(Pointer(g_dir_read_name), 'g_dir_read_name');
  LoadProc(Pointer(g_dir_rewind), 'g_dir_rewind');
  LoadProc(Pointer(g_direct_equal), 'g_direct_equal');
  LoadProc(Pointer(g_direct_hash), 'g_direct_hash');
  LoadProc(Pointer(g_dngettext), 'g_dngettext');
  LoadProc(Pointer(g_double_equal), 'g_double_equal');
  LoadProc(Pointer(g_double_hash), 'g_double_hash');
  LoadProc(Pointer(g_dpgettext), 'g_dpgettext');
  LoadProc(Pointer(g_dpgettext2), 'g_dpgettext2');
  LoadProc(Pointer(g_environ_getenv), 'g_environ_getenv');
  LoadProc(Pointer(g_environ_setenv), 'g_environ_setenv');
  LoadProc(Pointer(g_environ_unsetenv), 'g_environ_unsetenv');
  LoadProc(Pointer(g_error_copy), 'g_error_copy');
  LoadProc(Pointer(g_error_free), 'g_error_free');
  LoadProc(Pointer(g_error_get_type), 'g_error_get_type');
  LoadProc(Pointer(g_error_matches), 'g_error_matches');
  LoadProc(Pointer(g_error_new), 'g_error_new');
  LoadProc(Pointer(g_error_new_literal), 'g_error_new_literal');
  LoadProc(Pointer(g_error_new_valist), 'g_error_new_valist');
  LoadProc(Pointer(g_file_error_from_errno), 'g_file_error_from_errno');
  LoadProc(Pointer(g_file_error_quark), 'g_file_error_quark');
  LoadProc(Pointer(g_file_get_contents), 'g_file_get_contents');
  LoadProc(Pointer(g_file_open_tmp), 'g_file_open_tmp');
  LoadProc(Pointer(g_file_read_link), 'g_file_read_link');
  LoadProc(Pointer(g_file_set_contents), 'g_file_set_contents');
  LoadProc(Pointer(g_file_test), 'g_file_test');
  LoadProc(Pointer(g_filename_display_basename), 'g_filename_display_basename');
  LoadProc(Pointer(g_filename_display_name), 'g_filename_display_name');
  LoadProc(Pointer(g_filename_from_uri), 'g_filename_from_uri');
  LoadProc(Pointer(g_filename_from_utf8), 'g_filename_from_utf8');
  LoadProc(Pointer(g_filename_to_uri), 'g_filename_to_uri');
  LoadProc(Pointer(g_filename_to_utf8), 'g_filename_to_utf8');
  LoadProc(Pointer(g_find_program_in_path), 'g_find_program_in_path');
  LoadProc(Pointer(g_format_size), 'g_format_size');
  LoadProc(Pointer(g_format_size_for_display), 'g_format_size_for_display');
  LoadProc(Pointer(g_format_size_full), 'g_format_size_full');
  LoadProc(Pointer(g_fprintf), 'g_fprintf');
  LoadProc(Pointer(g_free), 'g_free');
  LoadProc(Pointer(g_get_application_name), 'g_get_application_name');
  LoadProc(Pointer(g_get_charset), 'g_get_charset');
  LoadProc(Pointer(g_get_codeset), 'g_get_codeset');
  LoadProc(Pointer(g_get_current_dir), 'g_get_current_dir');
  LoadProc(Pointer(g_get_current_time), 'g_get_current_time');
  LoadProc(Pointer(g_get_environ), 'g_get_environ');
  LoadProc(Pointer(g_get_filename_charsets), 'g_get_filename_charsets');
  LoadProc(Pointer(g_get_home_dir), 'g_get_home_dir');
  LoadProc(Pointer(g_get_host_name), 'g_get_host_name');
  LoadProc(Pointer(g_get_language_names), 'g_get_language_names');
  LoadProc(Pointer(g_get_locale_variants), 'g_get_locale_variants');
  LoadProc(Pointer(g_get_monotonic_time), 'g_get_monotonic_time');
  LoadProc(Pointer(g_get_num_processors), 'g_get_num_processors');
  LoadProc(Pointer(g_get_prgname), 'g_get_prgname');
  LoadProc(Pointer(g_get_real_name), 'g_get_real_name');
  LoadProc(Pointer(g_get_real_time), 'g_get_real_time');
  LoadProc(Pointer(g_get_system_config_dirs), 'g_get_system_config_dirs');
  LoadProc(Pointer(g_get_system_data_dirs), 'g_get_system_data_dirs');
  LoadProc(Pointer(g_get_tmp_dir), 'g_get_tmp_dir');
  LoadProc(Pointer(g_get_user_cache_dir), 'g_get_user_cache_dir');
  LoadProc(Pointer(g_get_user_config_dir), 'g_get_user_config_dir');
  LoadProc(Pointer(g_get_user_data_dir), 'g_get_user_data_dir');
  LoadProc(Pointer(g_get_user_name), 'g_get_user_name');
  LoadProc(Pointer(g_get_user_runtime_dir), 'g_get_user_runtime_dir');
  LoadProc(Pointer(g_get_user_special_dir), 'g_get_user_special_dir');
  LoadProc(Pointer(g_getenv), 'g_getenv');
  LoadProc(Pointer(g_gstring_get_type), 'g_gstring_get_type');
  LoadProc(Pointer(g_hash_table_add), 'g_hash_table_add');
  LoadProc(Pointer(g_hash_table_contains), 'g_hash_table_contains');
  LoadProc(Pointer(g_hash_table_destroy), 'g_hash_table_destroy');
  LoadProc(Pointer(g_hash_table_find), 'g_hash_table_find');
  LoadProc(Pointer(g_hash_table_foreach), 'g_hash_table_foreach');
  LoadProc(Pointer(g_hash_table_foreach_remove), 'g_hash_table_foreach_remove');
  LoadProc(Pointer(g_hash_table_foreach_steal), 'g_hash_table_foreach_steal');
  LoadProc(Pointer(g_hash_table_get_keys), 'g_hash_table_get_keys');
  LoadProc(Pointer(g_hash_table_get_type), 'g_hash_table_get_type');
  LoadProc(Pointer(g_hash_table_get_values), 'g_hash_table_get_values');
  LoadProc(Pointer(g_hash_table_insert), 'g_hash_table_insert');
  LoadProc(Pointer(g_hash_table_iter_get_hash_table), 'g_hash_table_iter_get_hash_table');
  LoadProc(Pointer(g_hash_table_iter_init), 'g_hash_table_iter_init');
  LoadProc(Pointer(g_hash_table_iter_next), 'g_hash_table_iter_next');
  LoadProc(Pointer(g_hash_table_iter_remove), 'g_hash_table_iter_remove');
  LoadProc(Pointer(g_hash_table_iter_replace), 'g_hash_table_iter_replace');
  LoadProc(Pointer(g_hash_table_iter_steal), 'g_hash_table_iter_steal');
  LoadProc(Pointer(g_hash_table_lookup), 'g_hash_table_lookup');
  LoadProc(Pointer(g_hash_table_lookup_extended), 'g_hash_table_lookup_extended');
  LoadProc(Pointer(g_hash_table_new), 'g_hash_table_new');
  LoadProc(Pointer(g_hash_table_new_full), 'g_hash_table_new_full');
  LoadProc(Pointer(g_hash_table_ref), 'g_hash_table_ref');
  LoadProc(Pointer(g_hash_table_remove), 'g_hash_table_remove');
  LoadProc(Pointer(g_hash_table_remove_all), 'g_hash_table_remove_all');
  LoadProc(Pointer(g_hash_table_replace), 'g_hash_table_replace');
  LoadProc(Pointer(g_hash_table_size), 'g_hash_table_size');
  LoadProc(Pointer(g_hash_table_steal), 'g_hash_table_steal');
  LoadProc(Pointer(g_hash_table_steal_all), 'g_hash_table_steal_all');
  LoadProc(Pointer(g_hash_table_unref), 'g_hash_table_unref');
  LoadProc(Pointer(g_hmac_copy), 'g_hmac_copy');
  LoadProc(Pointer(g_hmac_get_digest), 'g_hmac_get_digest');
  LoadProc(Pointer(g_hmac_get_string), 'g_hmac_get_string');
  LoadProc(Pointer(g_hmac_new), 'g_hmac_new');
  LoadProc(Pointer(g_hmac_ref), 'g_hmac_ref');
  LoadProc(Pointer(g_hmac_unref), 'g_hmac_unref');
  LoadProc(Pointer(g_hmac_update), 'g_hmac_update');
  LoadProc(Pointer(g_hook_alloc), 'g_hook_alloc');
  LoadProc(Pointer(g_hook_compare_ids), 'g_hook_compare_ids');
  LoadProc(Pointer(g_hook_destroy), 'g_hook_destroy');
  LoadProc(Pointer(g_hook_destroy_link), 'g_hook_destroy_link');
  LoadProc(Pointer(g_hook_find), 'g_hook_find');
  LoadProc(Pointer(g_hook_find_data), 'g_hook_find_data');
  LoadProc(Pointer(g_hook_find_func), 'g_hook_find_func');
  LoadProc(Pointer(g_hook_find_func_data), 'g_hook_find_func_data');
  LoadProc(Pointer(g_hook_first_valid), 'g_hook_first_valid');
  LoadProc(Pointer(g_hook_free), 'g_hook_free');
  LoadProc(Pointer(g_hook_get), 'g_hook_get');
  LoadProc(Pointer(g_hook_insert_before), 'g_hook_insert_before');
  LoadProc(Pointer(g_hook_insert_sorted), 'g_hook_insert_sorted');
  LoadProc(Pointer(g_hook_list_clear), 'g_hook_list_clear');
  LoadProc(Pointer(g_hook_list_init), 'g_hook_list_init');
  LoadProc(Pointer(g_hook_list_invoke), 'g_hook_list_invoke');
  LoadProc(Pointer(g_hook_list_invoke_check), 'g_hook_list_invoke_check');
  LoadProc(Pointer(g_hook_list_marshal), 'g_hook_list_marshal');
  LoadProc(Pointer(g_hook_list_marshal_check), 'g_hook_list_marshal_check');
  LoadProc(Pointer(g_hook_next_valid), 'g_hook_next_valid');
  LoadProc(Pointer(g_hook_prepend), 'g_hook_prepend');
  LoadProc(Pointer(g_hook_ref), 'g_hook_ref');
  LoadProc(Pointer(g_hook_unref), 'g_hook_unref');
  LoadProc(Pointer(g_hostname_is_ascii_encoded), 'g_hostname_is_ascii_encoded');
  LoadProc(Pointer(g_hostname_is_ip_address), 'g_hostname_is_ip_address');
  LoadProc(Pointer(g_hostname_is_non_ascii), 'g_hostname_is_non_ascii');
  LoadProc(Pointer(g_hostname_to_ascii), 'g_hostname_to_ascii');
  LoadProc(Pointer(g_hostname_to_unicode), 'g_hostname_to_unicode');
  LoadProc(Pointer(g_iconv), 'g_iconv');
  LoadProc(Pointer(g_iconv_close), 'g_iconv_close');
  LoadProc(Pointer(g_iconv_open), 'g_iconv_open');
  LoadProc(Pointer(g_idle_add), 'g_idle_add');
  LoadProc(Pointer(g_idle_add_full), 'g_idle_add_full');
  LoadProc(Pointer(g_idle_remove_by_data), 'g_idle_remove_by_data');
  LoadProc(Pointer(g_idle_source_new), 'g_idle_source_new');
  LoadProc(Pointer(g_int64_equal), 'g_int64_equal');
  LoadProc(Pointer(g_int64_hash), 'g_int64_hash');
  LoadProc(Pointer(g_int_equal), 'g_int_equal');
  LoadProc(Pointer(g_int_hash), 'g_int_hash');
  LoadProc(Pointer(g_intern_static_string), 'g_intern_static_string');
  LoadProc(Pointer(g_intern_string), 'g_intern_string');
  LoadProc(Pointer(g_io_add_watch), 'g_io_add_watch');
  LoadProc(Pointer(g_io_add_watch_full), 'g_io_add_watch_full');
  LoadProc(Pointer(g_io_channel_error_from_errno), 'g_io_channel_error_from_errno');
  LoadProc(Pointer(g_io_channel_error_quark), 'g_io_channel_error_quark');
  LoadProc(Pointer(g_io_channel_flush), 'g_io_channel_flush');
  LoadProc(Pointer(g_io_channel_get_buffer_condition), 'g_io_channel_get_buffer_condition');
  LoadProc(Pointer(g_io_channel_get_buffer_size), 'g_io_channel_get_buffer_size');
  LoadProc(Pointer(g_io_channel_get_buffered), 'g_io_channel_get_buffered');
  LoadProc(Pointer(g_io_channel_get_close_on_unref), 'g_io_channel_get_close_on_unref');
  LoadProc(Pointer(g_io_channel_get_encoding), 'g_io_channel_get_encoding');
  LoadProc(Pointer(g_io_channel_get_flags), 'g_io_channel_get_flags');
  LoadProc(Pointer(g_io_channel_get_line_term), 'g_io_channel_get_line_term');
  LoadProc(Pointer(g_io_channel_get_type), 'g_io_channel_get_type');
  LoadProc(Pointer(g_io_channel_init), 'g_io_channel_init');
  LoadProc(Pointer(g_io_channel_new_file), 'g_io_channel_new_file');
  LoadProc(Pointer(g_io_channel_read_chars), 'g_io_channel_read_chars');
  LoadProc(Pointer(g_io_channel_read_line), 'g_io_channel_read_line');
  LoadProc(Pointer(g_io_channel_read_line_string), 'g_io_channel_read_line_string');
  LoadProc(Pointer(g_io_channel_read_to_end), 'g_io_channel_read_to_end');
  LoadProc(Pointer(g_io_channel_read_unichar), 'g_io_channel_read_unichar');
  LoadProc(Pointer(g_io_channel_ref), 'g_io_channel_ref');
  LoadProc(Pointer(g_io_channel_seek_position), 'g_io_channel_seek_position');
  LoadProc(Pointer(g_io_channel_set_buffer_size), 'g_io_channel_set_buffer_size');
  LoadProc(Pointer(g_io_channel_set_buffered), 'g_io_channel_set_buffered');
  LoadProc(Pointer(g_io_channel_set_close_on_unref), 'g_io_channel_set_close_on_unref');
  LoadProc(Pointer(g_io_channel_set_encoding), 'g_io_channel_set_encoding');
  LoadProc(Pointer(g_io_channel_set_flags), 'g_io_channel_set_flags');
  LoadProc(Pointer(g_io_channel_set_line_term), 'g_io_channel_set_line_term');
  LoadProc(Pointer(g_io_channel_shutdown), 'g_io_channel_shutdown');
  LoadProc(Pointer(g_io_channel_unix_get_fd), 'g_io_channel_unix_get_fd');
  LoadProc(Pointer(g_io_channel_unix_new), 'g_io_channel_unix_new');
  LoadProc(Pointer(g_io_channel_unref), 'g_io_channel_unref');
  LoadProc(Pointer(g_io_channel_write_chars), 'g_io_channel_write_chars');
  LoadProc(Pointer(g_io_channel_write_unichar), 'g_io_channel_write_unichar');
  LoadProc(Pointer(g_io_create_watch), 'g_io_create_watch');
  LoadProc(Pointer(g_key_file_error_quark), 'g_key_file_error_quark');
  LoadProc(Pointer(g_key_file_free), 'g_key_file_free');
  LoadProc(Pointer(g_key_file_get_boolean), 'g_key_file_get_boolean');
  LoadProc(Pointer(g_key_file_get_boolean_list), 'g_key_file_get_boolean_list');
  LoadProc(Pointer(g_key_file_get_comment), 'g_key_file_get_comment');
  LoadProc(Pointer(g_key_file_get_double), 'g_key_file_get_double');
  LoadProc(Pointer(g_key_file_get_double_list), 'g_key_file_get_double_list');
  LoadProc(Pointer(g_key_file_get_groups), 'g_key_file_get_groups');
  LoadProc(Pointer(g_key_file_get_int64), 'g_key_file_get_int64');
  LoadProc(Pointer(g_key_file_get_integer), 'g_key_file_get_integer');
  LoadProc(Pointer(g_key_file_get_integer_list), 'g_key_file_get_integer_list');
  LoadProc(Pointer(g_key_file_get_keys), 'g_key_file_get_keys');
  LoadProc(Pointer(g_key_file_get_locale_string), 'g_key_file_get_locale_string');
  LoadProc(Pointer(g_key_file_get_locale_string_list), 'g_key_file_get_locale_string_list');
  LoadProc(Pointer(g_key_file_get_start_group), 'g_key_file_get_start_group');
  LoadProc(Pointer(g_key_file_get_string), 'g_key_file_get_string');
  LoadProc(Pointer(g_key_file_get_string_list), 'g_key_file_get_string_list');
  LoadProc(Pointer(g_key_file_get_type), 'g_key_file_get_type');
  LoadProc(Pointer(g_key_file_get_uint64), 'g_key_file_get_uint64');
  LoadProc(Pointer(g_key_file_get_value), 'g_key_file_get_value');
  LoadProc(Pointer(g_key_file_has_group), 'g_key_file_has_group');
  LoadProc(Pointer(g_key_file_has_key), 'g_key_file_has_key');
  LoadProc(Pointer(g_key_file_load_from_data), 'g_key_file_load_from_data');
  LoadProc(Pointer(g_key_file_load_from_data_dirs), 'g_key_file_load_from_data_dirs');
  LoadProc(Pointer(g_key_file_load_from_dirs), 'g_key_file_load_from_dirs');
  LoadProc(Pointer(g_key_file_load_from_file), 'g_key_file_load_from_file');
  LoadProc(Pointer(g_key_file_new), 'g_key_file_new');
  LoadProc(Pointer(g_key_file_ref), 'g_key_file_ref');
  LoadProc(Pointer(g_key_file_remove_comment), 'g_key_file_remove_comment');
  LoadProc(Pointer(g_key_file_remove_group), 'g_key_file_remove_group');
  LoadProc(Pointer(g_key_file_remove_key), 'g_key_file_remove_key');
  LoadProc(Pointer(g_key_file_set_boolean), 'g_key_file_set_boolean');
  LoadProc(Pointer(g_key_file_set_boolean_list), 'g_key_file_set_boolean_list');
  LoadProc(Pointer(g_key_file_set_comment), 'g_key_file_set_comment');
  LoadProc(Pointer(g_key_file_set_double), 'g_key_file_set_double');
  LoadProc(Pointer(g_key_file_set_double_list), 'g_key_file_set_double_list');
  LoadProc(Pointer(g_key_file_set_int64), 'g_key_file_set_int64');
  LoadProc(Pointer(g_key_file_set_integer), 'g_key_file_set_integer');
  LoadProc(Pointer(g_key_file_set_integer_list), 'g_key_file_set_integer_list');
  LoadProc(Pointer(g_key_file_set_list_separator), 'g_key_file_set_list_separator');
  LoadProc(Pointer(g_key_file_set_locale_string), 'g_key_file_set_locale_string');
  LoadProc(Pointer(g_key_file_set_locale_string_list), 'g_key_file_set_locale_string_list');
  LoadProc(Pointer(g_key_file_set_string), 'g_key_file_set_string');
  LoadProc(Pointer(g_key_file_set_string_list), 'g_key_file_set_string_list');
  LoadProc(Pointer(g_key_file_set_uint64), 'g_key_file_set_uint64');
  LoadProc(Pointer(g_key_file_set_value), 'g_key_file_set_value');
  LoadProc(Pointer(g_key_file_to_data), 'g_key_file_to_data');
  LoadProc(Pointer(g_key_file_unref), 'g_key_file_unref');
  LoadProc(Pointer(g_list_alloc), 'g_list_alloc');
  LoadProc(Pointer(g_list_append), 'g_list_append');
  LoadProc(Pointer(g_list_concat), 'g_list_concat');
  LoadProc(Pointer(g_list_copy), 'g_list_copy');
  LoadProc(Pointer(g_list_copy_deep), 'g_list_copy_deep');
  LoadProc(Pointer(g_list_delete_link), 'g_list_delete_link');
  LoadProc(Pointer(g_list_find), 'g_list_find');
  LoadProc(Pointer(g_list_find_custom), 'g_list_find_custom');
  LoadProc(Pointer(g_list_first), 'g_list_first');
  LoadProc(Pointer(g_list_foreach), 'g_list_foreach');
  LoadProc(Pointer(g_list_free), 'g_list_free');
  LoadProc(Pointer(g_list_free_1), 'g_list_free_1');
  LoadProc(Pointer(g_list_free_full), 'g_list_free_full');
  LoadProc(Pointer(g_list_index), 'g_list_index');
  LoadProc(Pointer(g_list_insert), 'g_list_insert');
  LoadProc(Pointer(g_list_insert_before), 'g_list_insert_before');
  LoadProc(Pointer(g_list_insert_sorted), 'g_list_insert_sorted');
  LoadProc(Pointer(g_list_insert_sorted_with_data), 'g_list_insert_sorted_with_data');
  LoadProc(Pointer(g_list_last), 'g_list_last');
  LoadProc(Pointer(g_list_length), 'g_list_length');
  LoadProc(Pointer(g_list_nth), 'g_list_nth');
  LoadProc(Pointer(g_list_nth_data), 'g_list_nth_data');
  LoadProc(Pointer(g_list_nth_prev), 'g_list_nth_prev');
  LoadProc(Pointer(g_list_position), 'g_list_position');
  LoadProc(Pointer(g_list_prepend), 'g_list_prepend');
  LoadProc(Pointer(g_list_remove), 'g_list_remove');
  LoadProc(Pointer(g_list_remove_all), 'g_list_remove_all');
  LoadProc(Pointer(g_list_remove_link), 'g_list_remove_link');
  LoadProc(Pointer(g_list_reverse), 'g_list_reverse');
  LoadProc(Pointer(g_list_sort), 'g_list_sort');
  LoadProc(Pointer(g_list_sort_with_data), 'g_list_sort_with_data');
  LoadProc(Pointer(g_listenv), 'g_listenv');
  LoadProc(Pointer(g_locale_from_utf8), 'g_locale_from_utf8');
  LoadProc(Pointer(g_locale_to_utf8), 'g_locale_to_utf8');
  LoadProc(Pointer(g_log), 'g_log');
  LoadProc(Pointer(g_log_default_handler), 'g_log_default_handler');
  LoadProc(Pointer(g_log_remove_handler), 'g_log_remove_handler');
  LoadProc(Pointer(g_log_set_always_fatal), 'g_log_set_always_fatal');
  LoadProc(Pointer(g_log_set_default_handler), 'g_log_set_default_handler');
  LoadProc(Pointer(g_log_set_fatal_mask), 'g_log_set_fatal_mask');
  LoadProc(Pointer(g_log_set_handler), 'g_log_set_handler');
  LoadProc(Pointer(g_logv), 'g_logv');
  LoadProc(Pointer(g_main_context_acquire), 'g_main_context_acquire');
  LoadProc(Pointer(g_main_context_add_poll), 'g_main_context_add_poll');
  LoadProc(Pointer(g_main_context_check), 'g_main_context_check');
  LoadProc(Pointer(g_main_context_default), 'g_main_context_default');
  LoadProc(Pointer(g_main_context_dispatch), 'g_main_context_dispatch');
  LoadProc(Pointer(g_main_context_find_source_by_funcs_user_data), 'g_main_context_find_source_by_funcs_user_data');
  LoadProc(Pointer(g_main_context_find_source_by_id), 'g_main_context_find_source_by_id');
  LoadProc(Pointer(g_main_context_find_source_by_user_data), 'g_main_context_find_source_by_user_data');
  LoadProc(Pointer(g_main_context_get_poll_func), 'g_main_context_get_poll_func');
  LoadProc(Pointer(g_main_context_get_thread_default), 'g_main_context_get_thread_default');
  LoadProc(Pointer(g_main_context_get_type), 'g_main_context_get_type');
  LoadProc(Pointer(g_main_context_invoke), 'g_main_context_invoke');
  LoadProc(Pointer(g_main_context_invoke_full), 'g_main_context_invoke_full');
  LoadProc(Pointer(g_main_context_is_owner), 'g_main_context_is_owner');
  LoadProc(Pointer(g_main_context_iteration), 'g_main_context_iteration');
  LoadProc(Pointer(g_main_context_new), 'g_main_context_new');
  LoadProc(Pointer(g_main_context_pending), 'g_main_context_pending');
  LoadProc(Pointer(g_main_context_pop_thread_default), 'g_main_context_pop_thread_default');
  LoadProc(Pointer(g_main_context_prepare), 'g_main_context_prepare');
  LoadProc(Pointer(g_main_context_push_thread_default), 'g_main_context_push_thread_default');
  LoadProc(Pointer(g_main_context_query), 'g_main_context_query');
  LoadProc(Pointer(g_main_context_ref), 'g_main_context_ref');
  LoadProc(Pointer(g_main_context_ref_thread_default), 'g_main_context_ref_thread_default');
  LoadProc(Pointer(g_main_context_release), 'g_main_context_release');
  LoadProc(Pointer(g_main_context_remove_poll), 'g_main_context_remove_poll');
  LoadProc(Pointer(g_main_context_set_poll_func), 'g_main_context_set_poll_func');
  LoadProc(Pointer(g_main_context_unref), 'g_main_context_unref');
  LoadProc(Pointer(g_main_context_wait), 'g_main_context_wait');
  LoadProc(Pointer(g_main_context_wakeup), 'g_main_context_wakeup');
  LoadProc(Pointer(g_main_current_source), 'g_main_current_source');
  LoadProc(Pointer(g_main_depth), 'g_main_depth');
  LoadProc(Pointer(g_main_loop_get_context), 'g_main_loop_get_context');
  LoadProc(Pointer(g_main_loop_get_type), 'g_main_loop_get_type');
  LoadProc(Pointer(g_main_loop_is_running), 'g_main_loop_is_running');
  LoadProc(Pointer(g_main_loop_new), 'g_main_loop_new');
  LoadProc(Pointer(g_main_loop_quit), 'g_main_loop_quit');
  LoadProc(Pointer(g_main_loop_ref), 'g_main_loop_ref');
  LoadProc(Pointer(g_main_loop_run), 'g_main_loop_run');
  LoadProc(Pointer(g_main_loop_unref), 'g_main_loop_unref');
  LoadProc(Pointer(g_malloc), 'g_malloc');
  LoadProc(Pointer(g_malloc0), 'g_malloc0');
  LoadProc(Pointer(g_malloc0_n), 'g_malloc0_n');
  LoadProc(Pointer(g_malloc_n), 'g_malloc_n');
  LoadProc(Pointer(g_mapped_file_get_bytes), 'g_mapped_file_get_bytes');
  LoadProc(Pointer(g_mapped_file_get_contents), 'g_mapped_file_get_contents');
  LoadProc(Pointer(g_mapped_file_get_length), 'g_mapped_file_get_length');
  LoadProc(Pointer(g_mapped_file_new), 'g_mapped_file_new');
  LoadProc(Pointer(g_mapped_file_new_from_fd), 'g_mapped_file_new_from_fd');
  LoadProc(Pointer(g_mapped_file_ref), 'g_mapped_file_ref');
  LoadProc(Pointer(g_mapped_file_unref), 'g_mapped_file_unref');
  LoadProc(Pointer(g_markup_collect_attributes), 'g_markup_collect_attributes');
  LoadProc(Pointer(g_markup_error_quark), 'g_markup_error_quark');
  LoadProc(Pointer(g_markup_escape_text), 'g_markup_escape_text');
  LoadProc(Pointer(g_markup_parse_context_end_parse), 'g_markup_parse_context_end_parse');
  LoadProc(Pointer(g_markup_parse_context_free), 'g_markup_parse_context_free');
  LoadProc(Pointer(g_markup_parse_context_get_element), 'g_markup_parse_context_get_element');
  LoadProc(Pointer(g_markup_parse_context_get_element_stack), 'g_markup_parse_context_get_element_stack');
  LoadProc(Pointer(g_markup_parse_context_get_position), 'g_markup_parse_context_get_position');
  LoadProc(Pointer(g_markup_parse_context_get_type), 'g_markup_parse_context_get_type');
  LoadProc(Pointer(g_markup_parse_context_get_user_data), 'g_markup_parse_context_get_user_data');
  LoadProc(Pointer(g_markup_parse_context_new), 'g_markup_parse_context_new');
  LoadProc(Pointer(g_markup_parse_context_parse), 'g_markup_parse_context_parse');
  LoadProc(Pointer(g_markup_parse_context_pop), 'g_markup_parse_context_pop');
  LoadProc(Pointer(g_markup_parse_context_push), 'g_markup_parse_context_push');
  LoadProc(Pointer(g_markup_parse_context_ref), 'g_markup_parse_context_ref');
  LoadProc(Pointer(g_markup_parse_context_unref), 'g_markup_parse_context_unref');
  LoadProc(Pointer(g_markup_printf_escaped), 'g_markup_printf_escaped');
  LoadProc(Pointer(g_markup_vprintf_escaped), 'g_markup_vprintf_escaped');
  LoadProc(Pointer(g_match_info_expand_references), 'g_match_info_expand_references');
  LoadProc(Pointer(g_match_info_fetch), 'g_match_info_fetch');
  LoadProc(Pointer(g_match_info_fetch_all), 'g_match_info_fetch_all');
  LoadProc(Pointer(g_match_info_fetch_named), 'g_match_info_fetch_named');
  LoadProc(Pointer(g_match_info_fetch_named_pos), 'g_match_info_fetch_named_pos');
  LoadProc(Pointer(g_match_info_fetch_pos), 'g_match_info_fetch_pos');
  LoadProc(Pointer(g_match_info_free), 'g_match_info_free');
  LoadProc(Pointer(g_match_info_get_match_count), 'g_match_info_get_match_count');
  LoadProc(Pointer(g_match_info_get_regex), 'g_match_info_get_regex');
  LoadProc(Pointer(g_match_info_get_string), 'g_match_info_get_string');
  LoadProc(Pointer(g_match_info_get_type), 'g_match_info_get_type');
  LoadProc(Pointer(g_match_info_is_partial_match), 'g_match_info_is_partial_match');
  LoadProc(Pointer(g_match_info_matches), 'g_match_info_matches');
  LoadProc(Pointer(g_match_info_next), 'g_match_info_next');
  LoadProc(Pointer(g_match_info_ref), 'g_match_info_ref');
  LoadProc(Pointer(g_match_info_unref), 'g_match_info_unref');
  LoadProc(Pointer(g_mem_is_system_malloc), 'g_mem_is_system_malloc');
  LoadProc(Pointer(g_mem_profile), 'g_mem_profile');
  LoadProc(Pointer(g_mem_set_vtable), 'g_mem_set_vtable');
  LoadProc(Pointer(g_memdup), 'g_memdup');
  LoadProc(Pointer(g_mkdir_with_parents), 'g_mkdir_with_parents');
  LoadProc(Pointer(g_mkdtemp), 'g_mkdtemp');
  LoadProc(Pointer(g_mkdtemp_full), 'g_mkdtemp_full');
  LoadProc(Pointer(g_mkstemp), 'g_mkstemp');
  LoadProc(Pointer(g_mkstemp_full), 'g_mkstemp_full');
  LoadProc(Pointer(g_mutex_clear), 'g_mutex_clear');
  LoadProc(Pointer(g_mutex_init), 'g_mutex_init');
  LoadProc(Pointer(g_mutex_lock), 'g_mutex_lock');
  LoadProc(Pointer(g_mutex_trylock), 'g_mutex_trylock');
  LoadProc(Pointer(g_mutex_unlock), 'g_mutex_unlock');
  LoadProc(Pointer(g_node_child_index), 'g_node_child_index');
  LoadProc(Pointer(g_node_child_position), 'g_node_child_position');
  LoadProc(Pointer(g_node_children_foreach), 'g_node_children_foreach');
  LoadProc(Pointer(g_node_copy), 'g_node_copy');
  LoadProc(Pointer(g_node_copy_deep), 'g_node_copy_deep');
  LoadProc(Pointer(g_node_depth), 'g_node_depth');
  LoadProc(Pointer(g_node_destroy), 'g_node_destroy');
  LoadProc(Pointer(g_node_find), 'g_node_find');
  LoadProc(Pointer(g_node_find_child), 'g_node_find_child');
  LoadProc(Pointer(g_node_first_sibling), 'g_node_first_sibling');
  LoadProc(Pointer(g_node_get_root), 'g_node_get_root');
  LoadProc(Pointer(g_node_insert), 'g_node_insert');
  LoadProc(Pointer(g_node_insert_after), 'g_node_insert_after');
  LoadProc(Pointer(g_node_insert_before), 'g_node_insert_before');
  LoadProc(Pointer(g_node_is_ancestor), 'g_node_is_ancestor');
  LoadProc(Pointer(g_node_last_child), 'g_node_last_child');
  LoadProc(Pointer(g_node_last_sibling), 'g_node_last_sibling');
  LoadProc(Pointer(g_node_max_height), 'g_node_max_height');
  LoadProc(Pointer(g_node_n_children), 'g_node_n_children');
  LoadProc(Pointer(g_node_n_nodes), 'g_node_n_nodes');
  LoadProc(Pointer(g_node_new), 'g_node_new');
  LoadProc(Pointer(g_node_nth_child), 'g_node_nth_child');
  LoadProc(Pointer(g_node_prepend), 'g_node_prepend');
  LoadProc(Pointer(g_node_reverse_children), 'g_node_reverse_children');
  LoadProc(Pointer(g_node_traverse), 'g_node_traverse');
  LoadProc(Pointer(g_node_unlink), 'g_node_unlink');
  LoadProc(Pointer(g_nullify_pointer), 'g_nullify_pointer');
  LoadProc(Pointer(g_on_error_query), 'g_on_error_query');
  LoadProc(Pointer(g_on_error_stack_trace), 'g_on_error_stack_trace');
  LoadProc(Pointer(g_once_impl), 'g_once_impl');
  LoadProc(Pointer(g_once_init_enter), 'g_once_init_enter');
  LoadProc(Pointer(g_once_init_leave), 'g_once_init_leave');
  LoadProc(Pointer(g_option_context_add_group), 'g_option_context_add_group');
  LoadProc(Pointer(g_option_context_add_main_entries), 'g_option_context_add_main_entries');
  LoadProc(Pointer(g_option_context_free), 'g_option_context_free');
  LoadProc(Pointer(g_option_context_get_description), 'g_option_context_get_description');
  LoadProc(Pointer(g_option_context_get_help), 'g_option_context_get_help');
  LoadProc(Pointer(g_option_context_get_help_enabled), 'g_option_context_get_help_enabled');
  LoadProc(Pointer(g_option_context_get_ignore_unknown_options), 'g_option_context_get_ignore_unknown_options');
  LoadProc(Pointer(g_option_context_get_main_group), 'g_option_context_get_main_group');
  LoadProc(Pointer(g_option_context_get_summary), 'g_option_context_get_summary');
  LoadProc(Pointer(g_option_context_new), 'g_option_context_new');
  LoadProc(Pointer(g_option_context_parse), 'g_option_context_parse');
  LoadProc(Pointer(g_option_context_set_description), 'g_option_context_set_description');
  LoadProc(Pointer(g_option_context_set_help_enabled), 'g_option_context_set_help_enabled');
  LoadProc(Pointer(g_option_context_set_ignore_unknown_options), 'g_option_context_set_ignore_unknown_options');
  LoadProc(Pointer(g_option_context_set_main_group), 'g_option_context_set_main_group');
  LoadProc(Pointer(g_option_context_set_summary), 'g_option_context_set_summary');
  LoadProc(Pointer(g_option_context_set_translate_func), 'g_option_context_set_translate_func');
  LoadProc(Pointer(g_option_context_set_translation_domain), 'g_option_context_set_translation_domain');
  LoadProc(Pointer(g_option_error_quark), 'g_option_error_quark');
  LoadProc(Pointer(g_option_group_add_entries), 'g_option_group_add_entries');
  LoadProc(Pointer(g_option_group_free), 'g_option_group_free');
  LoadProc(Pointer(g_option_group_new), 'g_option_group_new');
  LoadProc(Pointer(g_option_group_set_error_hook), 'g_option_group_set_error_hook');
  LoadProc(Pointer(g_option_group_set_parse_hooks), 'g_option_group_set_parse_hooks');
  LoadProc(Pointer(g_option_group_set_translate_func), 'g_option_group_set_translate_func');
  LoadProc(Pointer(g_option_group_set_translation_domain), 'g_option_group_set_translation_domain');
  LoadProc(Pointer(g_parse_debug_string), 'g_parse_debug_string');
  LoadProc(Pointer(g_path_get_basename), 'g_path_get_basename');
  LoadProc(Pointer(g_path_get_dirname), 'g_path_get_dirname');
  LoadProc(Pointer(g_path_is_absolute), 'g_path_is_absolute');
  LoadProc(Pointer(g_path_skip_root), 'g_path_skip_root');
  LoadProc(Pointer(g_pattern_match), 'g_pattern_match');
  LoadProc(Pointer(g_pattern_match_simple), 'g_pattern_match_simple');
  LoadProc(Pointer(g_pattern_match_string), 'g_pattern_match_string');
  LoadProc(Pointer(g_pattern_spec_equal), 'g_pattern_spec_equal');
  LoadProc(Pointer(g_pattern_spec_free), 'g_pattern_spec_free');
  LoadProc(Pointer(g_pattern_spec_new), 'g_pattern_spec_new');
  LoadProc(Pointer(g_pointer_bit_lock), 'g_pointer_bit_lock');
  LoadProc(Pointer(g_pointer_bit_trylock), 'g_pointer_bit_trylock');
  LoadProc(Pointer(g_pointer_bit_unlock), 'g_pointer_bit_unlock');
  LoadProc(Pointer(g_poll), 'g_poll');
  LoadProc(Pointer(g_pollfd_get_type), 'g_pollfd_get_type');
  LoadProc(Pointer(g_prefix_error), 'g_prefix_error');
  LoadProc(Pointer(g_print), 'g_print');
  LoadProc(Pointer(g_printerr), 'g_printerr');
  LoadProc(Pointer(g_printf), 'g_printf');
  LoadProc(Pointer(g_printf_string_upper_bound), 'g_printf_string_upper_bound');
  LoadProc(Pointer(g_private_get), 'g_private_get');
  LoadProc(Pointer(g_private_replace), 'g_private_replace');
  LoadProc(Pointer(g_private_set), 'g_private_set');
  LoadProc(Pointer(g_propagate_error), 'g_propagate_error');
  LoadProc(Pointer(g_propagate_prefixed_error), 'g_propagate_prefixed_error');
  LoadProc(Pointer(g_ptr_array_add), 'g_ptr_array_add');
  LoadProc(Pointer(g_ptr_array_foreach), 'g_ptr_array_foreach');
  LoadProc(Pointer(g_ptr_array_free), 'g_ptr_array_free');
  LoadProc(Pointer(g_ptr_array_get_type), 'g_ptr_array_get_type');
  LoadProc(Pointer(g_ptr_array_new), 'g_ptr_array_new');
  LoadProc(Pointer(g_ptr_array_new_full), 'g_ptr_array_new_full');
  LoadProc(Pointer(g_ptr_array_new_with_free_func), 'g_ptr_array_new_with_free_func');
  LoadProc(Pointer(g_ptr_array_ref), 'g_ptr_array_ref');
  LoadProc(Pointer(g_ptr_array_remove), 'g_ptr_array_remove');
  LoadProc(Pointer(g_ptr_array_remove_fast), 'g_ptr_array_remove_fast');
  LoadProc(Pointer(g_ptr_array_remove_index), 'g_ptr_array_remove_index');
  LoadProc(Pointer(g_ptr_array_remove_index_fast), 'g_ptr_array_remove_index_fast');
  LoadProc(Pointer(g_ptr_array_remove_range), 'g_ptr_array_remove_range');
  LoadProc(Pointer(g_ptr_array_set_free_func), 'g_ptr_array_set_free_func');
  LoadProc(Pointer(g_ptr_array_set_size), 'g_ptr_array_set_size');
  LoadProc(Pointer(g_ptr_array_sized_new), 'g_ptr_array_sized_new');
  LoadProc(Pointer(g_ptr_array_sort), 'g_ptr_array_sort');
  LoadProc(Pointer(g_ptr_array_sort_with_data), 'g_ptr_array_sort_with_data');
  LoadProc(Pointer(g_ptr_array_unref), 'g_ptr_array_unref');
  LoadProc(Pointer(g_qsort_with_data), 'g_qsort_with_data');
  LoadProc(Pointer(g_quark_from_static_string), 'g_quark_from_static_string');
  LoadProc(Pointer(g_quark_from_string), 'g_quark_from_string');
  LoadProc(Pointer(g_quark_to_string), 'g_quark_to_string');
  LoadProc(Pointer(g_quark_try_string), 'g_quark_try_string');
  LoadProc(Pointer(g_queue_clear), 'g_queue_clear');
  LoadProc(Pointer(g_queue_copy), 'g_queue_copy');
  LoadProc(Pointer(g_queue_delete_link), 'g_queue_delete_link');
  LoadProc(Pointer(g_queue_find), 'g_queue_find');
  LoadProc(Pointer(g_queue_find_custom), 'g_queue_find_custom');
  LoadProc(Pointer(g_queue_foreach), 'g_queue_foreach');
  LoadProc(Pointer(g_queue_free), 'g_queue_free');
  LoadProc(Pointer(g_queue_free_full), 'g_queue_free_full');
  LoadProc(Pointer(g_queue_get_length), 'g_queue_get_length');
  LoadProc(Pointer(g_queue_index), 'g_queue_index');
  LoadProc(Pointer(g_queue_init), 'g_queue_init');
  LoadProc(Pointer(g_queue_insert_after), 'g_queue_insert_after');
  LoadProc(Pointer(g_queue_insert_before), 'g_queue_insert_before');
  LoadProc(Pointer(g_queue_insert_sorted), 'g_queue_insert_sorted');
  LoadProc(Pointer(g_queue_is_empty), 'g_queue_is_empty');
  LoadProc(Pointer(g_queue_link_index), 'g_queue_link_index');
  LoadProc(Pointer(g_queue_new), 'g_queue_new');
  LoadProc(Pointer(g_queue_peek_head), 'g_queue_peek_head');
  LoadProc(Pointer(g_queue_peek_head_link), 'g_queue_peek_head_link');
  LoadProc(Pointer(g_queue_peek_nth), 'g_queue_peek_nth');
  LoadProc(Pointer(g_queue_peek_nth_link), 'g_queue_peek_nth_link');
  LoadProc(Pointer(g_queue_peek_tail), 'g_queue_peek_tail');
  LoadProc(Pointer(g_queue_peek_tail_link), 'g_queue_peek_tail_link');
  LoadProc(Pointer(g_queue_pop_head), 'g_queue_pop_head');
  LoadProc(Pointer(g_queue_pop_head_link), 'g_queue_pop_head_link');
  LoadProc(Pointer(g_queue_pop_nth), 'g_queue_pop_nth');
  LoadProc(Pointer(g_queue_pop_nth_link), 'g_queue_pop_nth_link');
  LoadProc(Pointer(g_queue_pop_tail), 'g_queue_pop_tail');
  LoadProc(Pointer(g_queue_pop_tail_link), 'g_queue_pop_tail_link');
  LoadProc(Pointer(g_queue_push_head), 'g_queue_push_head');
  LoadProc(Pointer(g_queue_push_head_link), 'g_queue_push_head_link');
  LoadProc(Pointer(g_queue_push_nth), 'g_queue_push_nth');
  LoadProc(Pointer(g_queue_push_nth_link), 'g_queue_push_nth_link');
  LoadProc(Pointer(g_queue_push_tail), 'g_queue_push_tail');
  LoadProc(Pointer(g_queue_push_tail_link), 'g_queue_push_tail_link');
  LoadProc(Pointer(g_queue_remove), 'g_queue_remove');
  LoadProc(Pointer(g_queue_remove_all), 'g_queue_remove_all');
  LoadProc(Pointer(g_queue_reverse), 'g_queue_reverse');
  LoadProc(Pointer(g_queue_sort), 'g_queue_sort');
  LoadProc(Pointer(g_queue_unlink), 'g_queue_unlink');
  LoadProc(Pointer(g_rand_copy), 'g_rand_copy');
  LoadProc(Pointer(g_rand_double), 'g_rand_double');
  LoadProc(Pointer(g_rand_double_range), 'g_rand_double_range');
  LoadProc(Pointer(g_rand_free), 'g_rand_free');
  LoadProc(Pointer(g_rand_int), 'g_rand_int');
  LoadProc(Pointer(g_rand_int_range), 'g_rand_int_range');
  LoadProc(Pointer(g_rand_new), 'g_rand_new');
  LoadProc(Pointer(g_rand_new_with_seed), 'g_rand_new_with_seed');
  LoadProc(Pointer(g_rand_new_with_seed_array), 'g_rand_new_with_seed_array');
  LoadProc(Pointer(g_rand_set_seed), 'g_rand_set_seed');
  LoadProc(Pointer(g_rand_set_seed_array), 'g_rand_set_seed_array');
  LoadProc(Pointer(g_random_double), 'g_random_double');
  LoadProc(Pointer(g_random_double_range), 'g_random_double_range');
  LoadProc(Pointer(g_random_int), 'g_random_int');
  LoadProc(Pointer(g_random_int_range), 'g_random_int_range');
  LoadProc(Pointer(g_random_set_seed), 'g_random_set_seed');
  LoadProc(Pointer(g_realloc), 'g_realloc');
  LoadProc(Pointer(g_realloc_n), 'g_realloc_n');
  LoadProc(Pointer(g_rec_mutex_clear), 'g_rec_mutex_clear');
  LoadProc(Pointer(g_rec_mutex_init), 'g_rec_mutex_init');
  LoadProc(Pointer(g_rec_mutex_lock), 'g_rec_mutex_lock');
  LoadProc(Pointer(g_rec_mutex_trylock), 'g_rec_mutex_trylock');
  LoadProc(Pointer(g_rec_mutex_unlock), 'g_rec_mutex_unlock');
  LoadProc(Pointer(g_regex_check_replacement), 'g_regex_check_replacement');
  LoadProc(Pointer(g_regex_error_quark), 'g_regex_error_quark');
  LoadProc(Pointer(g_regex_escape_nul), 'g_regex_escape_nul');
  LoadProc(Pointer(g_regex_escape_string), 'g_regex_escape_string');
  LoadProc(Pointer(g_regex_get_capture_count), 'g_regex_get_capture_count');
  LoadProc(Pointer(g_regex_get_compile_flags), 'g_regex_get_compile_flags');
  LoadProc(Pointer(g_regex_get_has_cr_or_lf), 'g_regex_get_has_cr_or_lf');
  LoadProc(Pointer(g_regex_get_match_flags), 'g_regex_get_match_flags');
  LoadProc(Pointer(g_regex_get_max_backref), 'g_regex_get_max_backref');
  LoadProc(Pointer(g_regex_get_pattern), 'g_regex_get_pattern');
  LoadProc(Pointer(g_regex_get_string_number), 'g_regex_get_string_number');
  LoadProc(Pointer(g_regex_get_type), 'g_regex_get_type');
  LoadProc(Pointer(g_regex_match), 'g_regex_match');
  LoadProc(Pointer(g_regex_match_all), 'g_regex_match_all');
  LoadProc(Pointer(g_regex_match_all_full), 'g_regex_match_all_full');
  LoadProc(Pointer(g_regex_match_full), 'g_regex_match_full');
  LoadProc(Pointer(g_regex_match_simple), 'g_regex_match_simple');
  LoadProc(Pointer(g_regex_new), 'g_regex_new');
  LoadProc(Pointer(g_regex_ref), 'g_regex_ref');
  LoadProc(Pointer(g_regex_replace), 'g_regex_replace');
  LoadProc(Pointer(g_regex_replace_eval), 'g_regex_replace_eval');
  LoadProc(Pointer(g_regex_replace_literal), 'g_regex_replace_literal');
  LoadProc(Pointer(g_regex_split), 'g_regex_split');
  LoadProc(Pointer(g_regex_split_full), 'g_regex_split_full');
  LoadProc(Pointer(g_regex_split_simple), 'g_regex_split_simple');
  LoadProc(Pointer(g_regex_unref), 'g_regex_unref');
  LoadProc(Pointer(g_reload_user_special_dirs_cache), 'g_reload_user_special_dirs_cache');
  LoadProc(Pointer(g_return_if_fail_warning), 'g_return_if_fail_warning');
  LoadProc(Pointer(g_rmdir), 'g_rmdir');
  LoadProc(Pointer(g_rw_lock_clear), 'g_rw_lock_clear');
  LoadProc(Pointer(g_rw_lock_init), 'g_rw_lock_init');
  LoadProc(Pointer(g_rw_lock_reader_lock), 'g_rw_lock_reader_lock');
  LoadProc(Pointer(g_rw_lock_reader_trylock), 'g_rw_lock_reader_trylock');
  LoadProc(Pointer(g_rw_lock_reader_unlock), 'g_rw_lock_reader_unlock');
  LoadProc(Pointer(g_rw_lock_writer_lock), 'g_rw_lock_writer_lock');
  LoadProc(Pointer(g_rw_lock_writer_trylock), 'g_rw_lock_writer_trylock');
  LoadProc(Pointer(g_rw_lock_writer_unlock), 'g_rw_lock_writer_unlock');
  LoadProc(Pointer(g_scanner_cur_line), 'g_scanner_cur_line');
  LoadProc(Pointer(g_scanner_cur_position), 'g_scanner_cur_position');
  LoadProc(Pointer(g_scanner_cur_token), 'g_scanner_cur_token');
  LoadProc(Pointer(g_scanner_cur_value), 'g_scanner_cur_value');
  LoadProc(Pointer(g_scanner_destroy), 'g_scanner_destroy');
  LoadProc(Pointer(g_scanner_eof), 'g_scanner_eof');
  LoadProc(Pointer(g_scanner_error), 'g_scanner_error');
  LoadProc(Pointer(g_scanner_get_next_token), 'g_scanner_get_next_token');
  LoadProc(Pointer(g_scanner_input_file), 'g_scanner_input_file');
  LoadProc(Pointer(g_scanner_input_text), 'g_scanner_input_text');
  LoadProc(Pointer(g_scanner_lookup_symbol), 'g_scanner_lookup_symbol');
  LoadProc(Pointer(g_scanner_new), 'g_scanner_new');
  LoadProc(Pointer(g_scanner_peek_next_token), 'g_scanner_peek_next_token');
  LoadProc(Pointer(g_scanner_scope_add_symbol), 'g_scanner_scope_add_symbol');
  LoadProc(Pointer(g_scanner_scope_foreach_symbol), 'g_scanner_scope_foreach_symbol');
  LoadProc(Pointer(g_scanner_scope_lookup_symbol), 'g_scanner_scope_lookup_symbol');
  LoadProc(Pointer(g_scanner_scope_remove_symbol), 'g_scanner_scope_remove_symbol');
  LoadProc(Pointer(g_scanner_set_scope), 'g_scanner_set_scope');
  LoadProc(Pointer(g_scanner_sync_file_offset), 'g_scanner_sync_file_offset');
  LoadProc(Pointer(g_scanner_unexp_token), 'g_scanner_unexp_token');
  LoadProc(Pointer(g_scanner_warn), 'g_scanner_warn');
  LoadProc(Pointer(g_sequence_append), 'g_sequence_append');
  LoadProc(Pointer(g_sequence_foreach), 'g_sequence_foreach');
  LoadProc(Pointer(g_sequence_foreach_range), 'g_sequence_foreach_range');
  LoadProc(Pointer(g_sequence_free), 'g_sequence_free');
  LoadProc(Pointer(g_sequence_get), 'g_sequence_get');
  LoadProc(Pointer(g_sequence_get_begin_iter), 'g_sequence_get_begin_iter');
  LoadProc(Pointer(g_sequence_get_end_iter), 'g_sequence_get_end_iter');
  LoadProc(Pointer(g_sequence_get_iter_at_pos), 'g_sequence_get_iter_at_pos');
  LoadProc(Pointer(g_sequence_get_length), 'g_sequence_get_length');
  LoadProc(Pointer(g_sequence_insert_before), 'g_sequence_insert_before');
  LoadProc(Pointer(g_sequence_insert_sorted), 'g_sequence_insert_sorted');
  LoadProc(Pointer(g_sequence_insert_sorted_iter), 'g_sequence_insert_sorted_iter');
  LoadProc(Pointer(g_sequence_iter_compare), 'g_sequence_iter_compare');
  LoadProc(Pointer(g_sequence_iter_get_position), 'g_sequence_iter_get_position');
  LoadProc(Pointer(g_sequence_iter_get_sequence), 'g_sequence_iter_get_sequence');
  LoadProc(Pointer(g_sequence_iter_is_begin), 'g_sequence_iter_is_begin');
  LoadProc(Pointer(g_sequence_iter_is_end), 'g_sequence_iter_is_end');
  LoadProc(Pointer(g_sequence_iter_move), 'g_sequence_iter_move');
  LoadProc(Pointer(g_sequence_iter_next), 'g_sequence_iter_next');
  LoadProc(Pointer(g_sequence_iter_prev), 'g_sequence_iter_prev');
  LoadProc(Pointer(g_sequence_lookup), 'g_sequence_lookup');
  LoadProc(Pointer(g_sequence_lookup_iter), 'g_sequence_lookup_iter');
  LoadProc(Pointer(g_sequence_move), 'g_sequence_move');
  LoadProc(Pointer(g_sequence_move_range), 'g_sequence_move_range');
  LoadProc(Pointer(g_sequence_new), 'g_sequence_new');
  LoadProc(Pointer(g_sequence_prepend), 'g_sequence_prepend');
  LoadProc(Pointer(g_sequence_range_get_midpoint), 'g_sequence_range_get_midpoint');
  LoadProc(Pointer(g_sequence_remove), 'g_sequence_remove');
  LoadProc(Pointer(g_sequence_remove_range), 'g_sequence_remove_range');
  LoadProc(Pointer(g_sequence_search), 'g_sequence_search');
  LoadProc(Pointer(g_sequence_search_iter), 'g_sequence_search_iter');
  LoadProc(Pointer(g_sequence_set), 'g_sequence_set');
  LoadProc(Pointer(g_sequence_sort), 'g_sequence_sort');
  LoadProc(Pointer(g_sequence_sort_changed), 'g_sequence_sort_changed');
  LoadProc(Pointer(g_sequence_sort_changed_iter), 'g_sequence_sort_changed_iter');
  LoadProc(Pointer(g_sequence_sort_iter), 'g_sequence_sort_iter');
  LoadProc(Pointer(g_sequence_swap), 'g_sequence_swap');
  LoadProc(Pointer(g_set_application_name), 'g_set_application_name');
  LoadProc(Pointer(g_set_error), 'g_set_error');
  LoadProc(Pointer(g_set_error_literal), 'g_set_error_literal');
  LoadProc(Pointer(g_set_prgname), 'g_set_prgname');
  LoadProc(Pointer(g_set_print_handler), 'g_set_print_handler');
  LoadProc(Pointer(g_set_printerr_handler), 'g_set_printerr_handler');
  LoadProc(Pointer(g_setenv), 'g_setenv');
  LoadProc(Pointer(g_shell_error_quark), 'g_shell_error_quark');
  LoadProc(Pointer(g_shell_parse_argv), 'g_shell_parse_argv');
  LoadProc(Pointer(g_shell_quote), 'g_shell_quote');
  LoadProc(Pointer(g_shell_unquote), 'g_shell_unquote');
  LoadProc(Pointer(g_slice_alloc), 'g_slice_alloc');
  LoadProc(Pointer(g_slice_alloc0), 'g_slice_alloc0');
  LoadProc(Pointer(g_slice_copy), 'g_slice_copy');
  LoadProc(Pointer(g_slice_free1), 'g_slice_free1');
  LoadProc(Pointer(g_slice_free_chain_with_offset), 'g_slice_free_chain_with_offset');
  LoadProc(Pointer(g_slice_get_config), 'g_slice_get_config');
  LoadProc(Pointer(g_slice_get_config_state), 'g_slice_get_config_state');
  LoadProc(Pointer(g_slice_set_config), 'g_slice_set_config');
  LoadProc(Pointer(g_slist_alloc), 'g_slist_alloc');
  LoadProc(Pointer(g_slist_append), 'g_slist_append');
  LoadProc(Pointer(g_slist_concat), 'g_slist_concat');
  LoadProc(Pointer(g_slist_copy), 'g_slist_copy');
  LoadProc(Pointer(g_slist_copy_deep), 'g_slist_copy_deep');
  LoadProc(Pointer(g_slist_delete_link), 'g_slist_delete_link');
  LoadProc(Pointer(g_slist_find), 'g_slist_find');
  LoadProc(Pointer(g_slist_find_custom), 'g_slist_find_custom');
  LoadProc(Pointer(g_slist_foreach), 'g_slist_foreach');
  LoadProc(Pointer(g_slist_free), 'g_slist_free');
  LoadProc(Pointer(g_slist_free_1), 'g_slist_free_1');
  LoadProc(Pointer(g_slist_free_full), 'g_slist_free_full');
  LoadProc(Pointer(g_slist_index), 'g_slist_index');
  LoadProc(Pointer(g_slist_insert), 'g_slist_insert');
  LoadProc(Pointer(g_slist_insert_before), 'g_slist_insert_before');
  LoadProc(Pointer(g_slist_insert_sorted), 'g_slist_insert_sorted');
  LoadProc(Pointer(g_slist_insert_sorted_with_data), 'g_slist_insert_sorted_with_data');
  LoadProc(Pointer(g_slist_last), 'g_slist_last');
  LoadProc(Pointer(g_slist_length), 'g_slist_length');
  LoadProc(Pointer(g_slist_nth), 'g_slist_nth');
  LoadProc(Pointer(g_slist_nth_data), 'g_slist_nth_data');
  LoadProc(Pointer(g_slist_position), 'g_slist_position');
  LoadProc(Pointer(g_slist_prepend), 'g_slist_prepend');
  LoadProc(Pointer(g_slist_remove), 'g_slist_remove');
  LoadProc(Pointer(g_slist_remove_all), 'g_slist_remove_all');
  LoadProc(Pointer(g_slist_remove_link), 'g_slist_remove_link');
  LoadProc(Pointer(g_slist_reverse), 'g_slist_reverse');
  LoadProc(Pointer(g_slist_sort), 'g_slist_sort');
  LoadProc(Pointer(g_slist_sort_with_data), 'g_slist_sort_with_data');
  LoadProc(Pointer(g_snprintf), 'g_snprintf');
  LoadProc(Pointer(g_source_add_child_source), 'g_source_add_child_source');
  LoadProc(Pointer(g_source_add_poll), 'g_source_add_poll');
  LoadProc(Pointer(g_source_add_unix_fd), 'g_source_add_unix_fd');
  LoadProc(Pointer(g_source_attach), 'g_source_attach');
  LoadProc(Pointer(g_source_destroy), 'g_source_destroy');
  LoadProc(Pointer(g_source_get_can_recurse), 'g_source_get_can_recurse');
  LoadProc(Pointer(g_source_get_context), 'g_source_get_context');
  LoadProc(Pointer(g_source_get_id), 'g_source_get_id');
  LoadProc(Pointer(g_source_get_name), 'g_source_get_name');
  LoadProc(Pointer(g_source_get_priority), 'g_source_get_priority');
  LoadProc(Pointer(g_source_get_ready_time), 'g_source_get_ready_time');
  LoadProc(Pointer(g_source_get_time), 'g_source_get_time');
  LoadProc(Pointer(g_source_get_type), 'g_source_get_type');
  LoadProc(Pointer(g_source_is_destroyed), 'g_source_is_destroyed');
  LoadProc(Pointer(g_source_modify_unix_fd), 'g_source_modify_unix_fd');
  LoadProc(Pointer(g_source_new), 'g_source_new');
  LoadProc(Pointer(g_source_query_unix_fd), 'g_source_query_unix_fd');
  LoadProc(Pointer(g_source_ref), 'g_source_ref');
  LoadProc(Pointer(g_source_remove), 'g_source_remove');
  LoadProc(Pointer(g_source_remove_by_funcs_user_data), 'g_source_remove_by_funcs_user_data');
  LoadProc(Pointer(g_source_remove_by_user_data), 'g_source_remove_by_user_data');
  LoadProc(Pointer(g_source_remove_child_source), 'g_source_remove_child_source');
  LoadProc(Pointer(g_source_remove_poll), 'g_source_remove_poll');
  LoadProc(Pointer(g_source_remove_unix_fd), 'g_source_remove_unix_fd');
  LoadProc(Pointer(g_source_set_callback), 'g_source_set_callback');
  LoadProc(Pointer(g_source_set_callback_indirect), 'g_source_set_callback_indirect');
  LoadProc(Pointer(g_source_set_can_recurse), 'g_source_set_can_recurse');
  LoadProc(Pointer(g_source_set_funcs), 'g_source_set_funcs');
  LoadProc(Pointer(g_source_set_name), 'g_source_set_name');
  LoadProc(Pointer(g_source_set_name_by_id), 'g_source_set_name_by_id');
  LoadProc(Pointer(g_source_set_priority), 'g_source_set_priority');
  LoadProc(Pointer(g_source_set_ready_time), 'g_source_set_ready_time');
  LoadProc(Pointer(g_source_unref), 'g_source_unref');
  LoadProc(Pointer(g_spaced_primes_closest), 'g_spaced_primes_closest');
  LoadProc(Pointer(g_spawn_async), 'g_spawn_async');
  LoadProc(Pointer(g_spawn_async_with_pipes), 'g_spawn_async_with_pipes');
  LoadProc(Pointer(g_spawn_check_exit_status), 'g_spawn_check_exit_status');
  LoadProc(Pointer(g_spawn_close_pid), 'g_spawn_close_pid');
  LoadProc(Pointer(g_spawn_command_line_async), 'g_spawn_command_line_async');
  LoadProc(Pointer(g_spawn_command_line_sync), 'g_spawn_command_line_sync');
  LoadProc(Pointer(g_spawn_error_quark), 'g_spawn_error_quark');
  LoadProc(Pointer(g_spawn_exit_error_quark), 'g_spawn_exit_error_quark');
  LoadProc(Pointer(g_spawn_sync), 'g_spawn_sync');
  LoadProc(Pointer(g_sprintf), 'g_sprintf');
  LoadProc(Pointer(g_stpcpy), 'g_stpcpy');
  LoadProc(Pointer(g_str_equal), 'g_str_equal');
  LoadProc(Pointer(g_str_has_prefix), 'g_str_has_prefix');
  LoadProc(Pointer(g_str_has_suffix), 'g_str_has_suffix');
  LoadProc(Pointer(g_str_hash), 'g_str_hash');
  LoadProc(Pointer(g_strcanon), 'g_strcanon');
  LoadProc(Pointer(g_strcasecmp), 'g_strcasecmp');
  LoadProc(Pointer(g_strchomp), 'g_strchomp');
  LoadProc(Pointer(g_strchug), 'g_strchug');
  LoadProc(Pointer(g_strcmp0), 'g_strcmp0');
  LoadProc(Pointer(g_strcompress), 'g_strcompress');
  LoadProc(Pointer(g_strconcat), 'g_strconcat');
  LoadProc(Pointer(g_strdelimit), 'g_strdelimit');
  LoadProc(Pointer(g_strdown), 'g_strdown');
  LoadProc(Pointer(g_strdup), 'g_strdup');
  LoadProc(Pointer(g_strdup_printf), 'g_strdup_printf');
  LoadProc(Pointer(g_strdup_vprintf), 'g_strdup_vprintf');
  LoadProc(Pointer(g_strdupv), 'g_strdupv');
  LoadProc(Pointer(g_strerror), 'g_strerror');
  LoadProc(Pointer(g_strescape), 'g_strescape');
  LoadProc(Pointer(g_strfreev), 'g_strfreev');
  LoadProc(Pointer(g_string_append), 'g_string_append');
  LoadProc(Pointer(g_string_append_c), 'g_string_append_c');
  LoadProc(Pointer(g_string_append_len), 'g_string_append_len');
  LoadProc(Pointer(g_string_append_printf), 'g_string_append_printf');
  LoadProc(Pointer(g_string_append_unichar), 'g_string_append_unichar');
  LoadProc(Pointer(g_string_append_uri_escaped), 'g_string_append_uri_escaped');
  LoadProc(Pointer(g_string_append_vprintf), 'g_string_append_vprintf');
  LoadProc(Pointer(g_string_ascii_down), 'g_string_ascii_down');
  LoadProc(Pointer(g_string_ascii_up), 'g_string_ascii_up');
  LoadProc(Pointer(g_string_assign), 'g_string_assign');
  LoadProc(Pointer(g_string_chunk_clear), 'g_string_chunk_clear');
  LoadProc(Pointer(g_string_chunk_free), 'g_string_chunk_free');
  LoadProc(Pointer(g_string_chunk_insert), 'g_string_chunk_insert');
  LoadProc(Pointer(g_string_chunk_insert_const), 'g_string_chunk_insert_const');
  LoadProc(Pointer(g_string_chunk_insert_len), 'g_string_chunk_insert_len');
  LoadProc(Pointer(g_string_chunk_new), 'g_string_chunk_new');
  LoadProc(Pointer(g_string_equal), 'g_string_equal');
  LoadProc(Pointer(g_string_erase), 'g_string_erase');
  LoadProc(Pointer(g_string_free), 'g_string_free');
  LoadProc(Pointer(g_string_free_to_bytes), 'g_string_free_to_bytes');
  LoadProc(Pointer(g_string_hash), 'g_string_hash');
  LoadProc(Pointer(g_string_insert), 'g_string_insert');
  LoadProc(Pointer(g_string_insert_c), 'g_string_insert_c');
  LoadProc(Pointer(g_string_insert_len), 'g_string_insert_len');
  LoadProc(Pointer(g_string_insert_unichar), 'g_string_insert_unichar');
  LoadProc(Pointer(g_string_new), 'g_string_new');
  LoadProc(Pointer(g_string_new_len), 'g_string_new_len');
  LoadProc(Pointer(g_string_overwrite), 'g_string_overwrite');
  LoadProc(Pointer(g_string_overwrite_len), 'g_string_overwrite_len');
  LoadProc(Pointer(g_string_prepend), 'g_string_prepend');
  LoadProc(Pointer(g_string_prepend_c), 'g_string_prepend_c');
  LoadProc(Pointer(g_string_prepend_len), 'g_string_prepend_len');
  LoadProc(Pointer(g_string_prepend_unichar), 'g_string_prepend_unichar');
  LoadProc(Pointer(g_string_printf), 'g_string_printf');
  LoadProc(Pointer(g_string_set_size), 'g_string_set_size');
  LoadProc(Pointer(g_string_sized_new), 'g_string_sized_new');
  LoadProc(Pointer(g_string_truncate), 'g_string_truncate');
  LoadProc(Pointer(g_string_vprintf), 'g_string_vprintf');
  LoadProc(Pointer(g_strip_context), 'g_strip_context');
  LoadProc(Pointer(g_strjoin), 'g_strjoin');
  LoadProc(Pointer(g_strjoinv), 'g_strjoinv');
  LoadProc(Pointer(g_strlcat), 'g_strlcat');
  LoadProc(Pointer(g_strlcpy), 'g_strlcpy');
  LoadProc(Pointer(g_strncasecmp), 'g_strncasecmp');
  LoadProc(Pointer(g_strndup), 'g_strndup');
  LoadProc(Pointer(g_strnfill), 'g_strnfill');
  LoadProc(Pointer(g_strreverse), 'g_strreverse');
  LoadProc(Pointer(g_strrstr), 'g_strrstr');
  LoadProc(Pointer(g_strrstr_len), 'g_strrstr_len');
  LoadProc(Pointer(g_strsignal), 'g_strsignal');
  LoadProc(Pointer(g_strsplit), 'g_strsplit');
  LoadProc(Pointer(g_strsplit_set), 'g_strsplit_set');
  LoadProc(Pointer(g_strstr_len), 'g_strstr_len');
  LoadProc(Pointer(g_strtod), 'g_strtod');
  LoadProc(Pointer(g_strup), 'g_strup');
  LoadProc(Pointer(g_strv_get_type), 'g_strv_get_type');
  LoadProc(Pointer(g_strv_length), 'g_strv_length');
  LoadProc(Pointer(g_test_add_data_func), 'g_test_add_data_func');
  LoadProc(Pointer(g_test_add_data_func_full), 'g_test_add_data_func_full');
  LoadProc(Pointer(g_test_add_func), 'g_test_add_func');
  LoadProc(Pointer(g_test_add_vtable), 'g_test_add_vtable');
  LoadProc(Pointer(g_test_assert_expected_messages_internal), 'g_test_assert_expected_messages_internal');
  LoadProc(Pointer(g_test_bug), 'g_test_bug');
  LoadProc(Pointer(g_test_bug_base), 'g_test_bug_base');
  LoadProc(Pointer(g_test_create_case), 'g_test_create_case');
  LoadProc(Pointer(g_test_create_suite), 'g_test_create_suite');
  LoadProc(Pointer(g_test_expect_message), 'g_test_expect_message');
  LoadProc(Pointer(g_test_fail), 'g_test_fail');
  LoadProc(Pointer(g_test_get_root), 'g_test_get_root');
  LoadProc(Pointer(g_test_init), 'g_test_init');
  LoadProc(Pointer(g_test_log_buffer_free), 'g_test_log_buffer_free');
  LoadProc(Pointer(g_test_log_buffer_new), 'g_test_log_buffer_new');
  LoadProc(Pointer(g_test_log_buffer_pop), 'g_test_log_buffer_pop');
  LoadProc(Pointer(g_test_log_buffer_push), 'g_test_log_buffer_push');
  LoadProc(Pointer(g_test_log_msg_free), 'g_test_log_msg_free');
  LoadProc(Pointer(g_test_log_set_fatal_handler), 'g_test_log_set_fatal_handler');
  LoadProc(Pointer(g_test_log_type_name), 'g_test_log_type_name');
  LoadProc(Pointer(g_test_maximized_result), 'g_test_maximized_result');
  LoadProc(Pointer(g_test_message), 'g_test_message');
  LoadProc(Pointer(g_test_minimized_result), 'g_test_minimized_result');
  LoadProc(Pointer(g_test_queue_destroy), 'g_test_queue_destroy');
  LoadProc(Pointer(g_test_queue_free), 'g_test_queue_free');
  LoadProc(Pointer(g_test_rand_double), 'g_test_rand_double');
  LoadProc(Pointer(g_test_rand_double_range), 'g_test_rand_double_range');
  LoadProc(Pointer(g_test_rand_int), 'g_test_rand_int');
  LoadProc(Pointer(g_test_rand_int_range), 'g_test_rand_int_range');
  LoadProc(Pointer(g_test_run), 'g_test_run');
  LoadProc(Pointer(g_test_run_suite), 'g_test_run_suite');
  LoadProc(Pointer(g_test_suite_add), 'g_test_suite_add');
  LoadProc(Pointer(g_test_suite_add_suite), 'g_test_suite_add_suite');
  LoadProc(Pointer(g_test_timer_elapsed), 'g_test_timer_elapsed');
  LoadProc(Pointer(g_test_timer_last), 'g_test_timer_last');
  LoadProc(Pointer(g_test_timer_start), 'g_test_timer_start');
  LoadProc(Pointer(g_test_trap_assertions), 'g_test_trap_assertions');
  LoadProc(Pointer(g_test_trap_fork), 'g_test_trap_fork');
  LoadProc(Pointer(g_test_trap_has_passed), 'g_test_trap_has_passed');
  LoadProc(Pointer(g_test_trap_reached_timeout), 'g_test_trap_reached_timeout');
  LoadProc(Pointer(g_thread_error_quark), 'g_thread_error_quark');
  LoadProc(Pointer(g_thread_exit), 'g_thread_exit');
  LoadProc(Pointer(g_thread_get_type), 'g_thread_get_type');
  LoadProc(Pointer(g_thread_join), 'g_thread_join');
  LoadProc(Pointer(g_thread_new), 'g_thread_new');
  LoadProc(Pointer(g_thread_pool_free), 'g_thread_pool_free');
  LoadProc(Pointer(g_thread_pool_get_max_idle_time), 'g_thread_pool_get_max_idle_time');
  LoadProc(Pointer(g_thread_pool_get_max_threads), 'g_thread_pool_get_max_threads');
  LoadProc(Pointer(g_thread_pool_get_max_unused_threads), 'g_thread_pool_get_max_unused_threads');
  LoadProc(Pointer(g_thread_pool_get_num_threads), 'g_thread_pool_get_num_threads');
  LoadProc(Pointer(g_thread_pool_get_num_unused_threads), 'g_thread_pool_get_num_unused_threads');
  LoadProc(Pointer(g_thread_pool_new), 'g_thread_pool_new');
  LoadProc(Pointer(g_thread_pool_push), 'g_thread_pool_push');
  LoadProc(Pointer(g_thread_pool_set_max_idle_time), 'g_thread_pool_set_max_idle_time');
  LoadProc(Pointer(g_thread_pool_set_max_threads), 'g_thread_pool_set_max_threads');
  LoadProc(Pointer(g_thread_pool_set_max_unused_threads), 'g_thread_pool_set_max_unused_threads');
  LoadProc(Pointer(g_thread_pool_set_sort_function), 'g_thread_pool_set_sort_function');
  LoadProc(Pointer(g_thread_pool_stop_unused_threads), 'g_thread_pool_stop_unused_threads');
  LoadProc(Pointer(g_thread_pool_unprocessed), 'g_thread_pool_unprocessed');
  LoadProc(Pointer(g_thread_ref), 'g_thread_ref');
  LoadProc(Pointer(g_thread_self), 'g_thread_self');
  LoadProc(Pointer(g_thread_try_new), 'g_thread_try_new');
  LoadProc(Pointer(g_thread_unref), 'g_thread_unref');
  LoadProc(Pointer(g_thread_yield), 'g_thread_yield');
  LoadProc(Pointer(g_time_val_add), 'g_time_val_add');
  LoadProc(Pointer(g_time_val_from_iso8601), 'g_time_val_from_iso8601');
  LoadProc(Pointer(g_time_val_to_iso8601), 'g_time_val_to_iso8601');
  LoadProc(Pointer(g_time_zone_adjust_time), 'g_time_zone_adjust_time');
  LoadProc(Pointer(g_time_zone_find_interval), 'g_time_zone_find_interval');
  LoadProc(Pointer(g_time_zone_get_abbreviation), 'g_time_zone_get_abbreviation');
  LoadProc(Pointer(g_time_zone_get_offset), 'g_time_zone_get_offset');
  LoadProc(Pointer(g_time_zone_get_type), 'g_time_zone_get_type');
  LoadProc(Pointer(g_time_zone_is_dst), 'g_time_zone_is_dst');
  LoadProc(Pointer(g_time_zone_new), 'g_time_zone_new');
  LoadProc(Pointer(g_time_zone_new_local), 'g_time_zone_new_local');
  LoadProc(Pointer(g_time_zone_new_utc), 'g_time_zone_new_utc');
  LoadProc(Pointer(g_time_zone_ref), 'g_time_zone_ref');
  LoadProc(Pointer(g_time_zone_unref), 'g_time_zone_unref');
  LoadProc(Pointer(g_timeout_add), 'g_timeout_add');
  LoadProc(Pointer(g_timeout_add_full), 'g_timeout_add_full');
  LoadProc(Pointer(g_timeout_add_seconds), 'g_timeout_add_seconds');
  LoadProc(Pointer(g_timeout_add_seconds_full), 'g_timeout_add_seconds_full');
  LoadProc(Pointer(g_timeout_source_new), 'g_timeout_source_new');
  LoadProc(Pointer(g_timeout_source_new_seconds), 'g_timeout_source_new_seconds');
  LoadProc(Pointer(g_timer_continue), 'g_timer_continue');
  LoadProc(Pointer(g_timer_destroy), 'g_timer_destroy');
  LoadProc(Pointer(g_timer_elapsed), 'g_timer_elapsed');
  LoadProc(Pointer(g_timer_new), 'g_timer_new');
  LoadProc(Pointer(g_timer_reset), 'g_timer_reset');
  LoadProc(Pointer(g_timer_start), 'g_timer_start');
  LoadProc(Pointer(g_timer_stop), 'g_timer_stop');
  LoadProc(Pointer(g_trash_stack_height), 'g_trash_stack_height');
  LoadProc(Pointer(g_trash_stack_peek), 'g_trash_stack_peek');
  LoadProc(Pointer(g_trash_stack_pop), 'g_trash_stack_pop');
  LoadProc(Pointer(g_trash_stack_push), 'g_trash_stack_push');
  LoadProc(Pointer(g_tree_destroy), 'g_tree_destroy');
  LoadProc(Pointer(g_tree_foreach), 'g_tree_foreach');
  LoadProc(Pointer(g_tree_height), 'g_tree_height');
  LoadProc(Pointer(g_tree_insert), 'g_tree_insert');
  LoadProc(Pointer(g_tree_lookup), 'g_tree_lookup');
  LoadProc(Pointer(g_tree_lookup_extended), 'g_tree_lookup_extended');
  LoadProc(Pointer(g_tree_new), 'g_tree_new');
  LoadProc(Pointer(g_tree_new_full), 'g_tree_new_full');
  LoadProc(Pointer(g_tree_new_with_data), 'g_tree_new_with_data');
  LoadProc(Pointer(g_tree_nnodes), 'g_tree_nnodes');
  LoadProc(Pointer(g_tree_ref), 'g_tree_ref');
  LoadProc(Pointer(g_tree_remove), 'g_tree_remove');
  LoadProc(Pointer(g_tree_replace), 'g_tree_replace');
  LoadProc(Pointer(g_tree_search), 'g_tree_search');
  LoadProc(Pointer(g_tree_steal), 'g_tree_steal');
  LoadProc(Pointer(g_tree_unref), 'g_tree_unref');
  LoadProc(Pointer(g_try_malloc), 'g_try_malloc');
  LoadProc(Pointer(g_try_malloc0), 'g_try_malloc0');
  LoadProc(Pointer(g_try_malloc0_n), 'g_try_malloc0_n');
  LoadProc(Pointer(g_try_malloc_n), 'g_try_malloc_n');
  LoadProc(Pointer(g_try_realloc), 'g_try_realloc');
  LoadProc(Pointer(g_try_realloc_n), 'g_try_realloc_n');
  LoadProc(Pointer(g_ucs4_to_utf16), 'g_ucs4_to_utf16');
  LoadProc(Pointer(g_ucs4_to_utf8), 'g_ucs4_to_utf8');
  LoadProc(Pointer(g_unichar_break_type), 'g_unichar_break_type');
  LoadProc(Pointer(g_unichar_combining_class), 'g_unichar_combining_class');
  LoadProc(Pointer(g_unichar_compose), 'g_unichar_compose');
  LoadProc(Pointer(g_unichar_decompose), 'g_unichar_decompose');
  LoadProc(Pointer(g_unichar_digit_value), 'g_unichar_digit_value');
  LoadProc(Pointer(g_unichar_fully_decompose), 'g_unichar_fully_decompose');
  LoadProc(Pointer(g_unichar_get_mirror_char), 'g_unichar_get_mirror_char');
  LoadProc(Pointer(g_unichar_get_script), 'g_unichar_get_script');
  LoadProc(Pointer(g_unichar_isalnum), 'g_unichar_isalnum');
  LoadProc(Pointer(g_unichar_isalpha), 'g_unichar_isalpha');
  LoadProc(Pointer(g_unichar_iscntrl), 'g_unichar_iscntrl');
  LoadProc(Pointer(g_unichar_isdefined), 'g_unichar_isdefined');
  LoadProc(Pointer(g_unichar_isdigit), 'g_unichar_isdigit');
  LoadProc(Pointer(g_unichar_isgraph), 'g_unichar_isgraph');
  LoadProc(Pointer(g_unichar_islower), 'g_unichar_islower');
  LoadProc(Pointer(g_unichar_ismark), 'g_unichar_ismark');
  LoadProc(Pointer(g_unichar_isprint), 'g_unichar_isprint');
  LoadProc(Pointer(g_unichar_ispunct), 'g_unichar_ispunct');
  LoadProc(Pointer(g_unichar_isspace), 'g_unichar_isspace');
  LoadProc(Pointer(g_unichar_istitle), 'g_unichar_istitle');
  LoadProc(Pointer(g_unichar_isupper), 'g_unichar_isupper');
  LoadProc(Pointer(g_unichar_iswide), 'g_unichar_iswide');
  LoadProc(Pointer(g_unichar_iswide_cjk), 'g_unichar_iswide_cjk');
  LoadProc(Pointer(g_unichar_isxdigit), 'g_unichar_isxdigit');
  LoadProc(Pointer(g_unichar_iszerowidth), 'g_unichar_iszerowidth');
  LoadProc(Pointer(g_unichar_to_utf8), 'g_unichar_to_utf8');
  LoadProc(Pointer(g_unichar_tolower), 'g_unichar_tolower');
  LoadProc(Pointer(g_unichar_totitle), 'g_unichar_totitle');
  LoadProc(Pointer(g_unichar_toupper), 'g_unichar_toupper');
  LoadProc(Pointer(g_unichar_type), 'g_unichar_type');
  LoadProc(Pointer(g_unichar_validate), 'g_unichar_validate');
  LoadProc(Pointer(g_unichar_xdigit_value), 'g_unichar_xdigit_value');
  LoadProc(Pointer(g_unicode_canonical_decomposition), 'g_unicode_canonical_decomposition');
  LoadProc(Pointer(g_unicode_canonical_ordering), 'g_unicode_canonical_ordering');
  LoadProc(Pointer(g_unicode_script_from_iso15924), 'g_unicode_script_from_iso15924');
  LoadProc(Pointer(g_unicode_script_to_iso15924), 'g_unicode_script_to_iso15924');
  LoadProc(Pointer(g_unix_error_quark), 'g_unix_error_quark');
  LoadProc(Pointer(g_unix_fd_add), 'g_unix_fd_add');
  LoadProc(Pointer(g_unix_fd_add_full), 'g_unix_fd_add_full');
  LoadProc(Pointer(g_unix_fd_source_new), 'g_unix_fd_source_new');
  LoadProc(Pointer(g_unix_open_pipe), 'g_unix_open_pipe');
  LoadProc(Pointer(g_unix_set_fd_nonblocking), 'g_unix_set_fd_nonblocking');
  LoadProc(Pointer(g_unix_signal_add), 'g_unix_signal_add');
  LoadProc(Pointer(g_unix_signal_add_full), 'g_unix_signal_add_full');
  LoadProc(Pointer(g_unix_signal_source_new), 'g_unix_signal_source_new');
  LoadProc(Pointer(g_unlink), 'g_unlink');
  LoadProc(Pointer(g_unsetenv), 'g_unsetenv');
  LoadProc(Pointer(g_uri_escape_string), 'g_uri_escape_string');
  LoadProc(Pointer(g_uri_list_extract_uris), 'g_uri_list_extract_uris');
  LoadProc(Pointer(g_uri_parse_scheme), 'g_uri_parse_scheme');
  LoadProc(Pointer(g_uri_unescape_segment), 'g_uri_unescape_segment');
  LoadProc(Pointer(g_uri_unescape_string), 'g_uri_unescape_string');
  LoadProc(Pointer(g_usleep), 'g_usleep');
  LoadProc(Pointer(g_utf16_to_ucs4), 'g_utf16_to_ucs4');
  LoadProc(Pointer(g_utf16_to_utf8), 'g_utf16_to_utf8');
  LoadProc(Pointer(g_utf8_casefold), 'g_utf8_casefold');
  LoadProc(Pointer(g_utf8_collate), 'g_utf8_collate');
  LoadProc(Pointer(g_utf8_collate_key), 'g_utf8_collate_key');
  LoadProc(Pointer(g_utf8_collate_key_for_filename), 'g_utf8_collate_key_for_filename');
  LoadProc(Pointer(g_utf8_find_next_char), 'g_utf8_find_next_char');
  LoadProc(Pointer(g_utf8_find_prev_char), 'g_utf8_find_prev_char');
  LoadProc(Pointer(g_utf8_get_char), 'g_utf8_get_char');
  LoadProc(Pointer(g_utf8_get_char_validated), 'g_utf8_get_char_validated');
  LoadProc(Pointer(g_utf8_normalize), 'g_utf8_normalize');
  LoadProc(Pointer(g_utf8_offset_to_pointer), 'g_utf8_offset_to_pointer');
  LoadProc(Pointer(g_utf8_pointer_to_offset), 'g_utf8_pointer_to_offset');
  LoadProc(Pointer(g_utf8_prev_char), 'g_utf8_prev_char');
  LoadProc(Pointer(g_utf8_strchr), 'g_utf8_strchr');
  LoadProc(Pointer(g_utf8_strdown), 'g_utf8_strdown');
  LoadProc(Pointer(g_utf8_strlen), 'g_utf8_strlen');
  LoadProc(Pointer(g_utf8_strncpy), 'g_utf8_strncpy');
  LoadProc(Pointer(g_utf8_strrchr), 'g_utf8_strrchr');
  LoadProc(Pointer(g_utf8_strreverse), 'g_utf8_strreverse');
  LoadProc(Pointer(g_utf8_strup), 'g_utf8_strup');
  LoadProc(Pointer(g_utf8_substring), 'g_utf8_substring');
  LoadProc(Pointer(g_utf8_to_ucs4), 'g_utf8_to_ucs4');
  LoadProc(Pointer(g_utf8_to_ucs4_fast), 'g_utf8_to_ucs4_fast');
  LoadProc(Pointer(g_utf8_to_utf16), 'g_utf8_to_utf16');
  LoadProc(Pointer(g_utf8_validate), 'g_utf8_validate');
  LoadProc(Pointer(g_variant_builder_add), 'g_variant_builder_add');
  LoadProc(Pointer(g_variant_builder_add_parsed), 'g_variant_builder_add_parsed');
  LoadProc(Pointer(g_variant_builder_add_value), 'g_variant_builder_add_value');
  LoadProc(Pointer(g_variant_builder_clear), 'g_variant_builder_clear');
  LoadProc(Pointer(g_variant_builder_close), 'g_variant_builder_close');
  LoadProc(Pointer(g_variant_builder_end), 'g_variant_builder_end');
  LoadProc(Pointer(g_variant_builder_get_type), 'g_variant_builder_get_type');
  LoadProc(Pointer(g_variant_builder_init), 'g_variant_builder_init');
  LoadProc(Pointer(g_variant_builder_new), 'g_variant_builder_new');
  LoadProc(Pointer(g_variant_builder_open), 'g_variant_builder_open');
  LoadProc(Pointer(g_variant_builder_ref), 'g_variant_builder_ref');
  LoadProc(Pointer(g_variant_builder_unref), 'g_variant_builder_unref');
  LoadProc(Pointer(g_variant_byteswap), 'g_variant_byteswap');
  LoadProc(Pointer(g_variant_check_format_string), 'g_variant_check_format_string');
  LoadProc(Pointer(g_variant_classify), 'g_variant_classify');
  LoadProc(Pointer(g_variant_compare), 'g_variant_compare');
  LoadProc(Pointer(g_variant_dup_bytestring), 'g_variant_dup_bytestring');
  LoadProc(Pointer(g_variant_dup_bytestring_array), 'g_variant_dup_bytestring_array');
  LoadProc(Pointer(g_variant_dup_objv), 'g_variant_dup_objv');
  LoadProc(Pointer(g_variant_dup_string), 'g_variant_dup_string');
  LoadProc(Pointer(g_variant_dup_strv), 'g_variant_dup_strv');
  LoadProc(Pointer(g_variant_equal), 'g_variant_equal');
  LoadProc(Pointer(g_variant_get), 'g_variant_get');
  LoadProc(Pointer(g_variant_get_boolean), 'g_variant_get_boolean');
  LoadProc(Pointer(g_variant_get_byte), 'g_variant_get_byte');
  LoadProc(Pointer(g_variant_get_bytestring), 'g_variant_get_bytestring');
  LoadProc(Pointer(g_variant_get_bytestring_array), 'g_variant_get_bytestring_array');
  LoadProc(Pointer(g_variant_get_child), 'g_variant_get_child');
  LoadProc(Pointer(g_variant_get_child_value), 'g_variant_get_child_value');
  LoadProc(Pointer(g_variant_get_data), 'g_variant_get_data');
  LoadProc(Pointer(g_variant_get_data_as_bytes), 'g_variant_get_data_as_bytes');
  LoadProc(Pointer(g_variant_get_double), 'g_variant_get_double');
  LoadProc(Pointer(g_variant_get_fixed_array), 'g_variant_get_fixed_array');
  LoadProc(Pointer(g_variant_get_gtype), 'g_variant_get_gtype');
  LoadProc(Pointer(g_variant_get_handle), 'g_variant_get_handle');
  LoadProc(Pointer(g_variant_get_int16), 'g_variant_get_int16');
  LoadProc(Pointer(g_variant_get_int32), 'g_variant_get_int32');
  LoadProc(Pointer(g_variant_get_int64), 'g_variant_get_int64');
  LoadProc(Pointer(g_variant_get_maybe), 'g_variant_get_maybe');
  LoadProc(Pointer(g_variant_get_normal_form), 'g_variant_get_normal_form');
  LoadProc(Pointer(g_variant_get_objv), 'g_variant_get_objv');
  LoadProc(Pointer(g_variant_get_size), 'g_variant_get_size');
  LoadProc(Pointer(g_variant_get_string), 'g_variant_get_string');
  LoadProc(Pointer(g_variant_get_strv), 'g_variant_get_strv');
  LoadProc(Pointer(g_variant_get_type), 'g_variant_get_type');
  LoadProc(Pointer(g_variant_get_type_string), 'g_variant_get_type_string');
  LoadProc(Pointer(g_variant_get_uint16), 'g_variant_get_uint16');
  LoadProc(Pointer(g_variant_get_uint32), 'g_variant_get_uint32');
  LoadProc(Pointer(g_variant_get_uint64), 'g_variant_get_uint64');
  LoadProc(Pointer(g_variant_get_va), 'g_variant_get_va');
  LoadProc(Pointer(g_variant_get_variant), 'g_variant_get_variant');
  LoadProc(Pointer(g_variant_hash), 'g_variant_hash');
  LoadProc(Pointer(g_variant_is_container), 'g_variant_is_container');
  LoadProc(Pointer(g_variant_is_floating), 'g_variant_is_floating');
  LoadProc(Pointer(g_variant_is_normal_form), 'g_variant_is_normal_form');
  LoadProc(Pointer(g_variant_is_object_path), 'g_variant_is_object_path');
  LoadProc(Pointer(g_variant_is_of_type), 'g_variant_is_of_type');
  LoadProc(Pointer(g_variant_is_signature), 'g_variant_is_signature');
  LoadProc(Pointer(g_variant_iter_copy), 'g_variant_iter_copy');
  LoadProc(Pointer(g_variant_iter_free), 'g_variant_iter_free');
  LoadProc(Pointer(g_variant_iter_init), 'g_variant_iter_init');
  LoadProc(Pointer(g_variant_iter_loop), 'g_variant_iter_loop');
  LoadProc(Pointer(g_variant_iter_n_children), 'g_variant_iter_n_children');
  LoadProc(Pointer(g_variant_iter_new), 'g_variant_iter_new');
  LoadProc(Pointer(g_variant_iter_next), 'g_variant_iter_next');
  LoadProc(Pointer(g_variant_iter_next_value), 'g_variant_iter_next_value');
  LoadProc(Pointer(g_variant_lookup), 'g_variant_lookup');
  LoadProc(Pointer(g_variant_lookup_value), 'g_variant_lookup_value');
  LoadProc(Pointer(g_variant_n_children), 'g_variant_n_children');
  LoadProc(Pointer(g_variant_new), 'g_variant_new');
  LoadProc(Pointer(g_variant_new_array), 'g_variant_new_array');
  LoadProc(Pointer(g_variant_new_boolean), 'g_variant_new_boolean');
  LoadProc(Pointer(g_variant_new_byte), 'g_variant_new_byte');
  LoadProc(Pointer(g_variant_new_bytestring), 'g_variant_new_bytestring');
  LoadProc(Pointer(g_variant_new_bytestring_array), 'g_variant_new_bytestring_array');
  LoadProc(Pointer(g_variant_new_dict_entry), 'g_variant_new_dict_entry');
  LoadProc(Pointer(g_variant_new_double), 'g_variant_new_double');
  LoadProc(Pointer(g_variant_new_fixed_array), 'g_variant_new_fixed_array');
  LoadProc(Pointer(g_variant_new_from_bytes), 'g_variant_new_from_bytes');
  LoadProc(Pointer(g_variant_new_from_data), 'g_variant_new_from_data');
  LoadProc(Pointer(g_variant_new_handle), 'g_variant_new_handle');
  LoadProc(Pointer(g_variant_new_int16), 'g_variant_new_int16');
  LoadProc(Pointer(g_variant_new_int32), 'g_variant_new_int32');
  LoadProc(Pointer(g_variant_new_int64), 'g_variant_new_int64');
  LoadProc(Pointer(g_variant_new_maybe), 'g_variant_new_maybe');
  LoadProc(Pointer(g_variant_new_object_path), 'g_variant_new_object_path');
  LoadProc(Pointer(g_variant_new_objv), 'g_variant_new_objv');
  LoadProc(Pointer(g_variant_new_parsed), 'g_variant_new_parsed');
  LoadProc(Pointer(g_variant_new_parsed_va), 'g_variant_new_parsed_va');
  LoadProc(Pointer(g_variant_new_signature), 'g_variant_new_signature');
  LoadProc(Pointer(g_variant_new_string), 'g_variant_new_string');
  LoadProc(Pointer(g_variant_new_strv), 'g_variant_new_strv');
  LoadProc(Pointer(g_variant_new_tuple), 'g_variant_new_tuple');
  LoadProc(Pointer(g_variant_new_uint16), 'g_variant_new_uint16');
  LoadProc(Pointer(g_variant_new_uint32), 'g_variant_new_uint32');
  LoadProc(Pointer(g_variant_new_uint64), 'g_variant_new_uint64');
  LoadProc(Pointer(g_variant_new_va), 'g_variant_new_va');
  LoadProc(Pointer(g_variant_new_variant), 'g_variant_new_variant');
  LoadProc(Pointer(g_variant_parse), 'g_variant_parse');
  LoadProc(Pointer(g_variant_parser_get_error_quark), 'g_variant_parser_get_error_quark');
  LoadProc(Pointer(g_variant_print), 'g_variant_print');
  LoadProc(Pointer(g_variant_print_string), 'g_variant_print_string');
  LoadProc(Pointer(g_variant_ref), 'g_variant_ref');
  LoadProc(Pointer(g_variant_ref_sink), 'g_variant_ref_sink');
  LoadProc(Pointer(g_variant_store), 'g_variant_store');
  LoadProc(Pointer(g_variant_take_ref), 'g_variant_take_ref');
  LoadProc(Pointer(g_variant_type_checked_), 'g_variant_type_checked_');
  LoadProc(Pointer(g_variant_type_copy), 'g_variant_type_copy');
  LoadProc(Pointer(g_variant_type_dup_string), 'g_variant_type_dup_string');
  LoadProc(Pointer(g_variant_type_element), 'g_variant_type_element');
  LoadProc(Pointer(g_variant_type_equal), 'g_variant_type_equal');
  LoadProc(Pointer(g_variant_type_first), 'g_variant_type_first');
  LoadProc(Pointer(g_variant_type_free), 'g_variant_type_free');
  LoadProc(Pointer(g_variant_type_get_gtype), 'g_variant_type_get_gtype');
  LoadProc(Pointer(g_variant_type_get_string_length), 'g_variant_type_get_string_length');
  LoadProc(Pointer(g_variant_type_hash), 'g_variant_type_hash');
  LoadProc(Pointer(g_variant_type_is_array), 'g_variant_type_is_array');
  LoadProc(Pointer(g_variant_type_is_basic), 'g_variant_type_is_basic');
  LoadProc(Pointer(g_variant_type_is_container), 'g_variant_type_is_container');
  LoadProc(Pointer(g_variant_type_is_definite), 'g_variant_type_is_definite');
  LoadProc(Pointer(g_variant_type_is_dict_entry), 'g_variant_type_is_dict_entry');
  LoadProc(Pointer(g_variant_type_is_maybe), 'g_variant_type_is_maybe');
  LoadProc(Pointer(g_variant_type_is_subtype_of), 'g_variant_type_is_subtype_of');
  LoadProc(Pointer(g_variant_type_is_tuple), 'g_variant_type_is_tuple');
  LoadProc(Pointer(g_variant_type_is_variant), 'g_variant_type_is_variant');
  LoadProc(Pointer(g_variant_type_key), 'g_variant_type_key');
  LoadProc(Pointer(g_variant_type_n_items), 'g_variant_type_n_items');
  LoadProc(Pointer(g_variant_type_new), 'g_variant_type_new');
  LoadProc(Pointer(g_variant_type_new_array), 'g_variant_type_new_array');
  LoadProc(Pointer(g_variant_type_new_dict_entry), 'g_variant_type_new_dict_entry');
  LoadProc(Pointer(g_variant_type_new_maybe), 'g_variant_type_new_maybe');
  LoadProc(Pointer(g_variant_type_new_tuple), 'g_variant_type_new_tuple');
  LoadProc(Pointer(g_variant_type_next), 'g_variant_type_next');
  LoadProc(Pointer(g_variant_type_peek_string), 'g_variant_type_peek_string');
  LoadProc(Pointer(g_variant_type_string_is_valid), 'g_variant_type_string_is_valid');
  LoadProc(Pointer(g_variant_type_string_scan), 'g_variant_type_string_scan');
  LoadProc(Pointer(g_variant_type_value), 'g_variant_type_value');
  LoadProc(Pointer(g_variant_unref), 'g_variant_unref');
  LoadProc(Pointer(g_vasprintf), 'g_vasprintf');
  LoadProc(Pointer(g_vfprintf), 'g_vfprintf');
  LoadProc(Pointer(g_vprintf), 'g_vprintf');
  LoadProc(Pointer(g_vsnprintf), 'g_vsnprintf');
  LoadProc(Pointer(g_vsprintf), 'g_vsprintf');
  LoadProc(Pointer(g_warn_message), 'g_warn_message');
  LoadProc(Pointer(glib_check_version), 'glib_check_version');
end;

procedure UnloadLibraries;
begin
 if libglib_2_0_so_0 <> 0 then
   UnloadLibrary(libglib_2_0_so_0);
   libglib_2_0_so_0 := 0;
 if libgobject_2_0_so_0 <> 0 then
   UnloadLibrary(libgobject_2_0_so_0);
   libgobject_2_0_so_0 := 0;
  g_access := nil;
  g_array_append_vals := nil;
  g_array_free := nil;
  g_array_get_element_size := nil;
  g_array_get_type := nil;
  g_array_insert_vals := nil;
  g_array_new := nil;
  g_array_prepend_vals := nil;
  g_array_ref := nil;
  g_array_remove_index := nil;
  g_array_remove_index_fast := nil;
  g_array_remove_range := nil;
  g_array_set_clear_func := nil;
  g_array_set_size := nil;
  g_array_sized_new := nil;
  g_array_sort := nil;
  g_array_sort_with_data := nil;
  g_array_unref := nil;
  g_ascii_digit_value := nil;
  g_ascii_dtostr := nil;
  g_ascii_formatd := nil;
  g_ascii_strcasecmp := nil;
  g_ascii_strdown := nil;
  g_ascii_strncasecmp := nil;
  g_ascii_strtod := nil;
  g_ascii_strtoll := nil;
  g_ascii_strtoull := nil;
  g_ascii_strup := nil;
  g_ascii_tolower := nil;
  g_ascii_toupper := nil;
  g_ascii_xdigit_value := nil;
  g_assert_warning := nil;
  g_assertion_message := nil;
  g_assertion_message_cmpnum := nil;
  g_assertion_message_cmpstr := nil;
  g_assertion_message_error := nil;
  g_assertion_message_expr := nil;
  g_async_queue_length := nil;
  g_async_queue_length_unlocked := nil;
  g_async_queue_lock := nil;
  g_async_queue_new := nil;
  g_async_queue_new_full := nil;
  g_async_queue_pop := nil;
  g_async_queue_pop_unlocked := nil;
  g_async_queue_push := nil;
  g_async_queue_push_sorted := nil;
  g_async_queue_push_sorted_unlocked := nil;
  g_async_queue_push_unlocked := nil;
  g_async_queue_ref := nil;
  g_async_queue_sort := nil;
  g_async_queue_sort_unlocked := nil;
  g_async_queue_timeout_pop := nil;
  g_async_queue_timeout_pop_unlocked := nil;
  g_async_queue_try_pop := nil;
  g_async_queue_try_pop_unlocked := nil;
  g_async_queue_unlock := nil;
  g_async_queue_unref := nil;
  g_atexit := nil;
  g_atomic_int_add := nil;
  g_atomic_int_and := nil;
  g_atomic_int_compare_and_exchange := nil;
  g_atomic_int_dec_and_test := nil;
  g_atomic_int_exchange_and_add := nil;
  g_atomic_int_get := nil;
  g_atomic_int_inc := nil;
  g_atomic_int_or := nil;
  g_atomic_int_set := nil;
  g_atomic_int_xor := nil;
  g_atomic_pointer_add := nil;
  g_atomic_pointer_and := nil;
  g_atomic_pointer_compare_and_exchange := nil;
  g_atomic_pointer_get := nil;
  g_atomic_pointer_or := nil;
  g_atomic_pointer_set := nil;
  g_atomic_pointer_xor := nil;
  g_base64_decode := nil;
  g_base64_decode_inplace := nil;
  g_base64_decode_step := nil;
  g_base64_encode := nil;
  g_base64_encode_close := nil;
  g_base64_encode_step := nil;
  g_basename := nil;
  g_bit_lock := nil;
  g_bit_nth_lsf := nil;
  g_bit_nth_msf := nil;
  g_bit_storage := nil;
  g_bit_trylock := nil;
  g_bit_unlock := nil;
  g_bookmark_file_add_application := nil;
  g_bookmark_file_add_group := nil;
  g_bookmark_file_error_quark := nil;
  g_bookmark_file_free := nil;
  g_bookmark_file_get_added := nil;
  g_bookmark_file_get_app_info := nil;
  g_bookmark_file_get_applications := nil;
  g_bookmark_file_get_description := nil;
  g_bookmark_file_get_groups := nil;
  g_bookmark_file_get_icon := nil;
  g_bookmark_file_get_is_private := nil;
  g_bookmark_file_get_mime_type := nil;
  g_bookmark_file_get_modified := nil;
  g_bookmark_file_get_size := nil;
  g_bookmark_file_get_title := nil;
  g_bookmark_file_get_uris := nil;
  g_bookmark_file_get_visited := nil;
  g_bookmark_file_has_application := nil;
  g_bookmark_file_has_group := nil;
  g_bookmark_file_has_item := nil;
  g_bookmark_file_load_from_data := nil;
  g_bookmark_file_load_from_data_dirs := nil;
  g_bookmark_file_load_from_file := nil;
  g_bookmark_file_move_item := nil;
  g_bookmark_file_new := nil;
  g_bookmark_file_remove_application := nil;
  g_bookmark_file_remove_group := nil;
  g_bookmark_file_remove_item := nil;
  g_bookmark_file_set_added := nil;
  g_bookmark_file_set_app_info := nil;
  g_bookmark_file_set_description := nil;
  g_bookmark_file_set_groups := nil;
  g_bookmark_file_set_icon := nil;
  g_bookmark_file_set_is_private := nil;
  g_bookmark_file_set_mime_type := nil;
  g_bookmark_file_set_modified := nil;
  g_bookmark_file_set_title := nil;
  g_bookmark_file_set_visited := nil;
  g_bookmark_file_to_data := nil;
  g_bookmark_file_to_file := nil;
  g_build_filename := nil;
  g_build_filenamev := nil;
  g_build_path := nil;
  g_build_pathv := nil;
  g_byte_array_append := nil;
  g_byte_array_free := nil;
  g_byte_array_free_to_bytes := nil;
  g_byte_array_get_type := nil;
  g_byte_array_new := nil;
  g_byte_array_new_take := nil;
  g_byte_array_prepend := nil;
  g_byte_array_ref := nil;
  g_byte_array_remove_index := nil;
  g_byte_array_remove_index_fast := nil;
  g_byte_array_remove_range := nil;
  g_byte_array_set_size := nil;
  g_byte_array_sized_new := nil;
  g_byte_array_sort := nil;
  g_byte_array_sort_with_data := nil;
  g_byte_array_unref := nil;
  g_bytes_compare := nil;
  g_bytes_equal := nil;
  g_bytes_get_data := nil;
  g_bytes_get_size := nil;
  g_bytes_get_type := nil;
  g_bytes_hash := nil;
  g_bytes_new := nil;
  g_bytes_new_from_bytes := nil;
  g_bytes_new_static := nil;
  g_bytes_new_take := nil;
  g_bytes_new_with_free_func := nil;
  g_bytes_ref := nil;
  g_bytes_unref := nil;
  g_bytes_unref_to_array := nil;
  g_bytes_unref_to_data := nil;
  g_chdir := nil;
  g_checksum_copy := nil;
  g_checksum_free := nil;
  g_checksum_get_digest := nil;
  g_checksum_get_string := nil;
  g_checksum_get_type := nil;
  g_checksum_new := nil;
  g_checksum_reset := nil;
  g_checksum_type_get_length := nil;
  g_checksum_update := nil;
  g_child_watch_add := nil;
  g_child_watch_add_full := nil;
  g_child_watch_source_new := nil;
  g_clear_error := nil;
  g_clear_pointer := nil;
  g_close := nil;
  g_compute_checksum_for_bytes := nil;
  g_compute_checksum_for_data := nil;
  g_compute_checksum_for_string := nil;
  g_compute_hmac_for_data := nil;
  g_compute_hmac_for_string := nil;
  g_cond_broadcast := nil;
  g_cond_clear := nil;
  g_cond_init := nil;
  g_cond_signal := nil;
  g_cond_wait := nil;
  g_cond_wait_until := nil;
  g_convert := nil;
  g_convert_error_quark := nil;
  g_convert_with_fallback := nil;
  g_convert_with_iconv := nil;
  g_datalist_clear := nil;
  g_datalist_foreach := nil;
  g_datalist_get_data := nil;
  g_datalist_get_flags := nil;
  g_datalist_id_dup_data := nil;
  g_datalist_id_get_data := nil;
  g_datalist_id_remove_no_notify := nil;
  g_datalist_id_replace_data := nil;
  g_datalist_id_set_data_full := nil;
  g_datalist_init := nil;
  g_datalist_set_flags := nil;
  g_datalist_unset_flags := nil;
  g_dataset_destroy := nil;
  g_dataset_foreach := nil;
  g_dataset_id_get_data := nil;
  g_dataset_id_remove_no_notify := nil;
  g_dataset_id_set_data_full := nil;
  g_date_add_days := nil;
  g_date_add_months := nil;
  g_date_add_years := nil;
  g_date_clamp := nil;
  g_date_clear := nil;
  g_date_compare := nil;
  g_date_days_between := nil;
  g_date_free := nil;
  g_date_get_day := nil;
  g_date_get_day_of_year := nil;
  g_date_get_days_in_month := nil;
  g_date_get_iso8601_week_of_year := nil;
  g_date_get_julian := nil;
  g_date_get_monday_week_of_year := nil;
  g_date_get_monday_weeks_in_year := nil;
  g_date_get_month := nil;
  g_date_get_sunday_week_of_year := nil;
  g_date_get_sunday_weeks_in_year := nil;
  g_date_get_type := nil;
  g_date_get_weekday := nil;
  g_date_get_year := nil;
  g_date_is_first_of_month := nil;
  g_date_is_last_of_month := nil;
  g_date_is_leap_year := nil;
  g_date_new := nil;
  g_date_new_dmy := nil;
  g_date_new_julian := nil;
  g_date_order := nil;
  g_date_set_day := nil;
  g_date_set_dmy := nil;
  g_date_set_julian := nil;
  g_date_set_month := nil;
  g_date_set_parse := nil;
  g_date_set_time_t := nil;
  g_date_set_time_val := nil;
  g_date_set_year := nil;
  g_date_strftime := nil;
  g_date_subtract_days := nil;
  g_date_subtract_months := nil;
  g_date_subtract_years := nil;
  g_date_time_add := nil;
  g_date_time_add_days := nil;
  g_date_time_add_full := nil;
  g_date_time_add_hours := nil;
  g_date_time_add_minutes := nil;
  g_date_time_add_months := nil;
  g_date_time_add_seconds := nil;
  g_date_time_add_weeks := nil;
  g_date_time_add_years := nil;
  g_date_time_compare := nil;
  g_date_time_difference := nil;
  g_date_time_equal := nil;
  g_date_time_format := nil;
  g_date_time_get_day_of_month := nil;
  g_date_time_get_day_of_week := nil;
  g_date_time_get_day_of_year := nil;
  g_date_time_get_hour := nil;
  g_date_time_get_microsecond := nil;
  g_date_time_get_minute := nil;
  g_date_time_get_month := nil;
  g_date_time_get_second := nil;
  g_date_time_get_seconds := nil;
  g_date_time_get_timezone_abbreviation := nil;
  g_date_time_get_type := nil;
  g_date_time_get_utc_offset := nil;
  g_date_time_get_week_numbering_year := nil;
  g_date_time_get_week_of_year := nil;
  g_date_time_get_year := nil;
  g_date_time_get_ymd := nil;
  g_date_time_hash := nil;
  g_date_time_is_daylight_savings := nil;
  g_date_time_new := nil;
  g_date_time_new_from_timeval_local := nil;
  g_date_time_new_from_timeval_utc := nil;
  g_date_time_new_from_unix_local := nil;
  g_date_time_new_from_unix_utc := nil;
  g_date_time_new_local := nil;
  g_date_time_new_now := nil;
  g_date_time_new_now_local := nil;
  g_date_time_new_now_utc := nil;
  g_date_time_new_utc := nil;
  g_date_time_ref := nil;
  g_date_time_to_local := nil;
  g_date_time_to_timeval := nil;
  g_date_time_to_timezone := nil;
  g_date_time_to_unix := nil;
  g_date_time_to_utc := nil;
  g_date_time_unref := nil;
  g_date_to_struct_tm := nil;
  g_date_valid := nil;
  g_date_valid_day := nil;
  g_date_valid_dmy := nil;
  g_date_valid_julian := nil;
  g_date_valid_month := nil;
  g_date_valid_weekday := nil;
  g_date_valid_year := nil;
  g_dcgettext := nil;
  g_dgettext := nil;
  g_dir_close := nil;
  g_dir_make_tmp := nil;
  g_dir_open := nil;
  g_dir_read_name := nil;
  g_dir_rewind := nil;
  g_direct_equal := nil;
  g_direct_hash := nil;
  g_dngettext := nil;
  g_double_equal := nil;
  g_double_hash := nil;
  g_dpgettext := nil;
  g_dpgettext2 := nil;
  g_environ_getenv := nil;
  g_environ_setenv := nil;
  g_environ_unsetenv := nil;
  g_error_copy := nil;
  g_error_free := nil;
  g_error_get_type := nil;
  g_error_matches := nil;
  g_error_new := nil;
  g_error_new_literal := nil;
  g_error_new_valist := nil;
  g_file_error_from_errno := nil;
  g_file_error_quark := nil;
  g_file_get_contents := nil;
  g_file_open_tmp := nil;
  g_file_read_link := nil;
  g_file_set_contents := nil;
  g_file_test := nil;
  g_filename_display_basename := nil;
  g_filename_display_name := nil;
  g_filename_from_uri := nil;
  g_filename_from_utf8 := nil;
  g_filename_to_uri := nil;
  g_filename_to_utf8 := nil;
  g_find_program_in_path := nil;
  g_format_size := nil;
  g_format_size_for_display := nil;
  g_format_size_full := nil;
  g_fprintf := nil;
  g_free := nil;
  g_get_application_name := nil;
  g_get_charset := nil;
  g_get_codeset := nil;
  g_get_current_dir := nil;
  g_get_current_time := nil;
  g_get_environ := nil;
  g_get_filename_charsets := nil;
  g_get_home_dir := nil;
  g_get_host_name := nil;
  g_get_language_names := nil;
  g_get_locale_variants := nil;
  g_get_monotonic_time := nil;
  g_get_num_processors := nil;
  g_get_prgname := nil;
  g_get_real_name := nil;
  g_get_real_time := nil;
  g_get_system_config_dirs := nil;
  g_get_system_data_dirs := nil;
  g_get_tmp_dir := nil;
  g_get_user_cache_dir := nil;
  g_get_user_config_dir := nil;
  g_get_user_data_dir := nil;
  g_get_user_name := nil;
  g_get_user_runtime_dir := nil;
  g_get_user_special_dir := nil;
  g_getenv := nil;
  g_gstring_get_type := nil;
  g_hash_table_add := nil;
  g_hash_table_contains := nil;
  g_hash_table_destroy := nil;
  g_hash_table_find := nil;
  g_hash_table_foreach := nil;
  g_hash_table_foreach_remove := nil;
  g_hash_table_foreach_steal := nil;
  g_hash_table_get_keys := nil;
  g_hash_table_get_type := nil;
  g_hash_table_get_values := nil;
  g_hash_table_insert := nil;
  g_hash_table_iter_get_hash_table := nil;
  g_hash_table_iter_init := nil;
  g_hash_table_iter_next := nil;
  g_hash_table_iter_remove := nil;
  g_hash_table_iter_replace := nil;
  g_hash_table_iter_steal := nil;
  g_hash_table_lookup := nil;
  g_hash_table_lookup_extended := nil;
  g_hash_table_new := nil;
  g_hash_table_new_full := nil;
  g_hash_table_ref := nil;
  g_hash_table_remove := nil;
  g_hash_table_remove_all := nil;
  g_hash_table_replace := nil;
  g_hash_table_size := nil;
  g_hash_table_steal := nil;
  g_hash_table_steal_all := nil;
  g_hash_table_unref := nil;
  g_hmac_copy := nil;
  g_hmac_get_digest := nil;
  g_hmac_get_string := nil;
  g_hmac_new := nil;
  g_hmac_ref := nil;
  g_hmac_unref := nil;
  g_hmac_update := nil;
  g_hook_alloc := nil;
  g_hook_compare_ids := nil;
  g_hook_destroy := nil;
  g_hook_destroy_link := nil;
  g_hook_find := nil;
  g_hook_find_data := nil;
  g_hook_find_func := nil;
  g_hook_find_func_data := nil;
  g_hook_first_valid := nil;
  g_hook_free := nil;
  g_hook_get := nil;
  g_hook_insert_before := nil;
  g_hook_insert_sorted := nil;
  g_hook_list_clear := nil;
  g_hook_list_init := nil;
  g_hook_list_invoke := nil;
  g_hook_list_invoke_check := nil;
  g_hook_list_marshal := nil;
  g_hook_list_marshal_check := nil;
  g_hook_next_valid := nil;
  g_hook_prepend := nil;
  g_hook_ref := nil;
  g_hook_unref := nil;
  g_hostname_is_ascii_encoded := nil;
  g_hostname_is_ip_address := nil;
  g_hostname_is_non_ascii := nil;
  g_hostname_to_ascii := nil;
  g_hostname_to_unicode := nil;
  g_iconv := nil;
  g_iconv_close := nil;
  g_iconv_open := nil;
  g_idle_add := nil;
  g_idle_add_full := nil;
  g_idle_remove_by_data := nil;
  g_idle_source_new := nil;
  g_int64_equal := nil;
  g_int64_hash := nil;
  g_int_equal := nil;
  g_int_hash := nil;
  g_intern_static_string := nil;
  g_intern_string := nil;
  g_io_add_watch := nil;
  g_io_add_watch_full := nil;
  g_io_channel_error_from_errno := nil;
  g_io_channel_error_quark := nil;
  g_io_channel_flush := nil;
  g_io_channel_get_buffer_condition := nil;
  g_io_channel_get_buffer_size := nil;
  g_io_channel_get_buffered := nil;
  g_io_channel_get_close_on_unref := nil;
  g_io_channel_get_encoding := nil;
  g_io_channel_get_flags := nil;
  g_io_channel_get_line_term := nil;
  g_io_channel_get_type := nil;
  g_io_channel_init := nil;
  g_io_channel_new_file := nil;
  g_io_channel_read_chars := nil;
  g_io_channel_read_line := nil;
  g_io_channel_read_line_string := nil;
  g_io_channel_read_to_end := nil;
  g_io_channel_read_unichar := nil;
  g_io_channel_ref := nil;
  g_io_channel_seek_position := nil;
  g_io_channel_set_buffer_size := nil;
  g_io_channel_set_buffered := nil;
  g_io_channel_set_close_on_unref := nil;
  g_io_channel_set_encoding := nil;
  g_io_channel_set_flags := nil;
  g_io_channel_set_line_term := nil;
  g_io_channel_shutdown := nil;
  g_io_channel_unix_get_fd := nil;
  g_io_channel_unix_new := nil;
  g_io_channel_unref := nil;
  g_io_channel_write_chars := nil;
  g_io_channel_write_unichar := nil;
  g_io_create_watch := nil;
  g_key_file_error_quark := nil;
  g_key_file_free := nil;
  g_key_file_get_boolean := nil;
  g_key_file_get_boolean_list := nil;
  g_key_file_get_comment := nil;
  g_key_file_get_double := nil;
  g_key_file_get_double_list := nil;
  g_key_file_get_groups := nil;
  g_key_file_get_int64 := nil;
  g_key_file_get_integer := nil;
  g_key_file_get_integer_list := nil;
  g_key_file_get_keys := nil;
  g_key_file_get_locale_string := nil;
  g_key_file_get_locale_string_list := nil;
  g_key_file_get_start_group := nil;
  g_key_file_get_string := nil;
  g_key_file_get_string_list := nil;
  g_key_file_get_type := nil;
  g_key_file_get_uint64 := nil;
  g_key_file_get_value := nil;
  g_key_file_has_group := nil;
  g_key_file_has_key := nil;
  g_key_file_load_from_data := nil;
  g_key_file_load_from_data_dirs := nil;
  g_key_file_load_from_dirs := nil;
  g_key_file_load_from_file := nil;
  g_key_file_new := nil;
  g_key_file_ref := nil;
  g_key_file_remove_comment := nil;
  g_key_file_remove_group := nil;
  g_key_file_remove_key := nil;
  g_key_file_set_boolean := nil;
  g_key_file_set_boolean_list := nil;
  g_key_file_set_comment := nil;
  g_key_file_set_double := nil;
  g_key_file_set_double_list := nil;
  g_key_file_set_int64 := nil;
  g_key_file_set_integer := nil;
  g_key_file_set_integer_list := nil;
  g_key_file_set_list_separator := nil;
  g_key_file_set_locale_string := nil;
  g_key_file_set_locale_string_list := nil;
  g_key_file_set_string := nil;
  g_key_file_set_string_list := nil;
  g_key_file_set_uint64 := nil;
  g_key_file_set_value := nil;
  g_key_file_to_data := nil;
  g_key_file_unref := nil;
  g_list_alloc := nil;
  g_list_append := nil;
  g_list_concat := nil;
  g_list_copy := nil;
  g_list_copy_deep := nil;
  g_list_delete_link := nil;
  g_list_find := nil;
  g_list_find_custom := nil;
  g_list_first := nil;
  g_list_foreach := nil;
  g_list_free := nil;
  g_list_free_1 := nil;
  g_list_free_full := nil;
  g_list_index := nil;
  g_list_insert := nil;
  g_list_insert_before := nil;
  g_list_insert_sorted := nil;
  g_list_insert_sorted_with_data := nil;
  g_list_last := nil;
  g_list_length := nil;
  g_list_nth := nil;
  g_list_nth_data := nil;
  g_list_nth_prev := nil;
  g_list_position := nil;
  g_list_prepend := nil;
  g_list_remove := nil;
  g_list_remove_all := nil;
  g_list_remove_link := nil;
  g_list_reverse := nil;
  g_list_sort := nil;
  g_list_sort_with_data := nil;
  g_listenv := nil;
  g_locale_from_utf8 := nil;
  g_locale_to_utf8 := nil;
  g_log := nil;
  g_log_default_handler := nil;
  g_log_remove_handler := nil;
  g_log_set_always_fatal := nil;
  g_log_set_default_handler := nil;
  g_log_set_fatal_mask := nil;
  g_log_set_handler := nil;
  g_logv := nil;
  g_main_context_acquire := nil;
  g_main_context_add_poll := nil;
  g_main_context_check := nil;
  g_main_context_default := nil;
  g_main_context_dispatch := nil;
  g_main_context_find_source_by_funcs_user_data := nil;
  g_main_context_find_source_by_id := nil;
  g_main_context_find_source_by_user_data := nil;
  g_main_context_get_poll_func := nil;
  g_main_context_get_thread_default := nil;
  g_main_context_get_type := nil;
  g_main_context_invoke := nil;
  g_main_context_invoke_full := nil;
  g_main_context_is_owner := nil;
  g_main_context_iteration := nil;
  g_main_context_new := nil;
  g_main_context_pending := nil;
  g_main_context_pop_thread_default := nil;
  g_main_context_prepare := nil;
  g_main_context_push_thread_default := nil;
  g_main_context_query := nil;
  g_main_context_ref := nil;
  g_main_context_ref_thread_default := nil;
  g_main_context_release := nil;
  g_main_context_remove_poll := nil;
  g_main_context_set_poll_func := nil;
  g_main_context_unref := nil;
  g_main_context_wait := nil;
  g_main_context_wakeup := nil;
  g_main_current_source := nil;
  g_main_depth := nil;
  g_main_loop_get_context := nil;
  g_main_loop_get_type := nil;
  g_main_loop_is_running := nil;
  g_main_loop_new := nil;
  g_main_loop_quit := nil;
  g_main_loop_ref := nil;
  g_main_loop_run := nil;
  g_main_loop_unref := nil;
  g_malloc := nil;
  g_malloc0 := nil;
  g_malloc0_n := nil;
  g_malloc_n := nil;
  g_mapped_file_get_bytes := nil;
  g_mapped_file_get_contents := nil;
  g_mapped_file_get_length := nil;
  g_mapped_file_new := nil;
  g_mapped_file_new_from_fd := nil;
  g_mapped_file_ref := nil;
  g_mapped_file_unref := nil;
  g_markup_collect_attributes := nil;
  g_markup_error_quark := nil;
  g_markup_escape_text := nil;
  g_markup_parse_context_end_parse := nil;
  g_markup_parse_context_free := nil;
  g_markup_parse_context_get_element := nil;
  g_markup_parse_context_get_element_stack := nil;
  g_markup_parse_context_get_position := nil;
  g_markup_parse_context_get_type := nil;
  g_markup_parse_context_get_user_data := nil;
  g_markup_parse_context_new := nil;
  g_markup_parse_context_parse := nil;
  g_markup_parse_context_pop := nil;
  g_markup_parse_context_push := nil;
  g_markup_parse_context_ref := nil;
  g_markup_parse_context_unref := nil;
  g_markup_printf_escaped := nil;
  g_markup_vprintf_escaped := nil;
  g_match_info_expand_references := nil;
  g_match_info_fetch := nil;
  g_match_info_fetch_all := nil;
  g_match_info_fetch_named := nil;
  g_match_info_fetch_named_pos := nil;
  g_match_info_fetch_pos := nil;
  g_match_info_free := nil;
  g_match_info_get_match_count := nil;
  g_match_info_get_regex := nil;
  g_match_info_get_string := nil;
  g_match_info_get_type := nil;
  g_match_info_is_partial_match := nil;
  g_match_info_matches := nil;
  g_match_info_next := nil;
  g_match_info_ref := nil;
  g_match_info_unref := nil;
  g_mem_is_system_malloc := nil;
  g_mem_profile := nil;
  g_mem_set_vtable := nil;
  g_memdup := nil;
  g_mkdir_with_parents := nil;
  g_mkdtemp := nil;
  g_mkdtemp_full := nil;
  g_mkstemp := nil;
  g_mkstemp_full := nil;
  g_mutex_clear := nil;
  g_mutex_init := nil;
  g_mutex_lock := nil;
  g_mutex_trylock := nil;
  g_mutex_unlock := nil;
  g_node_child_index := nil;
  g_node_child_position := nil;
  g_node_children_foreach := nil;
  g_node_copy := nil;
  g_node_copy_deep := nil;
  g_node_depth := nil;
  g_node_destroy := nil;
  g_node_find := nil;
  g_node_find_child := nil;
  g_node_first_sibling := nil;
  g_node_get_root := nil;
  g_node_insert := nil;
  g_node_insert_after := nil;
  g_node_insert_before := nil;
  g_node_is_ancestor := nil;
  g_node_last_child := nil;
  g_node_last_sibling := nil;
  g_node_max_height := nil;
  g_node_n_children := nil;
  g_node_n_nodes := nil;
  g_node_new := nil;
  g_node_nth_child := nil;
  g_node_prepend := nil;
  g_node_reverse_children := nil;
  g_node_traverse := nil;
  g_node_unlink := nil;
  g_nullify_pointer := nil;
  g_on_error_query := nil;
  g_on_error_stack_trace := nil;
  g_once_impl := nil;
  g_once_init_enter := nil;
  g_once_init_leave := nil;
  g_option_context_add_group := nil;
  g_option_context_add_main_entries := nil;
  g_option_context_free := nil;
  g_option_context_get_description := nil;
  g_option_context_get_help := nil;
  g_option_context_get_help_enabled := nil;
  g_option_context_get_ignore_unknown_options := nil;
  g_option_context_get_main_group := nil;
  g_option_context_get_summary := nil;
  g_option_context_new := nil;
  g_option_context_parse := nil;
  g_option_context_set_description := nil;
  g_option_context_set_help_enabled := nil;
  g_option_context_set_ignore_unknown_options := nil;
  g_option_context_set_main_group := nil;
  g_option_context_set_summary := nil;
  g_option_context_set_translate_func := nil;
  g_option_context_set_translation_domain := nil;
  g_option_error_quark := nil;
  g_option_group_add_entries := nil;
  g_option_group_free := nil;
  g_option_group_new := nil;
  g_option_group_set_error_hook := nil;
  g_option_group_set_parse_hooks := nil;
  g_option_group_set_translate_func := nil;
  g_option_group_set_translation_domain := nil;
  g_parse_debug_string := nil;
  g_path_get_basename := nil;
  g_path_get_dirname := nil;
  g_path_is_absolute := nil;
  g_path_skip_root := nil;
  g_pattern_match := nil;
  g_pattern_match_simple := nil;
  g_pattern_match_string := nil;
  g_pattern_spec_equal := nil;
  g_pattern_spec_free := nil;
  g_pattern_spec_new := nil;
  g_pointer_bit_lock := nil;
  g_pointer_bit_trylock := nil;
  g_pointer_bit_unlock := nil;
  g_poll := nil;
  g_pollfd_get_type := nil;
  g_prefix_error := nil;
  g_print := nil;
  g_printerr := nil;
  g_printf := nil;
  g_printf_string_upper_bound := nil;
  g_private_get := nil;
  g_private_replace := nil;
  g_private_set := nil;
  g_propagate_error := nil;
  g_propagate_prefixed_error := nil;
  g_ptr_array_add := nil;
  g_ptr_array_foreach := nil;
  g_ptr_array_free := nil;
  g_ptr_array_get_type := nil;
  g_ptr_array_new := nil;
  g_ptr_array_new_full := nil;
  g_ptr_array_new_with_free_func := nil;
  g_ptr_array_ref := nil;
  g_ptr_array_remove := nil;
  g_ptr_array_remove_fast := nil;
  g_ptr_array_remove_index := nil;
  g_ptr_array_remove_index_fast := nil;
  g_ptr_array_remove_range := nil;
  g_ptr_array_set_free_func := nil;
  g_ptr_array_set_size := nil;
  g_ptr_array_sized_new := nil;
  g_ptr_array_sort := nil;
  g_ptr_array_sort_with_data := nil;
  g_ptr_array_unref := nil;
  g_qsort_with_data := nil;
  g_quark_from_static_string := nil;
  g_quark_from_string := nil;
  g_quark_to_string := nil;
  g_quark_try_string := nil;
  g_queue_clear := nil;
  g_queue_copy := nil;
  g_queue_delete_link := nil;
  g_queue_find := nil;
  g_queue_find_custom := nil;
  g_queue_foreach := nil;
  g_queue_free := nil;
  g_queue_free_full := nil;
  g_queue_get_length := nil;
  g_queue_index := nil;
  g_queue_init := nil;
  g_queue_insert_after := nil;
  g_queue_insert_before := nil;
  g_queue_insert_sorted := nil;
  g_queue_is_empty := nil;
  g_queue_link_index := nil;
  g_queue_new := nil;
  g_queue_peek_head := nil;
  g_queue_peek_head_link := nil;
  g_queue_peek_nth := nil;
  g_queue_peek_nth_link := nil;
  g_queue_peek_tail := nil;
  g_queue_peek_tail_link := nil;
  g_queue_pop_head := nil;
  g_queue_pop_head_link := nil;
  g_queue_pop_nth := nil;
  g_queue_pop_nth_link := nil;
  g_queue_pop_tail := nil;
  g_queue_pop_tail_link := nil;
  g_queue_push_head := nil;
  g_queue_push_head_link := nil;
  g_queue_push_nth := nil;
  g_queue_push_nth_link := nil;
  g_queue_push_tail := nil;
  g_queue_push_tail_link := nil;
  g_queue_remove := nil;
  g_queue_remove_all := nil;
  g_queue_reverse := nil;
  g_queue_sort := nil;
  g_queue_unlink := nil;
  g_rand_copy := nil;
  g_rand_double := nil;
  g_rand_double_range := nil;
  g_rand_free := nil;
  g_rand_int := nil;
  g_rand_int_range := nil;
  g_rand_new := nil;
  g_rand_new_with_seed := nil;
  g_rand_new_with_seed_array := nil;
  g_rand_set_seed := nil;
  g_rand_set_seed_array := nil;
  g_random_double := nil;
  g_random_double_range := nil;
  g_random_int := nil;
  g_random_int_range := nil;
  g_random_set_seed := nil;
  g_realloc := nil;
  g_realloc_n := nil;
  g_rec_mutex_clear := nil;
  g_rec_mutex_init := nil;
  g_rec_mutex_lock := nil;
  g_rec_mutex_trylock := nil;
  g_rec_mutex_unlock := nil;
  g_regex_check_replacement := nil;
  g_regex_error_quark := nil;
  g_regex_escape_nul := nil;
  g_regex_escape_string := nil;
  g_regex_get_capture_count := nil;
  g_regex_get_compile_flags := nil;
  g_regex_get_has_cr_or_lf := nil;
  g_regex_get_match_flags := nil;
  g_regex_get_max_backref := nil;
  g_regex_get_pattern := nil;
  g_regex_get_string_number := nil;
  g_regex_get_type := nil;
  g_regex_match := nil;
  g_regex_match_all := nil;
  g_regex_match_all_full := nil;
  g_regex_match_full := nil;
  g_regex_match_simple := nil;
  g_regex_new := nil;
  g_regex_ref := nil;
  g_regex_replace := nil;
  g_regex_replace_eval := nil;
  g_regex_replace_literal := nil;
  g_regex_split := nil;
  g_regex_split_full := nil;
  g_regex_split_simple := nil;
  g_regex_unref := nil;
  g_reload_user_special_dirs_cache := nil;
  g_return_if_fail_warning := nil;
  g_rmdir := nil;
  g_rw_lock_clear := nil;
  g_rw_lock_init := nil;
  g_rw_lock_reader_lock := nil;
  g_rw_lock_reader_trylock := nil;
  g_rw_lock_reader_unlock := nil;
  g_rw_lock_writer_lock := nil;
  g_rw_lock_writer_trylock := nil;
  g_rw_lock_writer_unlock := nil;
  g_scanner_cur_line := nil;
  g_scanner_cur_position := nil;
  g_scanner_cur_token := nil;
  g_scanner_cur_value := nil;
  g_scanner_destroy := nil;
  g_scanner_eof := nil;
  g_scanner_error := nil;
  g_scanner_get_next_token := nil;
  g_scanner_input_file := nil;
  g_scanner_input_text := nil;
  g_scanner_lookup_symbol := nil;
  g_scanner_new := nil;
  g_scanner_peek_next_token := nil;
  g_scanner_scope_add_symbol := nil;
  g_scanner_scope_foreach_symbol := nil;
  g_scanner_scope_lookup_symbol := nil;
  g_scanner_scope_remove_symbol := nil;
  g_scanner_set_scope := nil;
  g_scanner_sync_file_offset := nil;
  g_scanner_unexp_token := nil;
  g_scanner_warn := nil;
  g_sequence_append := nil;
  g_sequence_foreach := nil;
  g_sequence_foreach_range := nil;
  g_sequence_free := nil;
  g_sequence_get := nil;
  g_sequence_get_begin_iter := nil;
  g_sequence_get_end_iter := nil;
  g_sequence_get_iter_at_pos := nil;
  g_sequence_get_length := nil;
  g_sequence_insert_before := nil;
  g_sequence_insert_sorted := nil;
  g_sequence_insert_sorted_iter := nil;
  g_sequence_iter_compare := nil;
  g_sequence_iter_get_position := nil;
  g_sequence_iter_get_sequence := nil;
  g_sequence_iter_is_begin := nil;
  g_sequence_iter_is_end := nil;
  g_sequence_iter_move := nil;
  g_sequence_iter_next := nil;
  g_sequence_iter_prev := nil;
  g_sequence_lookup := nil;
  g_sequence_lookup_iter := nil;
  g_sequence_move := nil;
  g_sequence_move_range := nil;
  g_sequence_new := nil;
  g_sequence_prepend := nil;
  g_sequence_range_get_midpoint := nil;
  g_sequence_remove := nil;
  g_sequence_remove_range := nil;
  g_sequence_search := nil;
  g_sequence_search_iter := nil;
  g_sequence_set := nil;
  g_sequence_sort := nil;
  g_sequence_sort_changed := nil;
  g_sequence_sort_changed_iter := nil;
  g_sequence_sort_iter := nil;
  g_sequence_swap := nil;
  g_set_application_name := nil;
  g_set_error := nil;
  g_set_error_literal := nil;
  g_set_prgname := nil;
  g_set_print_handler := nil;
  g_set_printerr_handler := nil;
  g_setenv := nil;
  g_shell_error_quark := nil;
  g_shell_parse_argv := nil;
  g_shell_quote := nil;
  g_shell_unquote := nil;
  g_slice_alloc := nil;
  g_slice_alloc0 := nil;
  g_slice_copy := nil;
  g_slice_free1 := nil;
  g_slice_free_chain_with_offset := nil;
  g_slice_get_config := nil;
  g_slice_get_config_state := nil;
  g_slice_set_config := nil;
  g_slist_alloc := nil;
  g_slist_append := nil;
  g_slist_concat := nil;
  g_slist_copy := nil;
  g_slist_copy_deep := nil;
  g_slist_delete_link := nil;
  g_slist_find := nil;
  g_slist_find_custom := nil;
  g_slist_foreach := nil;
  g_slist_free := nil;
  g_slist_free_1 := nil;
  g_slist_free_full := nil;
  g_slist_index := nil;
  g_slist_insert := nil;
  g_slist_insert_before := nil;
  g_slist_insert_sorted := nil;
  g_slist_insert_sorted_with_data := nil;
  g_slist_last := nil;
  g_slist_length := nil;
  g_slist_nth := nil;
  g_slist_nth_data := nil;
  g_slist_position := nil;
  g_slist_prepend := nil;
  g_slist_remove := nil;
  g_slist_remove_all := nil;
  g_slist_remove_link := nil;
  g_slist_reverse := nil;
  g_slist_sort := nil;
  g_slist_sort_with_data := nil;
  g_snprintf := nil;
  g_source_add_child_source := nil;
  g_source_add_poll := nil;
  g_source_add_unix_fd := nil;
  g_source_attach := nil;
  g_source_destroy := nil;
  g_source_get_can_recurse := nil;
  g_source_get_context := nil;
  g_source_get_id := nil;
  g_source_get_name := nil;
  g_source_get_priority := nil;
  g_source_get_ready_time := nil;
  g_source_get_time := nil;
  g_source_get_type := nil;
  g_source_is_destroyed := nil;
  g_source_modify_unix_fd := nil;
  g_source_new := nil;
  g_source_query_unix_fd := nil;
  g_source_ref := nil;
  g_source_remove := nil;
  g_source_remove_by_funcs_user_data := nil;
  g_source_remove_by_user_data := nil;
  g_source_remove_child_source := nil;
  g_source_remove_poll := nil;
  g_source_remove_unix_fd := nil;
  g_source_set_callback := nil;
  g_source_set_callback_indirect := nil;
  g_source_set_can_recurse := nil;
  g_source_set_funcs := nil;
  g_source_set_name := nil;
  g_source_set_name_by_id := nil;
  g_source_set_priority := nil;
  g_source_set_ready_time := nil;
  g_source_unref := nil;
  g_spaced_primes_closest := nil;
  g_spawn_async := nil;
  g_spawn_async_with_pipes := nil;
  g_spawn_check_exit_status := nil;
  g_spawn_close_pid := nil;
  g_spawn_command_line_async := nil;
  g_spawn_command_line_sync := nil;
  g_spawn_error_quark := nil;
  g_spawn_exit_error_quark := nil;
  g_spawn_sync := nil;
  g_sprintf := nil;
  g_stpcpy := nil;
  g_str_equal := nil;
  g_str_has_prefix := nil;
  g_str_has_suffix := nil;
  g_str_hash := nil;
  g_strcanon := nil;
  g_strcasecmp := nil;
  g_strchomp := nil;
  g_strchug := nil;
  g_strcmp0 := nil;
  g_strcompress := nil;
  g_strconcat := nil;
  g_strdelimit := nil;
  g_strdown := nil;
  g_strdup := nil;
  g_strdup_printf := nil;
  g_strdup_vprintf := nil;
  g_strdupv := nil;
  g_strerror := nil;
  g_strescape := nil;
  g_strfreev := nil;
  g_string_append := nil;
  g_string_append_c := nil;
  g_string_append_len := nil;
  g_string_append_printf := nil;
  g_string_append_unichar := nil;
  g_string_append_uri_escaped := nil;
  g_string_append_vprintf := nil;
  g_string_ascii_down := nil;
  g_string_ascii_up := nil;
  g_string_assign := nil;
  g_string_chunk_clear := nil;
  g_string_chunk_free := nil;
  g_string_chunk_insert := nil;
  g_string_chunk_insert_const := nil;
  g_string_chunk_insert_len := nil;
  g_string_chunk_new := nil;
  g_string_equal := nil;
  g_string_erase := nil;
  g_string_free := nil;
  g_string_free_to_bytes := nil;
  g_string_hash := nil;
  g_string_insert := nil;
  g_string_insert_c := nil;
  g_string_insert_len := nil;
  g_string_insert_unichar := nil;
  g_string_new := nil;
  g_string_new_len := nil;
  g_string_overwrite := nil;
  g_string_overwrite_len := nil;
  g_string_prepend := nil;
  g_string_prepend_c := nil;
  g_string_prepend_len := nil;
  g_string_prepend_unichar := nil;
  g_string_printf := nil;
  g_string_set_size := nil;
  g_string_sized_new := nil;
  g_string_truncate := nil;
  g_string_vprintf := nil;
  g_strip_context := nil;
  g_strjoin := nil;
  g_strjoinv := nil;
  g_strlcat := nil;
  g_strlcpy := nil;
  g_strncasecmp := nil;
  g_strndup := nil;
  g_strnfill := nil;
  g_strreverse := nil;
  g_strrstr := nil;
  g_strrstr_len := nil;
  g_strsignal := nil;
  g_strsplit := nil;
  g_strsplit_set := nil;
  g_strstr_len := nil;
  g_strtod := nil;
  g_strup := nil;
  g_strv_get_type := nil;
  g_strv_length := nil;
  g_test_add_data_func := nil;
  g_test_add_data_func_full := nil;
  g_test_add_func := nil;
  g_test_add_vtable := nil;
  g_test_assert_expected_messages_internal := nil;
  g_test_bug := nil;
  g_test_bug_base := nil;
  g_test_create_case := nil;
  g_test_create_suite := nil;
  g_test_expect_message := nil;
  g_test_fail := nil;
  g_test_get_root := nil;
  g_test_init := nil;
  g_test_log_buffer_free := nil;
  g_test_log_buffer_new := nil;
  g_test_log_buffer_pop := nil;
  g_test_log_buffer_push := nil;
  g_test_log_msg_free := nil;
  g_test_log_set_fatal_handler := nil;
  g_test_log_type_name := nil;
  g_test_maximized_result := nil;
  g_test_message := nil;
  g_test_minimized_result := nil;
  g_test_queue_destroy := nil;
  g_test_queue_free := nil;
  g_test_rand_double := nil;
  g_test_rand_double_range := nil;
  g_test_rand_int := nil;
  g_test_rand_int_range := nil;
  g_test_run := nil;
  g_test_run_suite := nil;
  g_test_suite_add := nil;
  g_test_suite_add_suite := nil;
  g_test_timer_elapsed := nil;
  g_test_timer_last := nil;
  g_test_timer_start := nil;
  g_test_trap_assertions := nil;
  g_test_trap_fork := nil;
  g_test_trap_has_passed := nil;
  g_test_trap_reached_timeout := nil;
  g_thread_error_quark := nil;
  g_thread_exit := nil;
  g_thread_get_type := nil;
  g_thread_join := nil;
  g_thread_new := nil;
  g_thread_pool_free := nil;
  g_thread_pool_get_max_idle_time := nil;
  g_thread_pool_get_max_threads := nil;
  g_thread_pool_get_max_unused_threads := nil;
  g_thread_pool_get_num_threads := nil;
  g_thread_pool_get_num_unused_threads := nil;
  g_thread_pool_new := nil;
  g_thread_pool_push := nil;
  g_thread_pool_set_max_idle_time := nil;
  g_thread_pool_set_max_threads := nil;
  g_thread_pool_set_max_unused_threads := nil;
  g_thread_pool_set_sort_function := nil;
  g_thread_pool_stop_unused_threads := nil;
  g_thread_pool_unprocessed := nil;
  g_thread_ref := nil;
  g_thread_self := nil;
  g_thread_try_new := nil;
  g_thread_unref := nil;
  g_thread_yield := nil;
  g_time_val_add := nil;
  g_time_val_from_iso8601 := nil;
  g_time_val_to_iso8601 := nil;
  g_time_zone_adjust_time := nil;
  g_time_zone_find_interval := nil;
  g_time_zone_get_abbreviation := nil;
  g_time_zone_get_offset := nil;
  g_time_zone_get_type := nil;
  g_time_zone_is_dst := nil;
  g_time_zone_new := nil;
  g_time_zone_new_local := nil;
  g_time_zone_new_utc := nil;
  g_time_zone_ref := nil;
  g_time_zone_unref := nil;
  g_timeout_add := nil;
  g_timeout_add_full := nil;
  g_timeout_add_seconds := nil;
  g_timeout_add_seconds_full := nil;
  g_timeout_source_new := nil;
  g_timeout_source_new_seconds := nil;
  g_timer_continue := nil;
  g_timer_destroy := nil;
  g_timer_elapsed := nil;
  g_timer_new := nil;
  g_timer_reset := nil;
  g_timer_start := nil;
  g_timer_stop := nil;
  g_trash_stack_height := nil;
  g_trash_stack_peek := nil;
  g_trash_stack_pop := nil;
  g_trash_stack_push := nil;
  g_tree_destroy := nil;
  g_tree_foreach := nil;
  g_tree_height := nil;
  g_tree_insert := nil;
  g_tree_lookup := nil;
  g_tree_lookup_extended := nil;
  g_tree_new := nil;
  g_tree_new_full := nil;
  g_tree_new_with_data := nil;
  g_tree_nnodes := nil;
  g_tree_ref := nil;
  g_tree_remove := nil;
  g_tree_replace := nil;
  g_tree_search := nil;
  g_tree_steal := nil;
  g_tree_unref := nil;
  g_try_malloc := nil;
  g_try_malloc0 := nil;
  g_try_malloc0_n := nil;
  g_try_malloc_n := nil;
  g_try_realloc := nil;
  g_try_realloc_n := nil;
  g_ucs4_to_utf16 := nil;
  g_ucs4_to_utf8 := nil;
  g_unichar_break_type := nil;
  g_unichar_combining_class := nil;
  g_unichar_compose := nil;
  g_unichar_decompose := nil;
  g_unichar_digit_value := nil;
  g_unichar_fully_decompose := nil;
  g_unichar_get_mirror_char := nil;
  g_unichar_get_script := nil;
  g_unichar_isalnum := nil;
  g_unichar_isalpha := nil;
  g_unichar_iscntrl := nil;
  g_unichar_isdefined := nil;
  g_unichar_isdigit := nil;
  g_unichar_isgraph := nil;
  g_unichar_islower := nil;
  g_unichar_ismark := nil;
  g_unichar_isprint := nil;
  g_unichar_ispunct := nil;
  g_unichar_isspace := nil;
  g_unichar_istitle := nil;
  g_unichar_isupper := nil;
  g_unichar_iswide := nil;
  g_unichar_iswide_cjk := nil;
  g_unichar_isxdigit := nil;
  g_unichar_iszerowidth := nil;
  g_unichar_to_utf8 := nil;
  g_unichar_tolower := nil;
  g_unichar_totitle := nil;
  g_unichar_toupper := nil;
  g_unichar_type := nil;
  g_unichar_validate := nil;
  g_unichar_xdigit_value := nil;
  g_unicode_canonical_decomposition := nil;
  g_unicode_canonical_ordering := nil;
  g_unicode_script_from_iso15924 := nil;
  g_unicode_script_to_iso15924 := nil;
  g_unix_error_quark := nil;
  g_unix_fd_add := nil;
  g_unix_fd_add_full := nil;
  g_unix_fd_source_new := nil;
  g_unix_open_pipe := nil;
  g_unix_set_fd_nonblocking := nil;
  g_unix_signal_add := nil;
  g_unix_signal_add_full := nil;
  g_unix_signal_source_new := nil;
  g_unlink := nil;
  g_unsetenv := nil;
  g_uri_escape_string := nil;
  g_uri_list_extract_uris := nil;
  g_uri_parse_scheme := nil;
  g_uri_unescape_segment := nil;
  g_uri_unescape_string := nil;
  g_usleep := nil;
  g_utf16_to_ucs4 := nil;
  g_utf16_to_utf8 := nil;
  g_utf8_casefold := nil;
  g_utf8_collate := nil;
  g_utf8_collate_key := nil;
  g_utf8_collate_key_for_filename := nil;
  g_utf8_find_next_char := nil;
  g_utf8_find_prev_char := nil;
  g_utf8_get_char := nil;
  g_utf8_get_char_validated := nil;
  g_utf8_normalize := nil;
  g_utf8_offset_to_pointer := nil;
  g_utf8_pointer_to_offset := nil;
  g_utf8_prev_char := nil;
  g_utf8_strchr := nil;
  g_utf8_strdown := nil;
  g_utf8_strlen := nil;
  g_utf8_strncpy := nil;
  g_utf8_strrchr := nil;
  g_utf8_strreverse := nil;
  g_utf8_strup := nil;
  g_utf8_substring := nil;
  g_utf8_to_ucs4 := nil;
  g_utf8_to_ucs4_fast := nil;
  g_utf8_to_utf16 := nil;
  g_utf8_validate := nil;
  g_variant_builder_add := nil;
  g_variant_builder_add_parsed := nil;
  g_variant_builder_add_value := nil;
  g_variant_builder_clear := nil;
  g_variant_builder_close := nil;
  g_variant_builder_end := nil;
  g_variant_builder_get_type := nil;
  g_variant_builder_init := nil;
  g_variant_builder_new := nil;
  g_variant_builder_open := nil;
  g_variant_builder_ref := nil;
  g_variant_builder_unref := nil;
  g_variant_byteswap := nil;
  g_variant_check_format_string := nil;
  g_variant_classify := nil;
  g_variant_compare := nil;
  g_variant_dup_bytestring := nil;
  g_variant_dup_bytestring_array := nil;
  g_variant_dup_objv := nil;
  g_variant_dup_string := nil;
  g_variant_dup_strv := nil;
  g_variant_equal := nil;
  g_variant_get := nil;
  g_variant_get_boolean := nil;
  g_variant_get_byte := nil;
  g_variant_get_bytestring := nil;
  g_variant_get_bytestring_array := nil;
  g_variant_get_child := nil;
  g_variant_get_child_value := nil;
  g_variant_get_data := nil;
  g_variant_get_data_as_bytes := nil;
  g_variant_get_double := nil;
  g_variant_get_fixed_array := nil;
  g_variant_get_gtype := nil;
  g_variant_get_handle := nil;
  g_variant_get_int16 := nil;
  g_variant_get_int32 := nil;
  g_variant_get_int64 := nil;
  g_variant_get_maybe := nil;
  g_variant_get_normal_form := nil;
  g_variant_get_objv := nil;
  g_variant_get_size := nil;
  g_variant_get_string := nil;
  g_variant_get_strv := nil;
  g_variant_get_type := nil;
  g_variant_get_type_string := nil;
  g_variant_get_uint16 := nil;
  g_variant_get_uint32 := nil;
  g_variant_get_uint64 := nil;
  g_variant_get_va := nil;
  g_variant_get_variant := nil;
  g_variant_hash := nil;
  g_variant_is_container := nil;
  g_variant_is_floating := nil;
  g_variant_is_normal_form := nil;
  g_variant_is_object_path := nil;
  g_variant_is_of_type := nil;
  g_variant_is_signature := nil;
  g_variant_iter_copy := nil;
  g_variant_iter_free := nil;
  g_variant_iter_init := nil;
  g_variant_iter_loop := nil;
  g_variant_iter_n_children := nil;
  g_variant_iter_new := nil;
  g_variant_iter_next := nil;
  g_variant_iter_next_value := nil;
  g_variant_lookup := nil;
  g_variant_lookup_value := nil;
  g_variant_n_children := nil;
  g_variant_new := nil;
  g_variant_new_array := nil;
  g_variant_new_boolean := nil;
  g_variant_new_byte := nil;
  g_variant_new_bytestring := nil;
  g_variant_new_bytestring_array := nil;
  g_variant_new_dict_entry := nil;
  g_variant_new_double := nil;
  g_variant_new_fixed_array := nil;
  g_variant_new_from_bytes := nil;
  g_variant_new_from_data := nil;
  g_variant_new_handle := nil;
  g_variant_new_int16 := nil;
  g_variant_new_int32 := nil;
  g_variant_new_int64 := nil;
  g_variant_new_maybe := nil;
  g_variant_new_object_path := nil;
  g_variant_new_objv := nil;
  g_variant_new_parsed := nil;
  g_variant_new_parsed_va := nil;
  g_variant_new_signature := nil;
  g_variant_new_string := nil;
  g_variant_new_strv := nil;
  g_variant_new_tuple := nil;
  g_variant_new_uint16 := nil;
  g_variant_new_uint32 := nil;
  g_variant_new_uint64 := nil;
  g_variant_new_va := nil;
  g_variant_new_variant := nil;
  g_variant_parse := nil;
  g_variant_parser_get_error_quark := nil;
  g_variant_print := nil;
  g_variant_print_string := nil;
  g_variant_ref := nil;
  g_variant_ref_sink := nil;
  g_variant_store := nil;
  g_variant_take_ref := nil;
  g_variant_type_checked_ := nil;
  g_variant_type_copy := nil;
  g_variant_type_dup_string := nil;
  g_variant_type_element := nil;
  g_variant_type_equal := nil;
  g_variant_type_first := nil;
  g_variant_type_free := nil;
  g_variant_type_get_gtype := nil;
  g_variant_type_get_string_length := nil;
  g_variant_type_hash := nil;
  g_variant_type_is_array := nil;
  g_variant_type_is_basic := nil;
  g_variant_type_is_container := nil;
  g_variant_type_is_definite := nil;
  g_variant_type_is_dict_entry := nil;
  g_variant_type_is_maybe := nil;
  g_variant_type_is_subtype_of := nil;
  g_variant_type_is_tuple := nil;
  g_variant_type_is_variant := nil;
  g_variant_type_key := nil;
  g_variant_type_n_items := nil;
  g_variant_type_new := nil;
  g_variant_type_new_array := nil;
  g_variant_type_new_dict_entry := nil;
  g_variant_type_new_maybe := nil;
  g_variant_type_new_tuple := nil;
  g_variant_type_next := nil;
  g_variant_type_peek_string := nil;
  g_variant_type_string_is_valid := nil;
  g_variant_type_string_scan := nil;
  g_variant_type_value := nil;
  g_variant_unref := nil;
  g_vasprintf := nil;
  g_vfprintf := nil;
  g_vprintf := nil;
  g_vsnprintf := nil;
  g_vsprintf := nil;
  g_warn_message := nil;
  glib_check_version := nil;
end;

initialization
LoadLibraries;
LoadProcs;

finalization
UnloadLibraries;

end.