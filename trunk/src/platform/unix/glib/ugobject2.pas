{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit uGObject2;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

interface
uses
  CTypes, uGLib2;

const
  PARAM_MASK = 255;
  PARAM_READWRITE = 0;
  PARAM_STATIC_STRINGS = 0;
  PARAM_USER_SHIFT = 8;
  SIGNAL_FLAGS_MASK = 511;
  SIGNAL_MATCH_MASK = 63;
  TYPE_FLAG_RESERVED_ID_BIT = 1;
  TYPE_FUNDAMENTAL_MAX = 255;
  TYPE_FUNDAMENTAL_SHIFT = 2;
  TYPE_RESERVED_BSE_FIRST = 32;
  TYPE_RESERVED_BSE_LAST = 48;
  TYPE_RESERVED_GLIB_FIRST = 22;
  TYPE_RESERVED_GLIB_LAST = 31;
  TYPE_RESERVED_USER_FIRST = 49;
  VALUE_COLLECT_FORMAT_MAX_LENGTH = 8;
  VALUE_NOCOPY_CONTENTS = 134217728;

type
  TGBindingFlags = Integer;
const
  { GBindingFlags }
  G_BINDING_DEFAULT: TGBindingFlags = 0;
  G_BINDING_BIDIRECTIONAL: TGBindingFlags = 1;
  G_BINDING_SYNC_CREATE: TGBindingFlags = 2;
  G_BINDING_INVERT_BOOLEAN: TGBindingFlags = 4;

type
  TGConnectFlags = Integer;
const
  { GConnectFlags }
  G_CONNECT_AFTER: TGConnectFlags = 1;
  G_CONNECT_SWAPPED: TGConnectFlags = 2;

type
  TGParamFlags = Integer;
const
  { GParamFlags }
  G_PARAM_READABLE: TGParamFlags = 1;
  G_PARAM_WRITABLE: TGParamFlags = 2;
  G_PARAM_CONSTRUCT: TGParamFlags = 4;
  G_PARAM_CONSTRUCT_ONLY: TGParamFlags = 8;
  G_PARAM_LAX_VALIDATION: TGParamFlags = 16;
  G_PARAM_STATIC_NAME: TGParamFlags = 32;
  G_PARAM_PRIVATE: TGParamFlags = 32;
  G_PARAM_STATIC_NICK: TGParamFlags = 64;
  G_PARAM_STATIC_BLURB: TGParamFlags = 128;
  G_PARAM_DEPRECATED: TGParamFlags = 2147483648;

type
  TGSignalFlags = Integer;
const
  { GSignalFlags }
  G_SIGNAL_RUN_FIRST: TGSignalFlags = 1;
  G_SIGNAL_RUN_LAST: TGSignalFlags = 2;
  G_SIGNAL_RUN_CLEANUP: TGSignalFlags = 4;
  G_SIGNAL_NO_RECURSE: TGSignalFlags = 8;
  G_SIGNAL_DETAILED: TGSignalFlags = 16;
  G_SIGNAL_ACTION: TGSignalFlags = 32;
  G_SIGNAL_NO_HOOKS: TGSignalFlags = 64;
  G_SIGNAL_MUST_COLLECT: TGSignalFlags = 128;
  G_SIGNAL_DEPRECATED: TGSignalFlags = 256;

type
  TGSignalMatchType = Integer;
const
  { GSignalMatchType }
  G_SIGNAL_MATCH_ID: TGSignalMatchType = 1;
  G_SIGNAL_MATCH_DETAIL: TGSignalMatchType = 2;
  G_SIGNAL_MATCH_CLOSURE: TGSignalMatchType = 4;
  G_SIGNAL_MATCH_FUNC: TGSignalMatchType = 8;
  G_SIGNAL_MATCH_DATA: TGSignalMatchType = 16;
  G_SIGNAL_MATCH_UNBLOCKED: TGSignalMatchType = 32;

type
  TGTypeDebugFlags = Integer;
const
  { GTypeDebugFlags }
  G_TYPE_DEBUG_NONE: TGTypeDebugFlags = 0;
  G_TYPE_DEBUG_OBJECTS: TGTypeDebugFlags = 1;
  G_TYPE_DEBUG_SIGNALS: TGTypeDebugFlags = 2;
  G_TYPE_DEBUG_MASK: TGTypeDebugFlags = 3;

type
  TGTypeFlags = Integer;
const
  { GTypeFlags }
  G_TYPE_FLAG_ABSTRACT: TGTypeFlags = 16;
  G_TYPE_FLAG_VALUE_ABSTRACT: TGTypeFlags = 32;

type
  TGTypeFundamentalFlags = Integer;
const
  { GTypeFundamentalFlags }
  G_TYPE_FLAG_CLASSED: TGTypeFundamentalFlags = 1;
  G_TYPE_FLAG_INSTANTIATABLE: TGTypeFundamentalFlags = 2;
  G_TYPE_FLAG_DERIVABLE: TGTypeFundamentalFlags = 4;
  G_TYPE_FLAG_DEEP_DERIVABLE: TGTypeFundamentalFlags = 8;
type

  PPGClosure = ^PGClosure;
  PGClosure = ^TGClosure;

  PPPGValue = ^PPGValue;
  PPGValue = ^PGValue;
  PGValue = ^TGValue;
  TGClosureMarshal = procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;

  PPGSignalCMarshaller = ^PGSignalCMarshaller;
  PGSignalCMarshaller = ^TGSignalCMarshaller;
  TGSignalCMarshaller = TGClosureMarshal;
  TGVaClosureMarshal = procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;

  PPGSignalCVaMarshaller = ^PGSignalCVaMarshaller;
  PGSignalCVaMarshaller = ^TGSignalCVaMarshaller;
  TGSignalCVaMarshaller = TGVaClosureMarshal;

  PPGType = ^PGType;
  PGType = ^TGType;
  TGType = gsize;
  TGBaseFinalizeFunc = procedure(g_class: gpointer); cdecl;
  TGBaseInitFunc = procedure(g_class: gpointer); cdecl;

  PPGBindingFlags = ^PGBindingFlags;
  PGBindingFlags = ^TGBindingFlags;

  PPGBinding = ^PGBinding;
  PGBinding = ^TGBinding;

  PPGObject = ^PGObject;
  PGObject = ^TGObject;

  PPGParameter = ^PGParameter;
  PGParameter = ^TGParameter;

  PPGParamSpec = ^PGParamSpec;
  PGParamSpec = ^TGParamSpec;

  PPGToggleNotify = ^PGToggleNotify;
  PGToggleNotify = ^TGToggleNotify;
  TGToggleNotify = procedure(data: gpointer; object_: PGObject; is_last_ref: gboolean); cdecl;

  PPGBindingTransformFunc = ^PGBindingTransformFunc;
  PGBindingTransformFunc = ^TGBindingTransformFunc;
  TGBindingTransformFunc = function(binding: PGBinding; source_value: PGValue; target_value: PGValue; user_data: gpointer): gboolean; cdecl;

  PPGWeakNotify = ^PGWeakNotify;
  PGWeakNotify = ^TGWeakNotify;
  TGWeakNotify = procedure(data: gpointer; where_the_object_was: PGObject); cdecl;

  PPGTypeInstance = ^PGTypeInstance;
  PGTypeInstance = ^TGTypeInstance;

  PPGTypeClass = ^PGTypeClass;
  PGTypeClass = ^TGTypeClass;
  TGTypeInstance = object
    g_class: PGTypeClass;
  end;
  TGObject = object
    g_type_instance: TGTypeInstance;
    ref_count: guint;
    qdata: PGData;
  end;
  TGBinding = object(TGObject)
  end;

  PPGValueTransform = ^PGValueTransform;
  PGValueTransform = ^TGValueTransform;
  TGValueTransform = procedure(src_value: PGValue; dest_value: PGValue); cdecl;

  PP_Value__data__union = ^P_Value__data__union;
  P_Value__data__union = ^T_Value__data__union;
  T_Value__data__union = record
    case longint of
      0 : (v_int: gint);
      1 : (v_uint: guint);
      2 : (v_long: glong);
      3 : (v_ulong: gulong);
      4 : (v_int64: gint64);
      5 : (v_uint64: guint64);
      6 : (v_float: gfloat);
      7 : (v_double: gdouble);
      8 : (v_pointer: gpointer);
  end;


  TGValue = object
    g_type: TGType;
    data: array [0..1] of T_Value__data__union;
  end;
  TGBoxedCopyFunc = function(boxed: gpointer): gpointer; cdecl;
  TGBoxedFreeFunc = procedure(boxed: gpointer); cdecl;

  PPGClosureNotify = ^PGClosureNotify;
  PGClosureNotify = ^TGClosureNotify;
  TGClosureNotify = procedure(data: gpointer; closure: PGClosure); cdecl;

  PPGClosureMarshal = ^PGClosureMarshal;
  PGClosureMarshal = ^TGClosureMarshal;
  TGClosureBitfield0 = bitpacked record
    ref_count: guint15 { changed from guint to accomodate 15 bitsize requirement };
    meta_marshal_nouse: guint1 { changed from guint to accomodate 1 bitsize requirement };
    n_guards: guint1 { changed from guint to accomodate 1 bitsize requirement };
    n_fnotifiers: guint2 { changed from guint to accomodate 2 bitsize requirement };
    n_inotifiers: guint8 { changed from guint to accomodate 8 bitsize requirement };
    in_inotify: guint1 { changed from guint to accomodate 1 bitsize requirement };
    floating: guint1 { changed from guint to accomodate 1 bitsize requirement };
    derivative_flag: guint1 { changed from guint to accomodate 1 bitsize requirement };
    in_marshal: guint1 { changed from guint to accomodate 1 bitsize requirement };
    is_invalid: guint1 { changed from guint to accomodate 1 bitsize requirement };
  end;


  PPGClosureNotifyData = ^PGClosureNotifyData;
  PGClosureNotifyData = ^TGClosureNotifyData;
  TGClosure = object
    Bitfield0 : TGClosureBitfield0; { auto generated type }
    marshal: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
    data: gpointer;
    notifiers: PGClosureNotifyData;
  end;
  TGCallback = procedure; cdecl;

  PPGCClosure = ^PGCClosure;
  PGCClosure = ^TGCClosure;

  PPGCallback = ^PGCallback;
  PGCallback = ^TGCallback;
  TGCClosure = object
    closure: TGClosure;
    callback: gpointer;
  end;
  TGClassFinalizeFunc = procedure(g_class: gpointer; class_data: gpointer); cdecl;
  TGClassInitFunc = procedure(g_class: gpointer; class_data: gpointer); cdecl;

  TGClosureNotifyData = record
    data: gpointer;
    notify: TGClosureNotify;
  end;



  PPGConnectFlags = ^PGConnectFlags;
  PGConnectFlags = ^TGConnectFlags;
  TGTypeClass = object
    g_type: TGType;
  end;

  PPGEnumValue = ^PGEnumValue;
  PGEnumValue = ^TGEnumValue;

  TGEnumValue = record
    value: gint;
    value_name: Pgchar;
    value_nick: Pgchar;
  end;



  PPGEnumClass = ^PGEnumClass;
  PGEnumClass = ^TGEnumClass;

  TGEnumClass = record
    g_type_class: TGTypeClass;
    minimum: gint;
    maximum: gint;
    n_values: guint;
    values: PGEnumValue;
  end;



  PPGFlagsValue = ^PGFlagsValue;
  PGFlagsValue = ^TGFlagsValue;

  TGFlagsValue = record
    value: guint;
    value_name: Pgchar;
    value_nick: Pgchar;
  end;



  PPGFlagsClass = ^PGFlagsClass;
  PGFlagsClass = ^TGFlagsClass;

  TGFlagsClass = record
    g_type_class: TGTypeClass;
    mask: guint;
    n_values: guint;
    values: PGFlagsValue;
  end;



  PPGInitiallyUnowned = ^PGInitiallyUnowned;
  PGInitiallyUnowned = ^TGInitiallyUnowned;
  TGInitiallyUnowned = object(TGObject)
  end;

  PPGObjectConstructParam = ^PGObjectConstructParam;
  PGObjectConstructParam = ^TGObjectConstructParam;

  TGObjectConstructParam = record
    pspec: PGParamSpec;
    value: PGValue;
  end;



  PPGParamFlags = ^PGParamFlags;
  PGParamFlags = ^TGParamFlags;
  TGParamSpec = object
    g_type_instance: TGTypeInstance;
    name: Pgchar;
    flags: TGParamFlags;
    value_type: TGType;
    owner_type: TGType;
    _nick: Pgchar;
    _blurb: Pgchar;
    qdata: PGData;
    ref_count: guint;
    param_id: guint;
  end;

  PPGInitiallyUnownedClass = ^PGInitiallyUnownedClass;
  PGInitiallyUnownedClass = ^TGInitiallyUnownedClass;
  TGInitiallyUnownedClass = object
    g_type_class: TGTypeClass;
    construct_properties: PGSList;
    constructor_: function(type_: TGType; n_construct_properties: guint; construct_properties: PGObjectConstructParam): PGObject; cdecl;
    set_property: procedure(object_: PGObject; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
    get_property: procedure(object_: PGObject; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
    dispose: procedure(object_: PGObject); cdecl;
    finalize: procedure(object_: PGObject); cdecl;
    dispatch_properties_changed: procedure(object_: PGObject; n_pspecs: guint; pspecs: PPGParamSpec); cdecl;
    notify: procedure(object_: PGObject; pspec: PGParamSpec); cdecl;
    constructed: procedure(object_: PGObject); cdecl;
    flags: gsize;
    pdummy: array [0..5] of gpointer;
  end;
  TGInstanceInitFunc = procedure(instance: PGTypeInstance; g_class: gpointer); cdecl;
  TGInterfaceFinalizeFunc = procedure(g_iface: gpointer; iface_data: gpointer); cdecl;
  TGInterfaceInitFunc = procedure(g_iface: gpointer; iface_data: gpointer); cdecl;

  PPGInterfaceInfo = ^PGInterfaceInfo;
  PGInterfaceInfo = ^TGInterfaceInfo;

  PPGInterfaceInitFunc = ^PGInterfaceInitFunc;
  PGInterfaceInitFunc = ^TGInterfaceInitFunc;

  PPGInterfaceFinalizeFunc = ^PGInterfaceFinalizeFunc;
  PGInterfaceFinalizeFunc = ^TGInterfaceFinalizeFunc;

  TGInterfaceInfo = record
    interface_init: TGInterfaceInitFunc;
    interface_finalize: TGInterfaceFinalizeFunc;
    interface_data: gpointer;
  end;



  TGParameter = record
    name: Pgchar;
    value: TGValue;
  end;



  PPGObjectClass = ^PGObjectClass;
  PGObjectClass = ^TGObjectClass;
  TGObjectClass = object
    g_type_class: TGTypeClass;
    construct_properties: PGSList;
    constructor_: function(type_: TGType; n_construct_properties: guint; construct_properties: PGObjectConstructParam): PGObject; cdecl;
    set_property: procedure(object_: PGObject; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
    get_property: procedure(object_: PGObject; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
    dispose: procedure(object_: PGObject); cdecl;
    finalize: procedure(object_: PGObject); cdecl;
    dispatch_properties_changed: procedure(object_: PGObject; n_pspecs: guint; pspecs: PPGParamSpec); cdecl;
    notify: procedure(object_: PGObject; pspec: PGParamSpec); cdecl;
    constructed: procedure(object_: PGObject); cdecl;
    flags: gsize;
    pdummy: array [0..5] of gpointer;
  end;
  TGObjectFinalizeFunc = procedure(object_: PGObject); cdecl;
  TGObjectGetPropertyFunc = procedure(object_: PGObject; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
  TGObjectSetPropertyFunc = procedure(object_: PGObject; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;

  PPGParamSpecBoolean = ^PGParamSpecBoolean;
  PGParamSpecBoolean = ^TGParamSpecBoolean;
  TGParamSpecBoolean = object(TGParamSpec)
    default_value: gboolean;
  end;

  PPGParamSpecBoxed = ^PGParamSpecBoxed;
  PGParamSpecBoxed = ^TGParamSpecBoxed;
  TGParamSpecBoxed = object(TGParamSpec)
  end;

  PPGParamSpecChar = ^PGParamSpecChar;
  PGParamSpecChar = ^TGParamSpecChar;
  TGParamSpecChar = object(TGParamSpec)
    minimum: gint8;
    maximum: gint8;
    default_value: gint8;
  end;

  PPGParamSpecClass = ^PGParamSpecClass;
  PGParamSpecClass = ^TGParamSpecClass;
  TGParamSpecClass = object
    g_type_class: TGTypeClass;
    value_type: TGType;
    finalize: procedure(pspec: PGParamSpec); cdecl;
    value_set_default: procedure(pspec: PGParamSpec; value: PGValue); cdecl;
    value_validate: function(pspec: PGParamSpec; value: PGValue): gboolean; cdecl;
    values_cmp: function(pspec: PGParamSpec; value1: PGValue; value2: PGValue): gint; cdecl;
    dummy: array [0..3] of gpointer;
  end;

  PPGParamSpecDouble = ^PGParamSpecDouble;
  PGParamSpecDouble = ^TGParamSpecDouble;
  TGParamSpecDouble = object(TGParamSpec)
    minimum: gdouble;
    maximum: gdouble;
    default_value: gdouble;
    epsilon: gdouble;
  end;

  PPGParamSpecEnum = ^PGParamSpecEnum;
  PGParamSpecEnum = ^TGParamSpecEnum;
  TGParamSpecEnum = object(TGParamSpec)
    enum_class: PGEnumClass;
    default_value: gint;
  end;

  PPGParamSpecFlags = ^PGParamSpecFlags;
  PGParamSpecFlags = ^TGParamSpecFlags;
  TGParamSpecFlags = object(TGParamSpec)
    flags_class: PGFlagsClass;
    default_value: guint;
  end;

  PPGParamSpecFloat = ^PGParamSpecFloat;
  PGParamSpecFloat = ^TGParamSpecFloat;
  TGParamSpecFloat = object(TGParamSpec)
    minimum: gfloat;
    maximum: gfloat;
    default_value: gfloat;
    epsilon: gfloat;
  end;

  PPGParamSpecGType = ^PGParamSpecGType;
  PGParamSpecGType = ^TGParamSpecGType;
  TGParamSpecGType = object(TGParamSpec)
    is_a_type: TGType;
  end;

  PPGParamSpecInt = ^PGParamSpecInt;
  PGParamSpecInt = ^TGParamSpecInt;
  TGParamSpecInt = object(TGParamSpec)
    minimum: gint;
    maximum: gint;
    default_value: gint;
  end;

  PPGParamSpecInt64 = ^PGParamSpecInt64;
  PGParamSpecInt64 = ^TGParamSpecInt64;
  TGParamSpecInt64 = object(TGParamSpec)
    minimum: gint64;
    maximum: gint64;
    default_value: gint64;
  end;

  PPGParamSpecLong = ^PGParamSpecLong;
  PGParamSpecLong = ^TGParamSpecLong;
  TGParamSpecLong = object(TGParamSpec)
    minimum: glong;
    maximum: glong;
    default_value: glong;
  end;

  PPGParamSpecObject = ^PGParamSpecObject;
  PGParamSpecObject = ^TGParamSpecObject;
  TGParamSpecObject = object(TGParamSpec)
  end;

  PPGParamSpecOverride = ^PGParamSpecOverride;
  PGParamSpecOverride = ^TGParamSpecOverride;
  TGParamSpecOverride = object(TGParamSpec)
    overridden: PGParamSpec;
  end;

  PPGParamSpecParam = ^PGParamSpecParam;
  PGParamSpecParam = ^TGParamSpecParam;
  TGParamSpecParam = object(TGParamSpec)
  end;

  PPGParamSpecPointer = ^PGParamSpecPointer;
  PGParamSpecPointer = ^TGParamSpecPointer;
  TGParamSpecPointer = object(TGParamSpec)
  end;

  PPGParamSpecPool = ^PGParamSpecPool;
  PGParamSpecPool = ^TGParamSpecPool;
  TGParamSpecPool = object
  end;

  PPGParamSpecString = ^PGParamSpecString;
  PGParamSpecString = ^TGParamSpecString;
  TGParamSpecStringBitfield0 = bitpacked record
    null_fold_if_empty: guint1 { changed from guint to accomodate 1 bitsize requirement };
    ensure_non_null: guint1 { changed from guint to accomodate 1 bitsize requirement };
  end;

  TGParamSpecString = object(TGParamSpec)
    default_value: Pgchar;
    cset_first: Pgchar;
    cset_nth: Pgchar;
    substitutor: gchar;
    Bitfield0 : TGParamSpecStringBitfield0; { auto generated type }
  end;

  PPGParamSpecTypeInfo = ^PGParamSpecTypeInfo;
  PGParamSpecTypeInfo = ^TGParamSpecTypeInfo;

  TGParamSpecTypeInfo = record
    instance_size: guint16;
    n_preallocs: guint16;
    instance_init: procedure(pspec: PGParamSpec); cdecl;
    value_type: TGType;
    finalize: procedure(pspec: PGParamSpec); cdecl;
    value_set_default: procedure(pspec: PGParamSpec; value: PGValue); cdecl;
    value_validate: function(pspec: PGParamSpec; value: PGValue): gboolean; cdecl;
    values_cmp: function(pspec: PGParamSpec; value1: PGValue; value2: PGValue): gint; cdecl;
  end;



  PPGParamSpecUChar = ^PGParamSpecUChar;
  PGParamSpecUChar = ^TGParamSpecUChar;
  TGParamSpecUChar = object(TGParamSpec)
    minimum: guint8;
    maximum: guint8;
    default_value: guint8;
  end;

  PPGParamSpecUInt = ^PGParamSpecUInt;
  PGParamSpecUInt = ^TGParamSpecUInt;
  TGParamSpecUInt = object(TGParamSpec)
    minimum: guint;
    maximum: guint;
    default_value: guint;
  end;

  PPGParamSpecUInt64 = ^PGParamSpecUInt64;
  PGParamSpecUInt64 = ^TGParamSpecUInt64;
  TGParamSpecUInt64 = object(TGParamSpec)
    minimum: guint64;
    maximum: guint64;
    default_value: guint64;
  end;

  PPGParamSpecULong = ^PGParamSpecULong;
  PGParamSpecULong = ^TGParamSpecULong;
  TGParamSpecULong = object(TGParamSpec)
    minimum: gulong;
    maximum: gulong;
    default_value: gulong;
  end;

  PPGParamSpecUnichar = ^PGParamSpecUnichar;
  PGParamSpecUnichar = ^TGParamSpecUnichar;
  TGParamSpecUnichar = object(TGParamSpec)
    default_value: gunichar;
  end;

  PPGParamSpecValueArray = ^PGParamSpecValueArray;
  PGParamSpecValueArray = ^TGParamSpecValueArray;
  TGParamSpecValueArray = object(TGParamSpec)
    element_spec: PGParamSpec;
    fixed_n_elements: guint;
  end;

  PPGParamSpecVariant = ^PGParamSpecVariant;
  PGParamSpecVariant = ^TGParamSpecVariant;
  TGParamSpecVariant = object(TGParamSpec)
    type_: PGVariantType;
    default_value: PGVariant;
    padding: array [0..3] of gpointer;
  end;

  PPGSignalInvocationHint = ^PGSignalInvocationHint;
  PGSignalInvocationHint = ^TGSignalInvocationHint;

  PPGSignalFlags = ^PGSignalFlags;
  PGSignalFlags = ^TGSignalFlags;

  TGSignalInvocationHint = record
    signal_id: guint;
    detail: TGQuark;
    run_type: TGSignalFlags;
  end;


  TGSignalAccumulator = function(ihint: PGSignalInvocationHint; return_accu: PGValue; handler_return: PGValue; data: gpointer): gboolean; cdecl;
  TGSignalEmissionHook = function(ihint: PGSignalInvocationHint; n_param_values: guint; param_values: PGValue; data: gpointer): gboolean; cdecl;

  PPGSignalMatchType = ^PGSignalMatchType;
  PGSignalMatchType = ^TGSignalMatchType;

  PPGSignalQuery = ^PGSignalQuery;
  PGSignalQuery = ^TGSignalQuery;

  TGSignalQuery = record
    signal_id: guint;
    signal_name: Pgchar;
    itype: TGType;
    signal_flags: TGSignalFlags;
    return_type: TGType;
    n_params: guint;
    param_types: PGType;
  end;


  TGTypeCValue = record
    case longint of
      0 : (v_int: gint);
      1 : (v_long: glong);
      2 : (v_int64: gint64);
      3 : (v_double: gdouble);
      4 : (v_pointer: gpointer);
  end;


  TGTypeClassCacheFunc = function(cache_data: gpointer; g_class: PGTypeClass): gboolean; cdecl;

  PPGTypeDebugFlags = ^PGTypeDebugFlags;
  PGTypeDebugFlags = ^TGTypeDebugFlags;

  PPGTypeFlags = ^PGTypeFlags;
  PGTypeFlags = ^TGTypeFlags;

  PPGTypeFundamentalFlags = ^PGTypeFundamentalFlags;
  PGTypeFundamentalFlags = ^TGTypeFundamentalFlags;

  PPGTypeFundamentalInfo = ^PGTypeFundamentalInfo;
  PGTypeFundamentalInfo = ^TGTypeFundamentalInfo;

  TGTypeFundamentalInfo = record
    type_flags: TGTypeFundamentalFlags;
  end;



  PPGTypeValueTable = ^PGTypeValueTable;
  PGTypeValueTable = ^TGTypeValueTable;

  PPGTypeCValue = ^PGTypeCValue;
  PGTypeCValue = ^TGTypeCValue;
  TGTypeValueTable = object
    value_init: procedure(value: PGValue); cdecl;
    value_free: procedure(value: PGValue); cdecl;
    value_copy: procedure(src_value: PGValue; dest_value: PGValue); cdecl;
    value_peek_pointer: function(value: PGValue): gpointer; cdecl;
    collect_format: Pgchar;
    collect_value: function(value: PGValue; n_collect_values: guint; collect_values: PGTypeCValue; collect_flags: guint): Pgchar; cdecl;
    lcopy_format: Pgchar;
    lcopy_value: function(value: PGValue; n_collect_values: guint; collect_values: PGTypeCValue; collect_flags: guint): Pgchar; cdecl;
  end;

  PPGTypeInfo = ^PGTypeInfo;
  PGTypeInfo = ^TGTypeInfo;

  PPGBaseInitFunc = ^PGBaseInitFunc;
  PGBaseInitFunc = ^TGBaseInitFunc;

  PPGBaseFinalizeFunc = ^PGBaseFinalizeFunc;
  PGBaseFinalizeFunc = ^TGBaseFinalizeFunc;

  PPGClassInitFunc = ^PGClassInitFunc;
  PGClassInitFunc = ^TGClassInitFunc;

  PPGClassFinalizeFunc = ^PGClassFinalizeFunc;
  PGClassFinalizeFunc = ^TGClassFinalizeFunc;

  PPGInstanceInitFunc = ^PGInstanceInitFunc;
  PGInstanceInitFunc = ^TGInstanceInitFunc;

  TGTypeInfo = record
    class_size: guint16;
    base_init: TGBaseInitFunc;
    base_finalize: TGBaseFinalizeFunc;
    class_init: TGClassInitFunc;
    class_finalize: TGClassFinalizeFunc;
    class_data: Pgpointer;
    instance_size: guint16;
    n_preallocs: guint16;
    instance_init: TGInstanceInitFunc;
    value_table: PGTypeValueTable;
  end;



  PPGTypeInterface = ^PGTypeInterface;
  PGTypeInterface = ^TGTypeInterface;

  PPGTypePlugin = ^PGTypePlugin;
  PGTypePlugin = ^TGTypePlugin;
  TGTypeInterface = object
    g_type: TGType;
    g_instance_type: TGType;
  end;
  TGTypePlugin = object
  end;
  TGTypeInterfaceCheckFunc = procedure(check_data: gpointer; g_iface: gpointer); cdecl;

  PPGTypeModule = ^PGTypeModule;
  PGTypeModule = ^TGTypeModule;
  TGTypeModule = object(TGObject)
    use_count: guint;
    type_infos: PGSList;
    interface_infos: PGSList;
    name: Pgchar;
  end;

  PPGTypeModuleClass = ^PGTypeModuleClass;
  PGTypeModuleClass = ^TGTypeModuleClass;
  TGTypeModuleClass = object
    parent_class: TGObjectClass;
    load: function(module: PGTypeModule): gboolean; cdecl;
    unload: procedure(module: PGTypeModule); cdecl;
    reserved1: procedure; cdecl;
    reserved2: procedure; cdecl;
    reserved3: procedure; cdecl;
    reserved4: procedure; cdecl;
  end;
  TGTypePluginUse = procedure(plugin: PGTypePlugin); cdecl;
  TGTypePluginUnuse = procedure(plugin: PGTypePlugin); cdecl;
  TGTypePluginCompleteTypeInfo = procedure(plugin: PGTypePlugin; g_type: TGType; info: PGTypeInfo; value_table: PGTypeValueTable); cdecl;
  TGTypePluginCompleteInterfaceInfo = procedure(plugin: PGTypePlugin; instance_type: TGType; interface_type: TGType; info: PGInterfaceInfo); cdecl;

  PPGTypePluginClass = ^PGTypePluginClass;
  PGTypePluginClass = ^TGTypePluginClass;

  PPGTypePluginUse = ^PGTypePluginUse;
  PGTypePluginUse = ^TGTypePluginUse;

  PPGTypePluginUnuse = ^PGTypePluginUnuse;
  PGTypePluginUnuse = ^TGTypePluginUnuse;

  PPGTypePluginCompleteTypeInfo = ^PGTypePluginCompleteTypeInfo;
  PGTypePluginCompleteTypeInfo = ^TGTypePluginCompleteTypeInfo;

  PPGTypePluginCompleteInterfaceInfo = ^PGTypePluginCompleteInterfaceInfo;
  PGTypePluginCompleteInterfaceInfo = ^TGTypePluginCompleteInterfaceInfo;

  TGTypePluginClass = record
    base_iface: TGTypeInterface;
    use_plugin: TGTypePluginUse;
    unuse_plugin: TGTypePluginUnuse;
    complete_type_info: TGTypePluginCompleteTypeInfo;
    complete_interface_info: TGTypePluginCompleteInterfaceInfo;
  end;



  PPGTypeQuery = ^PGTypeQuery;
  PGTypeQuery = ^TGTypeQuery;

  TGTypeQuery = record
    type_: TGType;
    type_name: Pgchar;
    class_size: guint;
    instance_size: guint;
  end;



  PPGValueArray = ^PGValueArray;
  PGValueArray = ^TGValueArray;
  TGValueArray = object
    n_values: guint;
    values: PGValue;
    n_prealloced: guint;
  end;

  PPGWeakRef = ^PGWeakRef;
  PGWeakRef = ^TGWeakRef;
  TGWeakRef_union_priv = record
    case longint of
      0 : (p: gpointer);
  end;


  TGWeakRef = object
    priv: TGWeakRef_union_priv; //union extracted from object and named 'TGWeakRef_union_priv'
  end;

var
g_binding_get_flags: function(binding: PGBinding): TGBindingFlags; cdecl;
g_binding_get_source: function(binding: PGBinding): PGObject; cdecl;
g_binding_get_source_property: function(binding: PGBinding): Pgchar; cdecl;
g_binding_get_target: function(binding: PGBinding): PGObject; cdecl;
g_binding_get_target_property: function(binding: PGBinding): Pgchar; cdecl;
g_binding_get_type: function:TGType; cdecl;
g_boxed_copy: function(boxed_type: TGType; src_boxed: Pgpointer): gpointer; cdecl;
g_boxed_free: procedure(boxed_type: TGType; boxed: gpointer); cdecl;
g_boxed_type_register_static: function(name: Pgchar; boxed_copy: TGBoxedCopyFunc; boxed_free: TGBoxedFreeFunc): TGType; cdecl;
g_cclosure_marshal_BOOLEAN__BOXED_BOXED: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_BOOLEAN__FLAGS: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_BOOLEAN__FLAGSv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_generic: procedure(closure: PGClosure; return_gvalue: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_generic_va: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args_list: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_STRING__OBJECT_POINTER: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_STRING__OBJECT_POINTERv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__BOOLEAN: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__BOOLEANv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__BOXED: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__BOXEDv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__CHAR: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__CHARv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__DOUBLE: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__DOUBLEv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__ENUM: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__ENUMv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__FLAGS: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__FLAGSv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__FLOAT: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__FLOATv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__INT: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__INTv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__LONG: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__LONGv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__OBJECT: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__OBJECTv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__PARAM: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__PARAMv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__POINTER: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__POINTERv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__STRING: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__STRINGv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__UCHAR: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__UCHARv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__UINT: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__UINT_POINTER: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__UINT_POINTERv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__UINTv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__ULONG: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__ULONGv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__VARIANT: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__VARIANTv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_marshal_VOID__VOID: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer; marshal_data: gpointer); cdecl;
g_cclosure_marshal_VOID__VOIDv: procedure(closure: PGClosure; return_value: PGValue; instance: gpointer; args: Tva_list; marshal_data: gpointer; n_params: gint; param_types: PGType); cdecl;
g_cclosure_new: function(callback_func: TGCallback; user_data: gpointer; destroy_data: TGClosureNotify): PGClosure; cdecl;
g_cclosure_new_object: function(callback_func: TGCallback; object_: PGObject): PGClosure; cdecl;
g_cclosure_new_object_swap: function(callback_func: TGCallback; object_: PGObject): PGClosure; cdecl;
g_cclosure_new_swap: function(callback_func: TGCallback; user_data: gpointer; destroy_data: TGClosureNotify): PGClosure; cdecl;
g_clear_object: procedure(object_ptr: PPGObject); cdecl;
g_closure_add_finalize_notifier: procedure(closure: PGClosure; notify_data: gpointer; notify_func: TGClosureNotify); cdecl;
g_closure_add_invalidate_notifier: procedure(closure: PGClosure; notify_data: gpointer; notify_func: TGClosureNotify); cdecl;
g_closure_add_marshal_guards: procedure(closure: PGClosure; pre_marshal_data: gpointer; pre_marshal_notify: TGClosureNotify; post_marshal_data: gpointer; post_marshal_notify: TGClosureNotify); cdecl;
g_closure_get_type: function:TGType; cdecl;
g_closure_invalidate: procedure(closure: PGClosure); cdecl;
g_closure_invoke: procedure(closure: PGClosure; return_value: PGValue; n_param_values: guint; param_values: PGValue; invocation_hint: gpointer); cdecl;
g_closure_new_object: function(sizeof_closure: guint; object_: PGObject): PGClosure; cdecl;
g_closure_new_simple: function(sizeof_closure: guint; data: gpointer): PGClosure; cdecl;
g_closure_ref: function(closure: PGClosure): PGClosure; cdecl;
g_closure_remove_finalize_notifier: procedure(closure: PGClosure; notify_data: gpointer; notify_func: TGClosureNotify); cdecl;
g_closure_remove_invalidate_notifier: procedure(closure: PGClosure; notify_data: gpointer; notify_func: TGClosureNotify); cdecl;
g_closure_set_marshal: procedure(closure: PGClosure; marshal: TGClosureMarshal); cdecl;
g_closure_set_meta_marshal: procedure(closure: PGClosure; marshal_data: gpointer; meta_marshal: TGClosureMarshal); cdecl;
g_closure_sink: procedure(closure: PGClosure); cdecl;
g_closure_unref: procedure(closure: PGClosure); cdecl;
g_enum_complete_type_info: procedure(g_enum_type: TGType; info: PGTypeInfo; const_values: PGEnumValue); cdecl;
g_enum_get_value: function(enum_class: PGEnumClass; value: gint): PGEnumValue; cdecl;
g_enum_get_value_by_name: function(enum_class: PGEnumClass; name: Pgchar): PGEnumValue; cdecl;
g_enum_get_value_by_nick: function(enum_class: PGEnumClass; nick: Pgchar): PGEnumValue; cdecl;
g_enum_register_static: function(name: Pgchar; const_static_values: PGEnumValue): TGType; cdecl;
g_flags_complete_type_info: procedure(g_flags_type: TGType; info: PGTypeInfo; const_values: PGFlagsValue); cdecl;
g_flags_get_first_value: function(flags_class: PGFlagsClass; value: guint): PGFlagsValue; cdecl;
g_flags_get_value_by_name: function(flags_class: PGFlagsClass; name: Pgchar): PGFlagsValue; cdecl;
g_flags_get_value_by_nick: function(flags_class: PGFlagsClass; nick: Pgchar): PGFlagsValue; cdecl;
g_flags_register_static: function(name: Pgchar; const_static_values: PGFlagsValue): TGType; cdecl;
g_gtype_get_type: function: TGType; cdecl;
g_initially_unowned_get_type: function:TGType; cdecl;
g_object_add_toggle_ref: procedure(object_: PGObject; notify: TGToggleNotify; data: gpointer); cdecl;
g_object_add_weak_pointer: procedure(object_: PGObject; weak_pointer_location: Pgpointer); cdecl;
g_object_bind_property: function(source: PGObject; source_property: Pgchar; target: PGObject; target_property: Pgchar; flags: TGBindingFlags): PGBinding; cdecl;
g_object_bind_property_full: function(source: PGObject; source_property: Pgchar; target: PGObject; target_property: Pgchar; flags: TGBindingFlags; transform_to: TGBindingTransformFunc; transform_from: TGBindingTransformFunc; user_data: gpointer; notify: TGDestroyNotify): PGBinding; cdecl;
g_object_bind_property_with_closures: function(source: PGObject; source_property: Pgchar; target: PGObject; target_property: Pgchar; flags: TGBindingFlags; transform_to: PGClosure; transform_from: PGClosure): PGBinding; cdecl;
g_object_class_find_property: function(oclass: PGObjectClass; property_name: Pgchar): PGParamSpec; cdecl;
g_object_class_install_properties: procedure(oclass: PGObjectClass; n_pspecs: guint; pspecs: PPGParamSpec); cdecl;
g_object_class_install_property: procedure(oclass: PGObjectClass; property_id: guint; pspec: PGParamSpec); cdecl;
g_object_class_list_properties: function(oclass: PGObjectClass; n_properties: Pguint): PPGParamSpec; cdecl;
g_object_class_override_property: procedure(oclass: PGObjectClass; property_id: guint; name: Pgchar); cdecl;
g_object_compat_control: function(what: gsize; data: gpointer): gsize; cdecl;
g_object_connect: function(object_: gpointer; signal_spec: Pgchar; args: array of const): gpointer; cdecl;
g_object_disconnect: procedure(object_: gpointer; signal_spec: Pgchar; args: array of const); cdecl;
g_object_dup_data: function(object_: PGObject; key: Pgchar; dup_func: TGDuplicateFunc; user_data: gpointer): gpointer; cdecl;
g_object_dup_qdata: function(object_: PGObject; quark: TGQuark; dup_func: TGDuplicateFunc; user_data: gpointer): gpointer; cdecl;
g_object_force_floating: procedure(object_: PGObject); cdecl;
g_object_freeze_notify: procedure(object_: PGObject); cdecl;
g_object_get: procedure(object_: gpointer; first_property_name: Pgchar; args: array of const); cdecl;
g_object_get_data: function(object_: PGObject; key: Pgchar): gpointer; cdecl;
g_object_get_property: procedure(object_: PGObject; property_name: Pgchar; value: PGValue); cdecl;
g_object_get_qdata: function(object_: PGObject; quark: TGQuark): gpointer; cdecl;
g_object_get_type: function:TGType; cdecl;
g_object_get_valist: procedure(object_: PGObject; first_property_name: Pgchar; var_args: Tva_list); cdecl;
g_object_interface_find_property: function(g_iface: gpointer; property_name: Pgchar): PGParamSpec; cdecl;
g_object_interface_install_property: procedure(g_iface: gpointer; pspec: PGParamSpec); cdecl;
g_object_interface_list_properties: function(g_iface: gpointer; n_properties_p: Pguint): PPGParamSpec; cdecl;
g_object_is_floating: function(object_: PGObject): gboolean; cdecl;
g_object_new: function(object_type: TGType; first_property_name: Pgchar; args: array of const): gpointer; cdecl;
g_object_new_valist: function(object_type: TGType; first_property_name: Pgchar; var_args: Tva_list): PGObject; cdecl;
g_object_newv: function(object_type: TGType; n_parameters: guint; parameters: PGParameter): PGObject; cdecl;
g_object_notify: procedure(object_: PGObject; property_name: Pgchar); cdecl;
g_object_notify_by_pspec: procedure(object_: PGObject; pspec: PGParamSpec); cdecl;
g_object_ref: function(object_: PGObject): PGObject; cdecl;
g_object_ref_sink: function(object_: PGObject): PGObject; cdecl;
g_object_remove_toggle_ref: procedure(object_: PGObject; notify: TGToggleNotify; data: gpointer); cdecl;
g_object_remove_weak_pointer: procedure(object_: PGObject; weak_pointer_location: Pgpointer); cdecl;
g_object_replace_data: function(object_: PGObject; key: Pgchar; oldval: gpointer; newval: gpointer; destroy_: TGDestroyNotify; old_destroy: PGDestroyNotify): gboolean; cdecl;
g_object_replace_qdata: function(object_: PGObject; quark: TGQuark; oldval: gpointer; newval: gpointer; destroy_: TGDestroyNotify; old_destroy: PGDestroyNotify): gboolean; cdecl;
g_object_run_dispose: procedure(object_: PGObject); cdecl;
g_object_set: procedure(object_: gpointer; first_property_name: Pgchar; args: array of const); cdecl;
g_object_set_data: procedure(object_: PGObject; key: Pgchar; data: gpointer); cdecl;
g_object_set_data_full: procedure(object_: PGObject; key: Pgchar; data: gpointer; destroy_: TGDestroyNotify); cdecl;
g_object_set_property: procedure(object_: PGObject; property_name: Pgchar; value: PGValue); cdecl;
g_object_set_qdata: procedure(object_: PGObject; quark: TGQuark; data: gpointer); cdecl;
g_object_set_qdata_full: procedure(object_: PGObject; quark: TGQuark; data: gpointer; destroy_: TGDestroyNotify); cdecl;
g_object_set_valist: procedure(object_: PGObject; first_property_name: Pgchar; var_args: Tva_list); cdecl;
g_object_steal_data: function(object_: PGObject; key: Pgchar): gpointer; cdecl;
g_object_steal_qdata: function(object_: PGObject; quark: TGQuark): gpointer; cdecl;
g_object_thaw_notify: procedure(object_: PGObject); cdecl;
g_object_unref: procedure(object_: PGObject); cdecl;
g_object_watch_closure: procedure(object_: PGObject; closure: PGClosure); cdecl;
g_object_weak_ref: procedure(object_: PGObject; notify: TGWeakNotify; data: gpointer); cdecl;
g_object_weak_unref: procedure(object_: PGObject; notify: TGWeakNotify; data: gpointer); cdecl;
g_param_spec_boolean: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; default_value: gboolean; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_boxed: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; boxed_type: TGType; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_char: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; minimum: gint8; maximum: gint8; default_value: gint8; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_double: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; minimum: gdouble; maximum: gdouble; default_value: gdouble; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_enum: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; enum_type: TGType; default_value: gint; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_flags: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; flags_type: TGType; default_value: guint; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_float: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; minimum: gfloat; maximum: gfloat; default_value: gfloat; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_get_blurb: function(pspec: PGParamSpec): Pgchar; cdecl;
g_param_spec_get_name: function(pspec: PGParamSpec): Pgchar; cdecl;
g_param_spec_get_nick: function(pspec: PGParamSpec): Pgchar; cdecl;
g_param_spec_get_qdata: function(pspec: PGParamSpec; quark: TGQuark): gpointer; cdecl;
g_param_spec_get_redirect_target: function(pspec: PGParamSpec): PGParamSpec; cdecl;
g_param_spec_gtype: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; is_a_type: TGType; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_int64: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; minimum: gint64; maximum: gint64; default_value: gint64; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_int: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; minimum: gint; maximum: gint; default_value: gint; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_internal: function(param_type: TGType; name: Pgchar; nick: Pgchar; blurb: Pgchar; flags: TGParamFlags): gpointer; cdecl;
g_param_spec_long: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; minimum: glong; maximum: glong; default_value: glong; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_object: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; object_type: TGType; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_override: function(name: Pgchar; overridden: PGParamSpec): PGParamSpec; cdecl;
g_param_spec_param: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; param_type: TGType; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_pointer: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_pool_insert: procedure(pool: PGParamSpecPool; pspec: PGParamSpec; owner_type: TGType); cdecl;
g_param_spec_pool_list: function(pool: PGParamSpecPool; owner_type: TGType; n_pspecs_p: Pguint): PPGParamSpec; cdecl;
g_param_spec_pool_list_owned: function(pool: PGParamSpecPool; owner_type: TGType): PGList; cdecl;
g_param_spec_pool_lookup: function(pool: PGParamSpecPool; param_name: Pgchar; owner_type: TGType; walk_ancestors: gboolean): PGParamSpec; cdecl;
g_param_spec_pool_new: function(type_prefixing: gboolean): PGParamSpecPool; cdecl;
g_param_spec_pool_remove: procedure(pool: PGParamSpecPool; pspec: PGParamSpec); cdecl;
g_param_spec_ref: function(pspec: PGParamSpec): PGParamSpec; cdecl;
g_param_spec_ref_sink: function(pspec: PGParamSpec): PGParamSpec; cdecl;
g_param_spec_set_qdata: procedure(pspec: PGParamSpec; quark: TGQuark; data: gpointer); cdecl;
g_param_spec_set_qdata_full: procedure(pspec: PGParamSpec; quark: TGQuark; data: gpointer; destroy_: TGDestroyNotify); cdecl;
g_param_spec_sink: procedure(pspec: PGParamSpec); cdecl;
g_param_spec_steal_qdata: function(pspec: PGParamSpec; quark: TGQuark): gpointer; cdecl;
g_param_spec_string: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; default_value: Pgchar; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_uchar: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; minimum: guint8; maximum: guint8; default_value: guint8; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_uint64: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; minimum: guint64; maximum: guint64; default_value: guint64; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_uint: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; minimum: guint; maximum: guint; default_value: guint; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_ulong: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; minimum: gulong; maximum: gulong; default_value: gulong; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_unichar: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; default_value: gunichar; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_unref: procedure(pspec: PGParamSpec); cdecl;
g_param_spec_value_array: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; element_spec: PGParamSpec; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_spec_variant: function(name: Pgchar; nick: Pgchar; blurb: Pgchar; type_: PGVariantType; default_value: PGVariant; flags: TGParamFlags): PGParamSpec; cdecl;
g_param_type_register_static: function(name: Pgchar; pspec_info: PGParamSpecTypeInfo): TGType; cdecl;
g_param_value_convert: function(pspec: PGParamSpec; src_value: PGValue; dest_value: PGValue; strict_validation: gboolean): gboolean; cdecl;
g_param_value_defaults: function(pspec: PGParamSpec; value: PGValue): gboolean; cdecl;
g_param_value_set_default: procedure(pspec: PGParamSpec; value: PGValue); cdecl;
g_param_value_validate: function(pspec: PGParamSpec; value: PGValue): gboolean; cdecl;
g_param_values_cmp: function(pspec: PGParamSpec; value1: PGValue; value2: PGValue): gint; cdecl;
g_pointer_type_register_static: function(name: Pgchar): TGType; cdecl;
g_signal_accumulator_first_wins: function(ihint: PGSignalInvocationHint; return_accu: PGValue; handler_return: PGValue; dummy: gpointer): gboolean; cdecl;
g_signal_accumulator_true_handled: function(ihint: PGSignalInvocationHint; return_accu: PGValue; handler_return: PGValue; dummy: gpointer): gboolean; cdecl;
g_signal_add_emission_hook: function(signal_id: guint; detail: TGQuark; hook_func: TGSignalEmissionHook; hook_data: gpointer; data_destroy: TGDestroyNotify): gulong; cdecl;
g_signal_chain_from_overridden: procedure(instance_and_params: PGValue; return_value: PGValue); cdecl;
g_signal_chain_from_overridden_handler: procedure(instance: gpointer; args: array of const); cdecl;
g_signal_connect_closure: function(instance: gpointer; detailed_signal: Pgchar; closure: PGClosure; after: gboolean): gulong; cdecl;
g_signal_connect_closure_by_id: function(instance: gpointer; signal_id: guint; detail: TGQuark; closure: PGClosure; after: gboolean): gulong; cdecl;
g_signal_connect_data: function(instance: gpointer; detailed_signal: Pgchar; c_handler: TGCallback; data: gpointer; destroy_data: TGClosureNotify; connect_flags: TGConnectFlags): gulong; cdecl;
g_signal_connect_object: function(instance: gpointer; detailed_signal: Pgchar; c_handler: TGCallback; gobject: gpointer; connect_flags: TGConnectFlags): gulong; cdecl;
g_signal_emit: procedure(instance: gpointer; signal_id: guint; detail: TGQuark; args: array of const); cdecl;
g_signal_emit_by_name: procedure(instance: gpointer; detailed_signal: Pgchar; args: array of const); cdecl;
g_signal_emit_valist: procedure(instance: gpointer; signal_id: guint; detail: TGQuark; var_args: Tva_list); cdecl;
g_signal_emitv: procedure(instance_and_params: PGValue; signal_id: guint; detail: TGQuark; return_value: PGValue); cdecl;
g_signal_get_invocation_hint: function(instance: gpointer): PGSignalInvocationHint; cdecl;
g_signal_handler_block: procedure(instance: gpointer; handler_id: gulong); cdecl;
g_signal_handler_disconnect: procedure(instance: gpointer; handler_id: gulong); cdecl;
g_signal_handler_find: function(instance: gpointer; mask: TGSignalMatchType; signal_id: guint; detail: TGQuark; closure: PGClosure; func: gpointer; data: gpointer): gulong; cdecl;
g_signal_handler_is_connected: function(instance: gpointer; handler_id: gulong): gboolean; cdecl;
g_signal_handler_unblock: procedure(instance: gpointer; handler_id: gulong); cdecl;
g_signal_handlers_block_matched: function(instance: gpointer; mask: TGSignalMatchType; signal_id: guint; detail: TGQuark; closure: PGClosure; func: gpointer; data: gpointer): guint; cdecl;
g_signal_handlers_destroy: procedure(instance: gpointer); cdecl;
g_signal_handlers_disconnect_matched: function(instance: gpointer; mask: TGSignalMatchType; signal_id: guint; detail: TGQuark; closure: PGClosure; func: gpointer; data: gpointer): guint; cdecl;
g_signal_handlers_unblock_matched: function(instance: gpointer; mask: TGSignalMatchType; signal_id: guint; detail: TGQuark; closure: PGClosure; func: gpointer; data: gpointer): guint; cdecl;
g_signal_has_handler_pending: function(instance: gpointer; signal_id: guint; detail: TGQuark; may_be_blocked: gboolean): gboolean; cdecl;
g_signal_list_ids: function(itype: TGType; n_ids: Pguint): Pguint; cdecl;
g_signal_lookup: function(name: Pgchar; itype: TGType): guint; cdecl;
g_signal_name: function(signal_id: guint): Pgchar; cdecl;
g_signal_new: function(signal_name: Pgchar; itype: TGType; signal_flags: TGSignalFlags; class_offset: guint; accumulator: TGSignalAccumulator; accu_data: gpointer; c_marshaller: TGSignalCMarshaller; return_type: TGType; n_params: guint; args: array of const): guint; cdecl;
g_signal_new_class_handler: function(signal_name: Pgchar; itype: TGType; signal_flags: TGSignalFlags; class_handler: TGCallback; accumulator: TGSignalAccumulator; accu_data: gpointer; c_marshaller: TGSignalCMarshaller; return_type: TGType; n_params: guint; args: array of const): guint; cdecl;
g_signal_new_valist: function(signal_name: Pgchar; itype: TGType; signal_flags: TGSignalFlags; class_closure: PGClosure; accumulator: TGSignalAccumulator; accu_data: gpointer; c_marshaller: TGSignalCMarshaller; return_type: TGType; n_params: guint; args: Tva_list): guint; cdecl;
g_signal_newv: function(signal_name: Pgchar; itype: TGType; signal_flags: TGSignalFlags; class_closure: PGClosure; accumulator: TGSignalAccumulator; accu_data: gpointer; c_marshaller: TGSignalCMarshaller; return_type: TGType; n_params: guint; param_types: PGType): guint; cdecl;
g_signal_override_class_closure: procedure(signal_id: guint; instance_type: TGType; class_closure: PGClosure); cdecl;
g_signal_override_class_handler: procedure(signal_name: Pgchar; instance_type: TGType; class_handler: TGCallback); cdecl;
g_signal_parse_name: function(detailed_signal: Pgchar; itype: TGType; signal_id_p: Pguint; detail_p: PGQuark; force_detail_quark: gboolean): gboolean; cdecl;
g_signal_query: procedure(signal_id: guint; query: PGSignalQuery); cdecl;
g_signal_remove_emission_hook: procedure(signal_id: guint; hook_id: gulong); cdecl;
g_signal_set_va_marshaller: procedure(signal_id: guint; instance_type: TGType; va_marshaller: TGSignalCVaMarshaller); cdecl;
g_signal_stop_emission: procedure(instance: gpointer; signal_id: guint; detail: TGQuark); cdecl;
g_signal_stop_emission_by_name: procedure(instance: gpointer; detailed_signal: Pgchar); cdecl;
g_signal_type_cclosure_new: function(itype: TGType; struct_offset: guint): PGClosure; cdecl;
g_source_set_closure: procedure(source: PGSource; closure: PGClosure); cdecl;
g_source_set_dummy_callback: procedure(source: PGSource); cdecl;
g_strdup_value_contents: function(value: PGValue): Pgchar; cdecl;
g_type_add_class_cache_func: procedure(cache_data: gpointer; cache_func: TGTypeClassCacheFunc); cdecl;
g_type_add_class_private: procedure(class_type: TGType; private_size: gsize); cdecl;
g_type_add_interface_check: procedure(check_data: gpointer; check_func: TGTypeInterfaceCheckFunc); cdecl;
g_type_add_interface_dynamic: procedure(instance_type: TGType; interface_type: TGType; plugin: PGTypePlugin); cdecl;
g_type_add_interface_static: procedure(instance_type: TGType; interface_type: TGType; info: PGInterfaceInfo); cdecl;
g_type_check_class_cast: function(g_class: PGTypeClass; is_a_type: TGType): PGTypeClass; cdecl;
g_type_check_class_is_a: function(g_class: PGTypeClass; is_a_type: TGType): gboolean; cdecl;
g_type_check_instance: function(instance: PGTypeInstance): gboolean; cdecl;
g_type_check_instance_cast: function(instance: PGTypeInstance; iface_type: TGType): PGTypeInstance; cdecl;
g_type_check_instance_is_a: function(instance: PGTypeInstance; iface_type: TGType): gboolean; cdecl;
g_type_check_is_value_type: function(type_: TGType): gboolean; cdecl;
g_type_check_value: function(value: PGValue): gboolean; cdecl;
g_type_check_value_holds: function(value: PGValue; type_: TGType): gboolean; cdecl;
g_type_children: function(type_: TGType; n_children: Pguint): PGType; cdecl;
g_type_class_add_private: procedure(g_class: gpointer; private_size: gsize); cdecl;
g_type_class_get_private: function(klass: PGTypeClass; private_type: TGType): gpointer; cdecl;
g_type_class_peek: function(type_: TGType): PGTypeClass; cdecl;
g_type_class_peek_parent: function(g_class: PGTypeClass): PGTypeClass; cdecl;
g_type_class_peek_static: function(type_: TGType): PGTypeClass; cdecl;
g_type_class_ref: function(type_: TGType): PGTypeClass; cdecl;
g_type_class_unref: procedure(g_class: PGTypeClass); cdecl;
g_type_class_unref_uncached: procedure(g_class: PGTypeClass); cdecl;
g_type_create_instance: function(type_: TGType): PGTypeInstance; cdecl;
g_type_default_interface_peek: function(g_type: TGType): PGTypeInterface; cdecl;
g_type_default_interface_ref: function(g_type: TGType): PGTypeInterface; cdecl;
g_type_default_interface_unref: procedure(g_iface: PGTypeInterface); cdecl;
g_type_depth: function(type_: TGType): guint; cdecl;
g_type_ensure: procedure(type_: TGType); cdecl;
g_type_free_instance: procedure(instance: PGTypeInstance); cdecl;
g_type_from_name: function(name: Pgchar): TGType; cdecl;
g_type_fundamental: function(type_id: TGType): TGType; cdecl;
g_type_fundamental_next: function: TGType; cdecl;
g_type_get_plugin: function(type_: TGType): PGTypePlugin; cdecl;
g_type_get_qdata: function(type_: TGType; quark: TGQuark): gpointer; cdecl;
g_type_get_type_registration_serial: function: guint; cdecl;
g_type_init: procedure; cdecl;
g_type_init_with_debug_flags: procedure(debug_flags: TGTypeDebugFlags); cdecl;
g_type_instance_get_private: function(instance: PGTypeInstance; private_type: TGType): gpointer; cdecl;
g_type_interface_add_prerequisite: procedure(interface_type: TGType; prerequisite_type: TGType); cdecl;
g_type_interface_get_plugin: function(instance_type: TGType; interface_type: TGType): PGTypePlugin; cdecl;
g_type_interface_peek: function(instance_class: PGTypeClass; iface_type: TGType): PGTypeInterface; cdecl;
g_type_interface_peek_parent: function(g_iface: PGTypeInterface): PGTypeInterface; cdecl;
g_type_interface_prerequisites: function(interface_type: TGType; n_prerequisites: Pguint): PGType; cdecl;
g_type_interfaces: function(type_: TGType; n_interfaces: Pguint): PGType; cdecl;
g_type_is_a: function(type_: TGType; is_a_type: TGType): gboolean; cdecl;
g_type_module_add_interface: procedure(module: PGTypeModule; instance_type: TGType; interface_type: TGType; interface_info: PGInterfaceInfo); cdecl;
g_type_module_get_type: function:TGType; cdecl;
g_type_module_register_enum: function(module: PGTypeModule; name: Pgchar; const_static_values: PGEnumValue): TGType; cdecl;
g_type_module_register_flags: function(module: PGTypeModule; name: Pgchar; const_static_values: PGFlagsValue): TGType; cdecl;
g_type_module_register_type: function(module: PGTypeModule; parent_type: TGType; type_name: Pgchar; type_info: PGTypeInfo; flags: TGTypeFlags): TGType; cdecl;
g_type_module_set_name: procedure(module: PGTypeModule; name: Pgchar); cdecl;
g_type_module_unuse: procedure(module: PGTypeModule); cdecl;
g_type_module_use: function(module: PGTypeModule): gboolean; cdecl;
g_type_name: function(type_: TGType): Pgchar; cdecl;
g_type_name_from_class: function(g_class: PGTypeClass): Pgchar; cdecl;
g_type_name_from_instance: function(instance: PGTypeInstance): Pgchar; cdecl;
g_type_next_base: function(leaf_type: TGType; root_type: TGType): TGType; cdecl;
g_type_parent: function(type_: TGType): TGType; cdecl;
g_type_plugin_complete_interface_info: procedure(plugin: PGTypePlugin; instance_type: TGType; interface_type: TGType; info: PGInterfaceInfo); cdecl;
g_type_plugin_complete_type_info: procedure(plugin: PGTypePlugin; g_type: TGType; info: PGTypeInfo; value_table: PGTypeValueTable); cdecl;
g_type_plugin_get_type: function:TGType; cdecl;
g_type_plugin_unuse: procedure(plugin: PGTypePlugin); cdecl;
g_type_plugin_use: procedure(plugin: PGTypePlugin); cdecl;
g_type_qname: function(type_: TGType): TGQuark; cdecl;
g_type_query: procedure(type_: TGType; query: PGTypeQuery); cdecl;
g_type_register_dynamic: function(parent_type: TGType; type_name: Pgchar; plugin: PGTypePlugin; flags: TGTypeFlags): TGType; cdecl;
g_type_register_fundamental: function(type_id: TGType; type_name: Pgchar; info: PGTypeInfo; finfo: PGTypeFundamentalInfo; flags: TGTypeFlags): TGType; cdecl;
g_type_register_static: function(parent_type: TGType; type_name: Pgchar; info: PGTypeInfo; flags: TGTypeFlags): TGType; cdecl;
g_type_register_static_simple: function(parent_type: TGType; type_name: Pgchar; class_size: guint; class_init: TGClassInitFunc; instance_size: guint; instance_init: TGInstanceInitFunc; flags: TGTypeFlags): TGType; cdecl;
g_type_remove_class_cache_func: procedure(cache_data: gpointer; cache_func: TGTypeClassCacheFunc); cdecl;
g_type_remove_interface_check: procedure(check_data: gpointer; check_func: TGTypeInterfaceCheckFunc); cdecl;
g_type_set_qdata: procedure(type_: TGType; quark: TGQuark; data: gpointer); cdecl;
g_type_test_flags: function(type_: TGType; flags: guint): gboolean; cdecl;
g_type_value_table_peek: function(type_: TGType): PGTypeValueTable; cdecl;
g_value_array_get_type: function:TGType; cdecl;
g_value_copy: procedure(src_value: PGValue; dest_value: PGValue); cdecl;
g_value_dup_boxed: function(value: PGValue): gpointer; cdecl;
g_value_dup_object: function(value: PGValue): PGObject; cdecl;
g_value_dup_param: function(value: PGValue): PGParamSpec; cdecl;
g_value_dup_string: function(value: PGValue): Pgchar; cdecl;
g_value_dup_variant: function(value: PGValue): PGVariant; cdecl;
g_value_fits_pointer: function(value: PGValue): gboolean; cdecl;
g_value_get_boolean: function(value: PGValue): gboolean; cdecl;
g_value_get_boxed: function(value: PGValue): gpointer; cdecl;
g_value_get_double: function(value: PGValue): gdouble; cdecl;
g_value_get_enum: function(value: PGValue): gint; cdecl;
g_value_get_flags: function(value: PGValue): guint; cdecl;
g_value_get_float: function(value: PGValue): gfloat; cdecl;
g_value_get_gtype: function(value: PGValue): TGType; cdecl;
g_value_get_int64: function(value: PGValue): gint64; cdecl;
g_value_get_int: function(value: PGValue): gint; cdecl;
g_value_get_long: function(value: PGValue): glong; cdecl;
g_value_get_object: function(value: PGValue): PGObject; cdecl;
g_value_get_param: function(value: PGValue): PGParamSpec; cdecl;
g_value_get_pointer: function(value: PGValue): gpointer; cdecl;
g_value_get_schar: function(value: PGValue): gint8; cdecl;
g_value_get_string: function(value: PGValue): Pgchar; cdecl;
g_value_get_type: function:TGType; cdecl;
g_value_get_uchar: function(value: PGValue): guint8; cdecl;
g_value_get_uint64: function(value: PGValue): guint64; cdecl;
g_value_get_uint: function(value: PGValue): guint; cdecl;
g_value_get_ulong: function(value: PGValue): gulong; cdecl;
g_value_get_variant: function(value: PGValue): PGVariant; cdecl;
g_value_init: function(value: PGValue; g_type: TGType): PGValue; cdecl;
g_value_peek_pointer: function(value: PGValue): gpointer; cdecl;
g_value_register_transform_func: procedure(src_type: TGType; dest_type: TGType; transform_func: TGValueTransform); cdecl;
g_value_reset: function(value: PGValue): PGValue; cdecl;
g_value_set_boolean: procedure(value: PGValue; v_boolean: gboolean); cdecl;
g_value_set_boxed: procedure(value: PGValue; v_boxed: Pgpointer); cdecl;
g_value_set_double: procedure(value: PGValue; v_double: gdouble); cdecl;
g_value_set_enum: procedure(value: PGValue; v_enum: gint); cdecl;
g_value_set_flags: procedure(value: PGValue; v_flags: guint); cdecl;
g_value_set_float: procedure(value: PGValue; v_float: gfloat); cdecl;
g_value_set_gtype: procedure(value: PGValue; v_gtype: TGType); cdecl;
g_value_set_instance: procedure(value: PGValue; instance: gpointer); cdecl;
g_value_set_int64: procedure(value: PGValue; v_int64: gint64); cdecl;
g_value_set_int: procedure(value: PGValue; v_int: gint); cdecl;
g_value_set_long: procedure(value: PGValue; v_long: glong); cdecl;
g_value_set_object: procedure(value: PGValue; v_object: PGObject); cdecl;
g_value_set_param: procedure(value: PGValue; param: PGParamSpec); cdecl;
g_value_set_pointer: procedure(value: PGValue; v_pointer: gpointer); cdecl;
g_value_set_schar: procedure(value: PGValue; v_char: gint8); cdecl;
g_value_set_static_boxed: procedure(value: PGValue; v_boxed: Pgpointer); cdecl;
g_value_set_static_string: procedure(value: PGValue; v_string: Pgchar); cdecl;
g_value_set_string: procedure(value: PGValue; v_string: Pgchar); cdecl;
g_value_set_uchar: procedure(value: PGValue; v_uchar: guint8); cdecl;
g_value_set_uint64: procedure(value: PGValue; v_uint64: guint64); cdecl;
g_value_set_uint: procedure(value: PGValue; v_uint: guint); cdecl;
g_value_set_ulong: procedure(value: PGValue; v_ulong: gulong); cdecl;
g_value_set_variant: procedure(value: PGValue; variant: PGVariant); cdecl;
g_value_take_boxed: procedure(value: PGValue; v_boxed: Pgpointer); cdecl;
g_value_take_object: procedure(value: PGValue; v_object: gpointer); cdecl;
g_value_take_param: procedure(value: PGValue; param: PGParamSpec); cdecl;
g_value_take_string: procedure(value: PGValue; v_string: Pgchar); cdecl;
g_value_take_variant: procedure(value: PGValue; variant: PGVariant); cdecl;
g_value_transform: function(src_value: PGValue; dest_value: PGValue): gboolean; cdecl;
g_value_type_compatible: function(src_type: TGType; dest_type: TGType): gboolean; cdecl;
g_value_type_transformable: function(src_type: TGType; dest_type: TGType): gboolean; cdecl;
g_value_unset: procedure(value: PGValue); cdecl;
g_weak_ref_clear: procedure(weak_ref: PGWeakRef); cdecl;
g_weak_ref_get: function(weak_ref: PGWeakRef): PGObject; cdecl;
g_weak_ref_init: procedure(weak_ref: PGWeakRef; object_: gpointer); cdecl;
g_weak_ref_set: procedure(weak_ref: PGWeakRef; object_: gpointer); cdecl;
implementation
uses
  DynLibs;


var
  libgobject_2_0_so_0: TLibHandle;
procedure LoadLibraries;
begin
  libgobject_2_0_so_0 := SafeLoadLibrary('libgobject-2.0.so.0');
end;

procedure LoadProcs;
  procedure LoadProc(var AProc: Pointer; AName: String);
  var
    ProcPtr: Pointer;
  begin
    ProcPtr := GetProcedureAddress(libgobject_2_0_so_0, AName);
    AProc := ProcPtr;
  end;
begin
  LoadProc(Pointer(g_binding_get_flags), 'g_binding_get_flags');
  LoadProc(Pointer(g_binding_get_source), 'g_binding_get_source');
  LoadProc(Pointer(g_binding_get_source_property), 'g_binding_get_source_property');
  LoadProc(Pointer(g_binding_get_target), 'g_binding_get_target');
  LoadProc(Pointer(g_binding_get_target_property), 'g_binding_get_target_property');
  LoadProc(Pointer(g_binding_get_type), 'g_binding_get_type');
  LoadProc(Pointer(g_boxed_copy), 'g_boxed_copy');
  LoadProc(Pointer(g_boxed_free), 'g_boxed_free');
  LoadProc(Pointer(g_boxed_type_register_static), 'g_boxed_type_register_static');
  LoadProc(Pointer(g_cclosure_marshal_BOOLEAN__BOXED_BOXED), 'g_cclosure_marshal_BOOLEAN__BOXED_BOXED');
  LoadProc(Pointer(g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv), 'g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv');
  LoadProc(Pointer(g_cclosure_marshal_BOOLEAN__FLAGS), 'g_cclosure_marshal_BOOLEAN__FLAGS');
  LoadProc(Pointer(g_cclosure_marshal_BOOLEAN__FLAGSv), 'g_cclosure_marshal_BOOLEAN__FLAGSv');
  LoadProc(Pointer(g_cclosure_marshal_generic), 'g_cclosure_marshal_generic');
  LoadProc(Pointer(g_cclosure_marshal_generic_va), 'g_cclosure_marshal_generic_va');
  LoadProc(Pointer(g_cclosure_marshal_STRING__OBJECT_POINTER), 'g_cclosure_marshal_STRING__OBJECT_POINTER');
  LoadProc(Pointer(g_cclosure_marshal_STRING__OBJECT_POINTERv), 'g_cclosure_marshal_STRING__OBJECT_POINTERv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__BOOLEAN), 'g_cclosure_marshal_VOID__BOOLEAN');
  LoadProc(Pointer(g_cclosure_marshal_VOID__BOOLEANv), 'g_cclosure_marshal_VOID__BOOLEANv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__BOXED), 'g_cclosure_marshal_VOID__BOXED');
  LoadProc(Pointer(g_cclosure_marshal_VOID__BOXEDv), 'g_cclosure_marshal_VOID__BOXEDv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__CHAR), 'g_cclosure_marshal_VOID__CHAR');
  LoadProc(Pointer(g_cclosure_marshal_VOID__CHARv), 'g_cclosure_marshal_VOID__CHARv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__DOUBLE), 'g_cclosure_marshal_VOID__DOUBLE');
  LoadProc(Pointer(g_cclosure_marshal_VOID__DOUBLEv), 'g_cclosure_marshal_VOID__DOUBLEv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__ENUM), 'g_cclosure_marshal_VOID__ENUM');
  LoadProc(Pointer(g_cclosure_marshal_VOID__ENUMv), 'g_cclosure_marshal_VOID__ENUMv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__FLAGS), 'g_cclosure_marshal_VOID__FLAGS');
  LoadProc(Pointer(g_cclosure_marshal_VOID__FLAGSv), 'g_cclosure_marshal_VOID__FLAGSv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__FLOAT), 'g_cclosure_marshal_VOID__FLOAT');
  LoadProc(Pointer(g_cclosure_marshal_VOID__FLOATv), 'g_cclosure_marshal_VOID__FLOATv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__INT), 'g_cclosure_marshal_VOID__INT');
  LoadProc(Pointer(g_cclosure_marshal_VOID__INTv), 'g_cclosure_marshal_VOID__INTv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__LONG), 'g_cclosure_marshal_VOID__LONG');
  LoadProc(Pointer(g_cclosure_marshal_VOID__LONGv), 'g_cclosure_marshal_VOID__LONGv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__OBJECT), 'g_cclosure_marshal_VOID__OBJECT');
  LoadProc(Pointer(g_cclosure_marshal_VOID__OBJECTv), 'g_cclosure_marshal_VOID__OBJECTv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__PARAM), 'g_cclosure_marshal_VOID__PARAM');
  LoadProc(Pointer(g_cclosure_marshal_VOID__PARAMv), 'g_cclosure_marshal_VOID__PARAMv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__POINTER), 'g_cclosure_marshal_VOID__POINTER');
  LoadProc(Pointer(g_cclosure_marshal_VOID__POINTERv), 'g_cclosure_marshal_VOID__POINTERv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__STRING), 'g_cclosure_marshal_VOID__STRING');
  LoadProc(Pointer(g_cclosure_marshal_VOID__STRINGv), 'g_cclosure_marshal_VOID__STRINGv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__UCHAR), 'g_cclosure_marshal_VOID__UCHAR');
  LoadProc(Pointer(g_cclosure_marshal_VOID__UCHARv), 'g_cclosure_marshal_VOID__UCHARv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__UINT), 'g_cclosure_marshal_VOID__UINT');
  LoadProc(Pointer(g_cclosure_marshal_VOID__UINT_POINTER), 'g_cclosure_marshal_VOID__UINT_POINTER');
  LoadProc(Pointer(g_cclosure_marshal_VOID__UINT_POINTERv), 'g_cclosure_marshal_VOID__UINT_POINTERv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__UINTv), 'g_cclosure_marshal_VOID__UINTv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__ULONG), 'g_cclosure_marshal_VOID__ULONG');
  LoadProc(Pointer(g_cclosure_marshal_VOID__ULONGv), 'g_cclosure_marshal_VOID__ULONGv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__VARIANT), 'g_cclosure_marshal_VOID__VARIANT');
  LoadProc(Pointer(g_cclosure_marshal_VOID__VARIANTv), 'g_cclosure_marshal_VOID__VARIANTv');
  LoadProc(Pointer(g_cclosure_marshal_VOID__VOID), 'g_cclosure_marshal_VOID__VOID');
  LoadProc(Pointer(g_cclosure_marshal_VOID__VOIDv), 'g_cclosure_marshal_VOID__VOIDv');
  LoadProc(Pointer(g_cclosure_new), 'g_cclosure_new');
  LoadProc(Pointer(g_cclosure_new_object), 'g_cclosure_new_object');
  LoadProc(Pointer(g_cclosure_new_object_swap), 'g_cclosure_new_object_swap');
  LoadProc(Pointer(g_cclosure_new_swap), 'g_cclosure_new_swap');
  LoadProc(Pointer(g_clear_object), 'g_clear_object');
  LoadProc(Pointer(g_closure_add_finalize_notifier), 'g_closure_add_finalize_notifier');
  LoadProc(Pointer(g_closure_add_invalidate_notifier), 'g_closure_add_invalidate_notifier');
  LoadProc(Pointer(g_closure_add_marshal_guards), 'g_closure_add_marshal_guards');
  LoadProc(Pointer(g_closure_get_type), 'g_closure_get_type');
  LoadProc(Pointer(g_closure_invalidate), 'g_closure_invalidate');
  LoadProc(Pointer(g_closure_invoke), 'g_closure_invoke');
  LoadProc(Pointer(g_closure_new_object), 'g_closure_new_object');
  LoadProc(Pointer(g_closure_new_simple), 'g_closure_new_simple');
  LoadProc(Pointer(g_closure_ref), 'g_closure_ref');
  LoadProc(Pointer(g_closure_remove_finalize_notifier), 'g_closure_remove_finalize_notifier');
  LoadProc(Pointer(g_closure_remove_invalidate_notifier), 'g_closure_remove_invalidate_notifier');
  LoadProc(Pointer(g_closure_set_marshal), 'g_closure_set_marshal');
  LoadProc(Pointer(g_closure_set_meta_marshal), 'g_closure_set_meta_marshal');
  LoadProc(Pointer(g_closure_sink), 'g_closure_sink');
  LoadProc(Pointer(g_closure_unref), 'g_closure_unref');
  LoadProc(Pointer(g_enum_complete_type_info), 'g_enum_complete_type_info');
  LoadProc(Pointer(g_enum_get_value), 'g_enum_get_value');
  LoadProc(Pointer(g_enum_get_value_by_name), 'g_enum_get_value_by_name');
  LoadProc(Pointer(g_enum_get_value_by_nick), 'g_enum_get_value_by_nick');
  LoadProc(Pointer(g_enum_register_static), 'g_enum_register_static');
  LoadProc(Pointer(g_flags_complete_type_info), 'g_flags_complete_type_info');
  LoadProc(Pointer(g_flags_get_first_value), 'g_flags_get_first_value');
  LoadProc(Pointer(g_flags_get_value_by_name), 'g_flags_get_value_by_name');
  LoadProc(Pointer(g_flags_get_value_by_nick), 'g_flags_get_value_by_nick');
  LoadProc(Pointer(g_flags_register_static), 'g_flags_register_static');
  LoadProc(Pointer(g_gtype_get_type), 'g_gtype_get_type');
  LoadProc(Pointer(g_initially_unowned_get_type), 'g_initially_unowned_get_type');
  LoadProc(Pointer(g_object_add_toggle_ref), 'g_object_add_toggle_ref');
  LoadProc(Pointer(g_object_add_weak_pointer), 'g_object_add_weak_pointer');
  LoadProc(Pointer(g_object_bind_property), 'g_object_bind_property');
  LoadProc(Pointer(g_object_bind_property_full), 'g_object_bind_property_full');
  LoadProc(Pointer(g_object_bind_property_with_closures), 'g_object_bind_property_with_closures');
  LoadProc(Pointer(g_object_class_find_property), 'g_object_class_find_property');
  LoadProc(Pointer(g_object_class_install_properties), 'g_object_class_install_properties');
  LoadProc(Pointer(g_object_class_install_property), 'g_object_class_install_property');
  LoadProc(Pointer(g_object_class_list_properties), 'g_object_class_list_properties');
  LoadProc(Pointer(g_object_class_override_property), 'g_object_class_override_property');
  LoadProc(Pointer(g_object_compat_control), 'g_object_compat_control');
  LoadProc(Pointer(g_object_connect), 'g_object_connect');
  LoadProc(Pointer(g_object_disconnect), 'g_object_disconnect');
  LoadProc(Pointer(g_object_dup_data), 'g_object_dup_data');
  LoadProc(Pointer(g_object_dup_qdata), 'g_object_dup_qdata');
  LoadProc(Pointer(g_object_force_floating), 'g_object_force_floating');
  LoadProc(Pointer(g_object_freeze_notify), 'g_object_freeze_notify');
  LoadProc(Pointer(g_object_get), 'g_object_get');
  LoadProc(Pointer(g_object_get_data), 'g_object_get_data');
  LoadProc(Pointer(g_object_get_property), 'g_object_get_property');
  LoadProc(Pointer(g_object_get_qdata), 'g_object_get_qdata');
  LoadProc(Pointer(g_object_get_type), 'g_object_get_type');
  LoadProc(Pointer(g_object_get_valist), 'g_object_get_valist');
  LoadProc(Pointer(g_object_interface_find_property), 'g_object_interface_find_property');
  LoadProc(Pointer(g_object_interface_install_property), 'g_object_interface_install_property');
  LoadProc(Pointer(g_object_interface_list_properties), 'g_object_interface_list_properties');
  LoadProc(Pointer(g_object_is_floating), 'g_object_is_floating');
  LoadProc(Pointer(g_object_new), 'g_object_new');
  LoadProc(Pointer(g_object_new_valist), 'g_object_new_valist');
  LoadProc(Pointer(g_object_newv), 'g_object_newv');
  LoadProc(Pointer(g_object_notify), 'g_object_notify');
  LoadProc(Pointer(g_object_notify_by_pspec), 'g_object_notify_by_pspec');
  LoadProc(Pointer(g_object_ref), 'g_object_ref');
  LoadProc(Pointer(g_object_ref_sink), 'g_object_ref_sink');
  LoadProc(Pointer(g_object_remove_toggle_ref), 'g_object_remove_toggle_ref');
  LoadProc(Pointer(g_object_remove_weak_pointer), 'g_object_remove_weak_pointer');
  LoadProc(Pointer(g_object_replace_data), 'g_object_replace_data');
  LoadProc(Pointer(g_object_replace_qdata), 'g_object_replace_qdata');
  LoadProc(Pointer(g_object_run_dispose), 'g_object_run_dispose');
  LoadProc(Pointer(g_object_set), 'g_object_set');
  LoadProc(Pointer(g_object_set_data), 'g_object_set_data');
  LoadProc(Pointer(g_object_set_data_full), 'g_object_set_data_full');
  LoadProc(Pointer(g_object_set_property), 'g_object_set_property');
  LoadProc(Pointer(g_object_set_qdata), 'g_object_set_qdata');
  LoadProc(Pointer(g_object_set_qdata_full), 'g_object_set_qdata_full');
  LoadProc(Pointer(g_object_set_valist), 'g_object_set_valist');
  LoadProc(Pointer(g_object_steal_data), 'g_object_steal_data');
  LoadProc(Pointer(g_object_steal_qdata), 'g_object_steal_qdata');
  LoadProc(Pointer(g_object_thaw_notify), 'g_object_thaw_notify');
  LoadProc(Pointer(g_object_unref), 'g_object_unref');
  LoadProc(Pointer(g_object_watch_closure), 'g_object_watch_closure');
  LoadProc(Pointer(g_object_weak_ref), 'g_object_weak_ref');
  LoadProc(Pointer(g_object_weak_unref), 'g_object_weak_unref');
  LoadProc(Pointer(g_param_spec_boolean), 'g_param_spec_boolean');
  LoadProc(Pointer(g_param_spec_boxed), 'g_param_spec_boxed');
  LoadProc(Pointer(g_param_spec_char), 'g_param_spec_char');
  LoadProc(Pointer(g_param_spec_double), 'g_param_spec_double');
  LoadProc(Pointer(g_param_spec_enum), 'g_param_spec_enum');
  LoadProc(Pointer(g_param_spec_flags), 'g_param_spec_flags');
  LoadProc(Pointer(g_param_spec_float), 'g_param_spec_float');
  LoadProc(Pointer(g_param_spec_get_blurb), 'g_param_spec_get_blurb');
  LoadProc(Pointer(g_param_spec_get_name), 'g_param_spec_get_name');
  LoadProc(Pointer(g_param_spec_get_nick), 'g_param_spec_get_nick');
  LoadProc(Pointer(g_param_spec_get_qdata), 'g_param_spec_get_qdata');
  LoadProc(Pointer(g_param_spec_get_redirect_target), 'g_param_spec_get_redirect_target');
  LoadProc(Pointer(g_param_spec_gtype), 'g_param_spec_gtype');
  LoadProc(Pointer(g_param_spec_int), 'g_param_spec_int');
  LoadProc(Pointer(g_param_spec_int64), 'g_param_spec_int64');
  LoadProc(Pointer(g_param_spec_internal), 'g_param_spec_internal');
  LoadProc(Pointer(g_param_spec_long), 'g_param_spec_long');
  LoadProc(Pointer(g_param_spec_object), 'g_param_spec_object');
  LoadProc(Pointer(g_param_spec_override), 'g_param_spec_override');
  LoadProc(Pointer(g_param_spec_param), 'g_param_spec_param');
  LoadProc(Pointer(g_param_spec_pointer), 'g_param_spec_pointer');
  LoadProc(Pointer(g_param_spec_pool_insert), 'g_param_spec_pool_insert');
  LoadProc(Pointer(g_param_spec_pool_list), 'g_param_spec_pool_list');
  LoadProc(Pointer(g_param_spec_pool_list_owned), 'g_param_spec_pool_list_owned');
  LoadProc(Pointer(g_param_spec_pool_lookup), 'g_param_spec_pool_lookup');
  LoadProc(Pointer(g_param_spec_pool_new), 'g_param_spec_pool_new');
  LoadProc(Pointer(g_param_spec_pool_remove), 'g_param_spec_pool_remove');
  LoadProc(Pointer(g_param_spec_ref), 'g_param_spec_ref');
  LoadProc(Pointer(g_param_spec_ref_sink), 'g_param_spec_ref_sink');
  LoadProc(Pointer(g_param_spec_set_qdata), 'g_param_spec_set_qdata');
  LoadProc(Pointer(g_param_spec_set_qdata_full), 'g_param_spec_set_qdata_full');
  LoadProc(Pointer(g_param_spec_sink), 'g_param_spec_sink');
  LoadProc(Pointer(g_param_spec_steal_qdata), 'g_param_spec_steal_qdata');
  LoadProc(Pointer(g_param_spec_string), 'g_param_spec_string');
  LoadProc(Pointer(g_param_spec_uchar), 'g_param_spec_uchar');
  LoadProc(Pointer(g_param_spec_uint), 'g_param_spec_uint');
  LoadProc(Pointer(g_param_spec_uint64), 'g_param_spec_uint64');
  LoadProc(Pointer(g_param_spec_ulong), 'g_param_spec_ulong');
  LoadProc(Pointer(g_param_spec_unichar), 'g_param_spec_unichar');
  LoadProc(Pointer(g_param_spec_unref), 'g_param_spec_unref');
  LoadProc(Pointer(g_param_spec_value_array), 'g_param_spec_value_array');
  LoadProc(Pointer(g_param_spec_variant), 'g_param_spec_variant');
  LoadProc(Pointer(g_param_type_register_static), 'g_param_type_register_static');
  LoadProc(Pointer(g_param_value_convert), 'g_param_value_convert');
  LoadProc(Pointer(g_param_value_defaults), 'g_param_value_defaults');
  LoadProc(Pointer(g_param_value_set_default), 'g_param_value_set_default');
  LoadProc(Pointer(g_param_value_validate), 'g_param_value_validate');
  LoadProc(Pointer(g_param_values_cmp), 'g_param_values_cmp');
  LoadProc(Pointer(g_pointer_type_register_static), 'g_pointer_type_register_static');
  LoadProc(Pointer(g_signal_accumulator_first_wins), 'g_signal_accumulator_first_wins');
  LoadProc(Pointer(g_signal_accumulator_true_handled), 'g_signal_accumulator_true_handled');
  LoadProc(Pointer(g_signal_add_emission_hook), 'g_signal_add_emission_hook');
  LoadProc(Pointer(g_signal_chain_from_overridden), 'g_signal_chain_from_overridden');
  LoadProc(Pointer(g_signal_chain_from_overridden_handler), 'g_signal_chain_from_overridden_handler');
  LoadProc(Pointer(g_signal_connect_closure), 'g_signal_connect_closure');
  LoadProc(Pointer(g_signal_connect_closure_by_id), 'g_signal_connect_closure_by_id');
  LoadProc(Pointer(g_signal_connect_data), 'g_signal_connect_data');
  LoadProc(Pointer(g_signal_connect_object), 'g_signal_connect_object');
  LoadProc(Pointer(g_signal_emit), 'g_signal_emit');
  LoadProc(Pointer(g_signal_emit_by_name), 'g_signal_emit_by_name');
  LoadProc(Pointer(g_signal_emit_valist), 'g_signal_emit_valist');
  LoadProc(Pointer(g_signal_emitv), 'g_signal_emitv');
  LoadProc(Pointer(g_signal_get_invocation_hint), 'g_signal_get_invocation_hint');
  LoadProc(Pointer(g_signal_handler_block), 'g_signal_handler_block');
  LoadProc(Pointer(g_signal_handler_disconnect), 'g_signal_handler_disconnect');
  LoadProc(Pointer(g_signal_handler_find), 'g_signal_handler_find');
  LoadProc(Pointer(g_signal_handler_is_connected), 'g_signal_handler_is_connected');
  LoadProc(Pointer(g_signal_handler_unblock), 'g_signal_handler_unblock');
  LoadProc(Pointer(g_signal_handlers_block_matched), 'g_signal_handlers_block_matched');
  LoadProc(Pointer(g_signal_handlers_destroy), 'g_signal_handlers_destroy');
  LoadProc(Pointer(g_signal_handlers_disconnect_matched), 'g_signal_handlers_disconnect_matched');
  LoadProc(Pointer(g_signal_handlers_unblock_matched), 'g_signal_handlers_unblock_matched');
  LoadProc(Pointer(g_signal_has_handler_pending), 'g_signal_has_handler_pending');
  LoadProc(Pointer(g_signal_list_ids), 'g_signal_list_ids');
  LoadProc(Pointer(g_signal_lookup), 'g_signal_lookup');
  LoadProc(Pointer(g_signal_name), 'g_signal_name');
  LoadProc(Pointer(g_signal_new), 'g_signal_new');
  LoadProc(Pointer(g_signal_new_class_handler), 'g_signal_new_class_handler');
  LoadProc(Pointer(g_signal_new_valist), 'g_signal_new_valist');
  LoadProc(Pointer(g_signal_newv), 'g_signal_newv');
  LoadProc(Pointer(g_signal_override_class_closure), 'g_signal_override_class_closure');
  LoadProc(Pointer(g_signal_override_class_handler), 'g_signal_override_class_handler');
  LoadProc(Pointer(g_signal_parse_name), 'g_signal_parse_name');
  LoadProc(Pointer(g_signal_query), 'g_signal_query');
  LoadProc(Pointer(g_signal_remove_emission_hook), 'g_signal_remove_emission_hook');
  LoadProc(Pointer(g_signal_set_va_marshaller), 'g_signal_set_va_marshaller');
  LoadProc(Pointer(g_signal_stop_emission), 'g_signal_stop_emission');
  LoadProc(Pointer(g_signal_stop_emission_by_name), 'g_signal_stop_emission_by_name');
  LoadProc(Pointer(g_signal_type_cclosure_new), 'g_signal_type_cclosure_new');
  LoadProc(Pointer(g_source_set_closure), 'g_source_set_closure');
  LoadProc(Pointer(g_source_set_dummy_callback), 'g_source_set_dummy_callback');
  LoadProc(Pointer(g_strdup_value_contents), 'g_strdup_value_contents');
  LoadProc(Pointer(g_type_add_class_cache_func), 'g_type_add_class_cache_func');
  LoadProc(Pointer(g_type_add_class_private), 'g_type_add_class_private');
  LoadProc(Pointer(g_type_add_interface_check), 'g_type_add_interface_check');
  LoadProc(Pointer(g_type_add_interface_dynamic), 'g_type_add_interface_dynamic');
  LoadProc(Pointer(g_type_add_interface_static), 'g_type_add_interface_static');
  LoadProc(Pointer(g_type_check_class_cast), 'g_type_check_class_cast');
  LoadProc(Pointer(g_type_check_class_is_a), 'g_type_check_class_is_a');
  LoadProc(Pointer(g_type_check_instance), 'g_type_check_instance');
  LoadProc(Pointer(g_type_check_instance_cast), 'g_type_check_instance_cast');
  LoadProc(Pointer(g_type_check_instance_is_a), 'g_type_check_instance_is_a');
  LoadProc(Pointer(g_type_check_is_value_type), 'g_type_check_is_value_type');
  LoadProc(Pointer(g_type_check_value), 'g_type_check_value');
  LoadProc(Pointer(g_type_check_value_holds), 'g_type_check_value_holds');
  LoadProc(Pointer(g_type_children), 'g_type_children');
  LoadProc(Pointer(g_type_class_add_private), 'g_type_class_add_private');
  LoadProc(Pointer(g_type_class_get_private), 'g_type_class_get_private');
  LoadProc(Pointer(g_type_class_peek), 'g_type_class_peek');
  LoadProc(Pointer(g_type_class_peek_parent), 'g_type_class_peek_parent');
  LoadProc(Pointer(g_type_class_peek_static), 'g_type_class_peek_static');
  LoadProc(Pointer(g_type_class_ref), 'g_type_class_ref');
  LoadProc(Pointer(g_type_class_unref), 'g_type_class_unref');
  LoadProc(Pointer(g_type_class_unref_uncached), 'g_type_class_unref_uncached');
  LoadProc(Pointer(g_type_create_instance), 'g_type_create_instance');
  LoadProc(Pointer(g_type_default_interface_peek), 'g_type_default_interface_peek');
  LoadProc(Pointer(g_type_default_interface_ref), 'g_type_default_interface_ref');
  LoadProc(Pointer(g_type_default_interface_unref), 'g_type_default_interface_unref');
  LoadProc(Pointer(g_type_depth), 'g_type_depth');
  LoadProc(Pointer(g_type_ensure), 'g_type_ensure');
  LoadProc(Pointer(g_type_free_instance), 'g_type_free_instance');
  LoadProc(Pointer(g_type_from_name), 'g_type_from_name');
  LoadProc(Pointer(g_type_fundamental), 'g_type_fundamental');
  LoadProc(Pointer(g_type_fundamental_next), 'g_type_fundamental_next');
  LoadProc(Pointer(g_type_get_plugin), 'g_type_get_plugin');
  LoadProc(Pointer(g_type_get_qdata), 'g_type_get_qdata');
  LoadProc(Pointer(g_type_get_type_registration_serial), 'g_type_get_type_registration_serial');
  LoadProc(Pointer(g_type_init), 'g_type_init');
  LoadProc(Pointer(g_type_init_with_debug_flags), 'g_type_init_with_debug_flags');
  LoadProc(Pointer(g_type_instance_get_private), 'g_type_instance_get_private');
  LoadProc(Pointer(g_type_interface_add_prerequisite), 'g_type_interface_add_prerequisite');
  LoadProc(Pointer(g_type_interface_get_plugin), 'g_type_interface_get_plugin');
  LoadProc(Pointer(g_type_interface_peek), 'g_type_interface_peek');
  LoadProc(Pointer(g_type_interface_peek_parent), 'g_type_interface_peek_parent');
  LoadProc(Pointer(g_type_interface_prerequisites), 'g_type_interface_prerequisites');
  LoadProc(Pointer(g_type_interfaces), 'g_type_interfaces');
  LoadProc(Pointer(g_type_is_a), 'g_type_is_a');
  LoadProc(Pointer(g_type_module_add_interface), 'g_type_module_add_interface');
  LoadProc(Pointer(g_type_module_get_type), 'g_type_module_get_type');
  LoadProc(Pointer(g_type_module_register_enum), 'g_type_module_register_enum');
  LoadProc(Pointer(g_type_module_register_flags), 'g_type_module_register_flags');
  LoadProc(Pointer(g_type_module_register_type), 'g_type_module_register_type');
  LoadProc(Pointer(g_type_module_set_name), 'g_type_module_set_name');
  LoadProc(Pointer(g_type_module_unuse), 'g_type_module_unuse');
  LoadProc(Pointer(g_type_module_use), 'g_type_module_use');
  LoadProc(Pointer(g_type_name), 'g_type_name');
  LoadProc(Pointer(g_type_name_from_class), 'g_type_name_from_class');
  LoadProc(Pointer(g_type_name_from_instance), 'g_type_name_from_instance');
  LoadProc(Pointer(g_type_next_base), 'g_type_next_base');
  LoadProc(Pointer(g_type_parent), 'g_type_parent');
  LoadProc(Pointer(g_type_plugin_complete_interface_info), 'g_type_plugin_complete_interface_info');
  LoadProc(Pointer(g_type_plugin_complete_type_info), 'g_type_plugin_complete_type_info');
  LoadProc(Pointer(g_type_plugin_get_type), 'g_type_plugin_get_type');
  LoadProc(Pointer(g_type_plugin_unuse), 'g_type_plugin_unuse');
  LoadProc(Pointer(g_type_plugin_use), 'g_type_plugin_use');
  LoadProc(Pointer(g_type_qname), 'g_type_qname');
  LoadProc(Pointer(g_type_query), 'g_type_query');
  LoadProc(Pointer(g_type_register_dynamic), 'g_type_register_dynamic');
  LoadProc(Pointer(g_type_register_fundamental), 'g_type_register_fundamental');
  LoadProc(Pointer(g_type_register_static), 'g_type_register_static');
  LoadProc(Pointer(g_type_register_static_simple), 'g_type_register_static_simple');
  LoadProc(Pointer(g_type_remove_class_cache_func), 'g_type_remove_class_cache_func');
  LoadProc(Pointer(g_type_remove_interface_check), 'g_type_remove_interface_check');
  LoadProc(Pointer(g_type_set_qdata), 'g_type_set_qdata');
  LoadProc(Pointer(g_type_test_flags), 'g_type_test_flags');
  LoadProc(Pointer(g_type_value_table_peek), 'g_type_value_table_peek');
  LoadProc(Pointer(g_value_array_get_type), 'g_value_array_get_type');
  LoadProc(Pointer(g_value_copy), 'g_value_copy');
  LoadProc(Pointer(g_value_dup_boxed), 'g_value_dup_boxed');
  LoadProc(Pointer(g_value_dup_object), 'g_value_dup_object');
  LoadProc(Pointer(g_value_dup_param), 'g_value_dup_param');
  LoadProc(Pointer(g_value_dup_string), 'g_value_dup_string');
  LoadProc(Pointer(g_value_dup_variant), 'g_value_dup_variant');
  LoadProc(Pointer(g_value_fits_pointer), 'g_value_fits_pointer');
  LoadProc(Pointer(g_value_get_boolean), 'g_value_get_boolean');
  LoadProc(Pointer(g_value_get_boxed), 'g_value_get_boxed');
  LoadProc(Pointer(g_value_get_double), 'g_value_get_double');
  LoadProc(Pointer(g_value_get_enum), 'g_value_get_enum');
  LoadProc(Pointer(g_value_get_flags), 'g_value_get_flags');
  LoadProc(Pointer(g_value_get_float), 'g_value_get_float');
  LoadProc(Pointer(g_value_get_gtype), 'g_value_get_gtype');
  LoadProc(Pointer(g_value_get_int), 'g_value_get_int');
  LoadProc(Pointer(g_value_get_int64), 'g_value_get_int64');
  LoadProc(Pointer(g_value_get_long), 'g_value_get_long');
  LoadProc(Pointer(g_value_get_object), 'g_value_get_object');
  LoadProc(Pointer(g_value_get_param), 'g_value_get_param');
  LoadProc(Pointer(g_value_get_pointer), 'g_value_get_pointer');
  LoadProc(Pointer(g_value_get_schar), 'g_value_get_schar');
  LoadProc(Pointer(g_value_get_string), 'g_value_get_string');
  LoadProc(Pointer(g_value_get_type), 'g_value_get_type');
  LoadProc(Pointer(g_value_get_uchar), 'g_value_get_uchar');
  LoadProc(Pointer(g_value_get_uint), 'g_value_get_uint');
  LoadProc(Pointer(g_value_get_uint64), 'g_value_get_uint64');
  LoadProc(Pointer(g_value_get_ulong), 'g_value_get_ulong');
  LoadProc(Pointer(g_value_get_variant), 'g_value_get_variant');
  LoadProc(Pointer(g_value_init), 'g_value_init');
  LoadProc(Pointer(g_value_peek_pointer), 'g_value_peek_pointer');
  LoadProc(Pointer(g_value_register_transform_func), 'g_value_register_transform_func');
  LoadProc(Pointer(g_value_reset), 'g_value_reset');
  LoadProc(Pointer(g_value_set_boolean), 'g_value_set_boolean');
  LoadProc(Pointer(g_value_set_boxed), 'g_value_set_boxed');
  LoadProc(Pointer(g_value_set_double), 'g_value_set_double');
  LoadProc(Pointer(g_value_set_enum), 'g_value_set_enum');
  LoadProc(Pointer(g_value_set_flags), 'g_value_set_flags');
  LoadProc(Pointer(g_value_set_float), 'g_value_set_float');
  LoadProc(Pointer(g_value_set_gtype), 'g_value_set_gtype');
  LoadProc(Pointer(g_value_set_instance), 'g_value_set_instance');
  LoadProc(Pointer(g_value_set_int), 'g_value_set_int');
  LoadProc(Pointer(g_value_set_int64), 'g_value_set_int64');
  LoadProc(Pointer(g_value_set_long), 'g_value_set_long');
  LoadProc(Pointer(g_value_set_object), 'g_value_set_object');
  LoadProc(Pointer(g_value_set_param), 'g_value_set_param');
  LoadProc(Pointer(g_value_set_pointer), 'g_value_set_pointer');
  LoadProc(Pointer(g_value_set_schar), 'g_value_set_schar');
  LoadProc(Pointer(g_value_set_static_boxed), 'g_value_set_static_boxed');
  LoadProc(Pointer(g_value_set_static_string), 'g_value_set_static_string');
  LoadProc(Pointer(g_value_set_string), 'g_value_set_string');
  LoadProc(Pointer(g_value_set_uchar), 'g_value_set_uchar');
  LoadProc(Pointer(g_value_set_uint), 'g_value_set_uint');
  LoadProc(Pointer(g_value_set_uint64), 'g_value_set_uint64');
  LoadProc(Pointer(g_value_set_ulong), 'g_value_set_ulong');
  LoadProc(Pointer(g_value_set_variant), 'g_value_set_variant');
  LoadProc(Pointer(g_value_take_boxed), 'g_value_take_boxed');
  LoadProc(Pointer(g_value_take_object), 'g_value_take_object');
  LoadProc(Pointer(g_value_take_param), 'g_value_take_param');
  LoadProc(Pointer(g_value_take_string), 'g_value_take_string');
  LoadProc(Pointer(g_value_take_variant), 'g_value_take_variant');
  LoadProc(Pointer(g_value_transform), 'g_value_transform');
  LoadProc(Pointer(g_value_type_compatible), 'g_value_type_compatible');
  LoadProc(Pointer(g_value_type_transformable), 'g_value_type_transformable');
  LoadProc(Pointer(g_value_unset), 'g_value_unset');
  LoadProc(Pointer(g_weak_ref_clear), 'g_weak_ref_clear');
  LoadProc(Pointer(g_weak_ref_get), 'g_weak_ref_get');
  LoadProc(Pointer(g_weak_ref_init), 'g_weak_ref_init');
  LoadProc(Pointer(g_weak_ref_set), 'g_weak_ref_set');
end;

procedure UnloadLibraries;
begin
 if libgobject_2_0_so_0 <> 0 then
   UnloadLibrary(libgobject_2_0_so_0);
   libgobject_2_0_so_0 := 0;
  g_binding_get_flags := nil;
  g_binding_get_source := nil;
  g_binding_get_source_property := nil;
  g_binding_get_target := nil;
  g_binding_get_target_property := nil;
  g_binding_get_type := nil;
  g_boxed_copy := nil;
  g_boxed_free := nil;
  g_boxed_type_register_static := nil;
  g_cclosure_marshal_BOOLEAN__BOXED_BOXED := nil;
  g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv := nil;
  g_cclosure_marshal_BOOLEAN__FLAGS := nil;
  g_cclosure_marshal_BOOLEAN__FLAGSv := nil;
  g_cclosure_marshal_generic := nil;
  g_cclosure_marshal_generic_va := nil;
  g_cclosure_marshal_STRING__OBJECT_POINTER := nil;
  g_cclosure_marshal_STRING__OBJECT_POINTERv := nil;
  g_cclosure_marshal_VOID__BOOLEAN := nil;
  g_cclosure_marshal_VOID__BOOLEANv := nil;
  g_cclosure_marshal_VOID__BOXED := nil;
  g_cclosure_marshal_VOID__BOXEDv := nil;
  g_cclosure_marshal_VOID__CHAR := nil;
  g_cclosure_marshal_VOID__CHARv := nil;
  g_cclosure_marshal_VOID__DOUBLE := nil;
  g_cclosure_marshal_VOID__DOUBLEv := nil;
  g_cclosure_marshal_VOID__ENUM := nil;
  g_cclosure_marshal_VOID__ENUMv := nil;
  g_cclosure_marshal_VOID__FLAGS := nil;
  g_cclosure_marshal_VOID__FLAGSv := nil;
  g_cclosure_marshal_VOID__FLOAT := nil;
  g_cclosure_marshal_VOID__FLOATv := nil;
  g_cclosure_marshal_VOID__INT := nil;
  g_cclosure_marshal_VOID__INTv := nil;
  g_cclosure_marshal_VOID__LONG := nil;
  g_cclosure_marshal_VOID__LONGv := nil;
  g_cclosure_marshal_VOID__OBJECT := nil;
  g_cclosure_marshal_VOID__OBJECTv := nil;
  g_cclosure_marshal_VOID__PARAM := nil;
  g_cclosure_marshal_VOID__PARAMv := nil;
  g_cclosure_marshal_VOID__POINTER := nil;
  g_cclosure_marshal_VOID__POINTERv := nil;
  g_cclosure_marshal_VOID__STRING := nil;
  g_cclosure_marshal_VOID__STRINGv := nil;
  g_cclosure_marshal_VOID__UCHAR := nil;
  g_cclosure_marshal_VOID__UCHARv := nil;
  g_cclosure_marshal_VOID__UINT := nil;
  g_cclosure_marshal_VOID__UINT_POINTER := nil;
  g_cclosure_marshal_VOID__UINT_POINTERv := nil;
  g_cclosure_marshal_VOID__UINTv := nil;
  g_cclosure_marshal_VOID__ULONG := nil;
  g_cclosure_marshal_VOID__ULONGv := nil;
  g_cclosure_marshal_VOID__VARIANT := nil;
  g_cclosure_marshal_VOID__VARIANTv := nil;
  g_cclosure_marshal_VOID__VOID := nil;
  g_cclosure_marshal_VOID__VOIDv := nil;
  g_cclosure_new := nil;
  g_cclosure_new_object := nil;
  g_cclosure_new_object_swap := nil;
  g_cclosure_new_swap := nil;
  g_clear_object := nil;
  g_closure_add_finalize_notifier := nil;
  g_closure_add_invalidate_notifier := nil;
  g_closure_add_marshal_guards := nil;
  g_closure_get_type := nil;
  g_closure_invalidate := nil;
  g_closure_invoke := nil;
  g_closure_new_object := nil;
  g_closure_new_simple := nil;
  g_closure_ref := nil;
  g_closure_remove_finalize_notifier := nil;
  g_closure_remove_invalidate_notifier := nil;
  g_closure_set_marshal := nil;
  g_closure_set_meta_marshal := nil;
  g_closure_sink := nil;
  g_closure_unref := nil;
  g_enum_complete_type_info := nil;
  g_enum_get_value := nil;
  g_enum_get_value_by_name := nil;
  g_enum_get_value_by_nick := nil;
  g_enum_register_static := nil;
  g_flags_complete_type_info := nil;
  g_flags_get_first_value := nil;
  g_flags_get_value_by_name := nil;
  g_flags_get_value_by_nick := nil;
  g_flags_register_static := nil;
  g_gtype_get_type := nil;
  g_initially_unowned_get_type := nil;
  g_object_add_toggle_ref := nil;
  g_object_add_weak_pointer := nil;
  g_object_bind_property := nil;
  g_object_bind_property_full := nil;
  g_object_bind_property_with_closures := nil;
  g_object_class_find_property := nil;
  g_object_class_install_properties := nil;
  g_object_class_install_property := nil;
  g_object_class_list_properties := nil;
  g_object_class_override_property := nil;
  g_object_compat_control := nil;
  g_object_connect := nil;
  g_object_disconnect := nil;
  g_object_dup_data := nil;
  g_object_dup_qdata := nil;
  g_object_force_floating := nil;
  g_object_freeze_notify := nil;
  g_object_get := nil;
  g_object_get_data := nil;
  g_object_get_property := nil;
  g_object_get_qdata := nil;
  g_object_get_type := nil;
  g_object_get_valist := nil;
  g_object_interface_find_property := nil;
  g_object_interface_install_property := nil;
  g_object_interface_list_properties := nil;
  g_object_is_floating := nil;
  g_object_new := nil;
  g_object_new_valist := nil;
  g_object_newv := nil;
  g_object_notify := nil;
  g_object_notify_by_pspec := nil;
  g_object_ref := nil;
  g_object_ref_sink := nil;
  g_object_remove_toggle_ref := nil;
  g_object_remove_weak_pointer := nil;
  g_object_replace_data := nil;
  g_object_replace_qdata := nil;
  g_object_run_dispose := nil;
  g_object_set := nil;
  g_object_set_data := nil;
  g_object_set_data_full := nil;
  g_object_set_property := nil;
  g_object_set_qdata := nil;
  g_object_set_qdata_full := nil;
  g_object_set_valist := nil;
  g_object_steal_data := nil;
  g_object_steal_qdata := nil;
  g_object_thaw_notify := nil;
  g_object_unref := nil;
  g_object_watch_closure := nil;
  g_object_weak_ref := nil;
  g_object_weak_unref := nil;
  g_param_spec_boolean := nil;
  g_param_spec_boxed := nil;
  g_param_spec_char := nil;
  g_param_spec_double := nil;
  g_param_spec_enum := nil;
  g_param_spec_flags := nil;
  g_param_spec_float := nil;
  g_param_spec_get_blurb := nil;
  g_param_spec_get_name := nil;
  g_param_spec_get_nick := nil;
  g_param_spec_get_qdata := nil;
  g_param_spec_get_redirect_target := nil;
  g_param_spec_gtype := nil;
  g_param_spec_int := nil;
  g_param_spec_int64 := nil;
  g_param_spec_internal := nil;
  g_param_spec_long := nil;
  g_param_spec_object := nil;
  g_param_spec_override := nil;
  g_param_spec_param := nil;
  g_param_spec_pointer := nil;
  g_param_spec_pool_insert := nil;
  g_param_spec_pool_list := nil;
  g_param_spec_pool_list_owned := nil;
  g_param_spec_pool_lookup := nil;
  g_param_spec_pool_new := nil;
  g_param_spec_pool_remove := nil;
  g_param_spec_ref := nil;
  g_param_spec_ref_sink := nil;
  g_param_spec_set_qdata := nil;
  g_param_spec_set_qdata_full := nil;
  g_param_spec_sink := nil;
  g_param_spec_steal_qdata := nil;
  g_param_spec_string := nil;
  g_param_spec_uchar := nil;
  g_param_spec_uint := nil;
  g_param_spec_uint64 := nil;
  g_param_spec_ulong := nil;
  g_param_spec_unichar := nil;
  g_param_spec_unref := nil;
  g_param_spec_value_array := nil;
  g_param_spec_variant := nil;
  g_param_type_register_static := nil;
  g_param_value_convert := nil;
  g_param_value_defaults := nil;
  g_param_value_set_default := nil;
  g_param_value_validate := nil;
  g_param_values_cmp := nil;
  g_pointer_type_register_static := nil;
  g_signal_accumulator_first_wins := nil;
  g_signal_accumulator_true_handled := nil;
  g_signal_add_emission_hook := nil;
  g_signal_chain_from_overridden := nil;
  g_signal_chain_from_overridden_handler := nil;
  g_signal_connect_closure := nil;
  g_signal_connect_closure_by_id := nil;
  g_signal_connect_data := nil;
  g_signal_connect_object := nil;
  g_signal_emit := nil;
  g_signal_emit_by_name := nil;
  g_signal_emit_valist := nil;
  g_signal_emitv := nil;
  g_signal_get_invocation_hint := nil;
  g_signal_handler_block := nil;
  g_signal_handler_disconnect := nil;
  g_signal_handler_find := nil;
  g_signal_handler_is_connected := nil;
  g_signal_handler_unblock := nil;
  g_signal_handlers_block_matched := nil;
  g_signal_handlers_destroy := nil;
  g_signal_handlers_disconnect_matched := nil;
  g_signal_handlers_unblock_matched := nil;
  g_signal_has_handler_pending := nil;
  g_signal_list_ids := nil;
  g_signal_lookup := nil;
  g_signal_name := nil;
  g_signal_new := nil;
  g_signal_new_class_handler := nil;
  g_signal_new_valist := nil;
  g_signal_newv := nil;
  g_signal_override_class_closure := nil;
  g_signal_override_class_handler := nil;
  g_signal_parse_name := nil;
  g_signal_query := nil;
  g_signal_remove_emission_hook := nil;
  g_signal_set_va_marshaller := nil;
  g_signal_stop_emission := nil;
  g_signal_stop_emission_by_name := nil;
  g_signal_type_cclosure_new := nil;
  g_source_set_closure := nil;
  g_source_set_dummy_callback := nil;
  g_strdup_value_contents := nil;
  g_type_add_class_cache_func := nil;
  g_type_add_class_private := nil;
  g_type_add_interface_check := nil;
  g_type_add_interface_dynamic := nil;
  g_type_add_interface_static := nil;
  g_type_check_class_cast := nil;
  g_type_check_class_is_a := nil;
  g_type_check_instance := nil;
  g_type_check_instance_cast := nil;
  g_type_check_instance_is_a := nil;
  g_type_check_is_value_type := nil;
  g_type_check_value := nil;
  g_type_check_value_holds := nil;
  g_type_children := nil;
  g_type_class_add_private := nil;
  g_type_class_get_private := nil;
  g_type_class_peek := nil;
  g_type_class_peek_parent := nil;
  g_type_class_peek_static := nil;
  g_type_class_ref := nil;
  g_type_class_unref := nil;
  g_type_class_unref_uncached := nil;
  g_type_create_instance := nil;
  g_type_default_interface_peek := nil;
  g_type_default_interface_ref := nil;
  g_type_default_interface_unref := nil;
  g_type_depth := nil;
  g_type_ensure := nil;
  g_type_free_instance := nil;
  g_type_from_name := nil;
  g_type_fundamental := nil;
  g_type_fundamental_next := nil;
  g_type_get_plugin := nil;
  g_type_get_qdata := nil;
  g_type_get_type_registration_serial := nil;
  g_type_init := nil;
  g_type_init_with_debug_flags := nil;
  g_type_instance_get_private := nil;
  g_type_interface_add_prerequisite := nil;
  g_type_interface_get_plugin := nil;
  g_type_interface_peek := nil;
  g_type_interface_peek_parent := nil;
  g_type_interface_prerequisites := nil;
  g_type_interfaces := nil;
  g_type_is_a := nil;
  g_type_module_add_interface := nil;
  g_type_module_get_type := nil;
  g_type_module_register_enum := nil;
  g_type_module_register_flags := nil;
  g_type_module_register_type := nil;
  g_type_module_set_name := nil;
  g_type_module_unuse := nil;
  g_type_module_use := nil;
  g_type_name := nil;
  g_type_name_from_class := nil;
  g_type_name_from_instance := nil;
  g_type_next_base := nil;
  g_type_parent := nil;
  g_type_plugin_complete_interface_info := nil;
  g_type_plugin_complete_type_info := nil;
  g_type_plugin_get_type := nil;
  g_type_plugin_unuse := nil;
  g_type_plugin_use := nil;
  g_type_qname := nil;
  g_type_query := nil;
  g_type_register_dynamic := nil;
  g_type_register_fundamental := nil;
  g_type_register_static := nil;
  g_type_register_static_simple := nil;
  g_type_remove_class_cache_func := nil;
  g_type_remove_interface_check := nil;
  g_type_set_qdata := nil;
  g_type_test_flags := nil;
  g_type_value_table_peek := nil;
  g_value_array_get_type := nil;
  g_value_copy := nil;
  g_value_dup_boxed := nil;
  g_value_dup_object := nil;
  g_value_dup_param := nil;
  g_value_dup_string := nil;
  g_value_dup_variant := nil;
  g_value_fits_pointer := nil;
  g_value_get_boolean := nil;
  g_value_get_boxed := nil;
  g_value_get_double := nil;
  g_value_get_enum := nil;
  g_value_get_flags := nil;
  g_value_get_float := nil;
  g_value_get_gtype := nil;
  g_value_get_int := nil;
  g_value_get_int64 := nil;
  g_value_get_long := nil;
  g_value_get_object := nil;
  g_value_get_param := nil;
  g_value_get_pointer := nil;
  g_value_get_schar := nil;
  g_value_get_string := nil;
  g_value_get_type := nil;
  g_value_get_uchar := nil;
  g_value_get_uint := nil;
  g_value_get_uint64 := nil;
  g_value_get_ulong := nil;
  g_value_get_variant := nil;
  g_value_init := nil;
  g_value_peek_pointer := nil;
  g_value_register_transform_func := nil;
  g_value_reset := nil;
  g_value_set_boolean := nil;
  g_value_set_boxed := nil;
  g_value_set_double := nil;
  g_value_set_enum := nil;
  g_value_set_flags := nil;
  g_value_set_float := nil;
  g_value_set_gtype := nil;
  g_value_set_instance := nil;
  g_value_set_int := nil;
  g_value_set_int64 := nil;
  g_value_set_long := nil;
  g_value_set_object := nil;
  g_value_set_param := nil;
  g_value_set_pointer := nil;
  g_value_set_schar := nil;
  g_value_set_static_boxed := nil;
  g_value_set_static_string := nil;
  g_value_set_string := nil;
  g_value_set_uchar := nil;
  g_value_set_uint := nil;
  g_value_set_uint64 := nil;
  g_value_set_ulong := nil;
  g_value_set_variant := nil;
  g_value_take_boxed := nil;
  g_value_take_object := nil;
  g_value_take_param := nil;
  g_value_take_string := nil;
  g_value_take_variant := nil;
  g_value_transform := nil;
  g_value_type_compatible := nil;
  g_value_type_transformable := nil;
  g_value_unset := nil;
  g_weak_ref_clear := nil;
  g_weak_ref_get := nil;
  g_weak_ref_init := nil;
  g_weak_ref_set := nil;
end;

initialization
LoadLibraries;
LoadProcs;

finalization
UnloadLibraries;

end.